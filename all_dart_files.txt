================================================================================
// FILE PATH: .dart_tool\dartpad\web_plugin_registrant.dart
================================================================================

// Flutter web plugin registrant file.
//
// Generated file. Do not edit.
//

// @dart = 2.13
// ignore_for_file: type=lint

import 'package:connectivity_plus/src/connectivity_plus_web.dart';
import 'package:flutter_secure_storage_web/flutter_secure_storage_web.dart';
import 'package:image_picker_for_web/image_picker_for_web.dart';
import 'package:share_plus/src/share_plus_web.dart';
import 'package:url_launcher_web/url_launcher_web.dart';
import 'package:flutter_web_plugins/flutter_web_plugins.dart';

void registerPlugins([final Registrar? pluginRegistrar]) {
  final Registrar registrar = pluginRegistrar ?? webPluginRegistrar;
  ConnectivityPlusWebPlugin.registerWith(registrar);
  FlutterSecureStorageWeb.registerWith(registrar);
  ImagePickerPlugin.registerWith(registrar);
  SharePlusWebPlugin.registerWith(registrar);
  UrlLauncherPlugin.registerWith(registrar);
  registrar.registerMessageHandler();
}


================================================================================
// FILE PATH: .dart_tool\flutter_build\dart_plugin_registrant.dart
================================================================================

//
// Generated file. Do not edit.
// This file is generated from template in file `flutter_tools/lib/src/flutter_plugins.dart`.
//

// @dart = 3.4

import 'dart:io'; // flutter_ignore: dart_io_import.
import 'package:image_picker_android/image_picker_android.dart';
import 'package:path_provider_android/path_provider_android.dart';
import 'package:sqflite_android/sqflite_android.dart';
import 'package:image_picker_ios/image_picker_ios.dart';
import 'package:path_provider_foundation/path_provider_foundation.dart';
import 'package:sqflite_darwin/sqflite_darwin.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:file_selector_linux/file_selector_linux.dart';
import 'package:image_picker_linux/image_picker_linux.dart';
import 'package:path_provider_linux/path_provider_linux.dart';
import 'package:share_plus/share_plus.dart';
import 'package:url_launcher_linux/url_launcher_linux.dart';
import 'package:file_selector_macos/file_selector_macos.dart';
import 'package:image_picker_macos/image_picker_macos.dart';
import 'package:path_provider_foundation/path_provider_foundation.dart';
import 'package:sqflite_darwin/sqflite_darwin.dart';
import 'package:file_selector_windows/file_selector_windows.dart';
import 'package:flutter_secure_storage_windows/flutter_secure_storage_windows.dart';
import 'package:image_picker_windows/image_picker_windows.dart';
import 'package:path_provider_windows/path_provider_windows.dart';
import 'package:share_plus/share_plus.dart';
import 'package:url_launcher_windows/url_launcher_windows.dart';

@pragma('vm:entry-point')
class _PluginRegistrant {

  @pragma('vm:entry-point')
  static void register() {
    if (Platform.isAndroid) {
      try {
        ImagePickerAndroid.registerWith();
      } catch (err) {
        print(
          '`image_picker_android` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        PathProviderAndroid.registerWith();
      } catch (err) {
        print(
          '`path_provider_android` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        SqfliteAndroid.registerWith();
      } catch (err) {
        print(
          '`sqflite_android` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isIOS) {
      try {
        ImagePickerIOS.registerWith();
      } catch (err) {
        print(
          '`image_picker_ios` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        PathProviderFoundation.registerWith();
      } catch (err) {
        print(
          '`path_provider_foundation` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        SqfliteDarwin.registerWith();
      } catch (err) {
        print(
          '`sqflite_darwin` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isLinux) {
      try {
        ConnectivityPlusLinuxPlugin.registerWith();
      } catch (err) {
        print(
          '`connectivity_plus` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        FileSelectorLinux.registerWith();
      } catch (err) {
        print(
          '`file_selector_linux` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        ImagePickerLinux.registerWith();
      } catch (err) {
        print(
          '`image_picker_linux` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        PathProviderLinux.registerWith();
      } catch (err) {
        print(
          '`path_provider_linux` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        SharePlusLinuxPlugin.registerWith();
      } catch (err) {
        print(
          '`share_plus` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        UrlLauncherLinux.registerWith();
      } catch (err) {
        print(
          '`url_launcher_linux` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isMacOS) {
      try {
        FileSelectorMacOS.registerWith();
      } catch (err) {
        print(
          '`file_selector_macos` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        ImagePickerMacOS.registerWith();
      } catch (err) {
        print(
          '`image_picker_macos` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        PathProviderFoundation.registerWith();
      } catch (err) {
        print(
          '`path_provider_foundation` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        SqfliteDarwin.registerWith();
      } catch (err) {
        print(
          '`sqflite_darwin` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isWindows) {
      try {
        FileSelectorWindows.registerWith();
      } catch (err) {
        print(
          '`file_selector_windows` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        FlutterSecureStorageWindows.registerWith();
      } catch (err) {
        print(
          '`flutter_secure_storage_windows` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        ImagePickerWindows.registerWith();
      } catch (err) {
        print(
          '`image_picker_windows` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        PathProviderWindows.registerWith();
      } catch (err) {
        print(
          '`path_provider_windows` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        SharePlusWindowsPlugin.registerWith();
      } catch (err) {
        print(
          '`share_plus` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        UrlLauncherWindows.registerWith();
      } catch (err) {
        print(
          '`url_launcher_windows` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    }
  }
}


================================================================================
// FILE PATH: lib\main.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:graphql_flutter/graphql_flutter.dart';
import 'package:smartshop_mobile/core/api/graphql_client.dart';
import 'package:smartshop_mobile/core/theme/theme.dart';
import 'package:smartshop_mobile/router.dart';
import 'package:smartshop_mobile/core/providers/theme_provider.dart';
import 'package:smartshop_mobile/features/auth/application/auth_provider.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await initHiveForFlutter();
  
  runApp(
    const ProviderScope(
      child: MyApp(),
    ),
  );
}

class MyApp extends ConsumerWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final router = ref.watch(routerProvider);
    final client = ref.watch(graphqlClientProvider);
    final themeMode = ref.watch(themeProvider);


    return GraphQLProvider(
      client: ValueNotifier(client),
      child: MaterialApp.router(
        title: 'SmartShop',
        theme: AppTheme.lightTheme,       // Giao diện sáng
        darkTheme: AppTheme.darkTheme,     // Giao diện tối
        themeMode: themeMode,              // Chế độ hiện tại
        debugShowCheckedModeBanner: false,
        routerConfig: router,
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\router.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/features/auth/application/auth_provider.dart';
import 'package:smartshop_mobile/features/auth/presentation/screens/forgot_password_screen.dart';
import 'package:smartshop_mobile/features/auth/presentation/screens/login_screen.dart';
import 'package:smartshop_mobile/features/auth/presentation/screens/register_screen.dart';
import 'package:smartshop_mobile/features/cart/presentation/screens/cart_screen.dart';
import 'package:smartshop_mobile/features/cart/presentation/screens/checkout_screen.dart';
import 'package:smartshop_mobile/features/cart/presentation/screens/order_success_screen.dart';
import 'package:smartshop_mobile/features/products/application/product_providers.dart';
import 'package:smartshop_mobile/features/products/presentation/screens/explore_screen.dart';
import 'package:smartshop_mobile/features/products/presentation/screens/home_screen.dart';
import 'package:smartshop_mobile/features/products/presentation/screens/main_screen.dart';
import 'package:smartshop_mobile/features/products/presentation/screens/product_detail_screen.dart';
import 'package:smartshop_mobile/features/products/presentation/screens/products_screen.dart';
import 'package:smartshop_mobile/features/products/presentation/screens/search_screen.dart';
import 'package:smartshop_mobile/features/profile/presentation/screens/order_detail_screen.dart';
import 'package:smartshop_mobile/features/profile/presentation/screens/orders_screen.dart';
import 'package:smartshop_mobile/features/profile/presentation/screens/profile_screen.dart';
import 'package:smartshop_mobile/features/products/presentation/screens/filter_screen.dart';
import 'package:smartshop_mobile/features/profile/presentation/screens/edit_profile_screen.dart';
import 'package:smartshop_mobile/features/profile/presentation/screens/address_screen.dart';
import 'package:smartshop_mobile/features/profile/presentation/screens/notifications_screen.dart';
import 'package:smartshop_mobile/features/profile/presentation/screens/settings_screen.dart';
import 'package:smartshop_mobile/features/admin/presentation/screens/admin_dashboard_screen.dart';
import 'package:smartshop_mobile/features/admin/presentation/screens/admin_main_screen.dart';
import 'package:smartshop_mobile/features/admin/presentation/screens/admin_orders_screen.dart';
import 'package:smartshop_mobile/features/admin/presentation/screens/admin_products_screen.dart';
import 'package:smartshop_mobile/features/admin/presentation/screens/admin_order_detail_screen.dart';
import 'package:smartshop_mobile/features/admin/presentation/screens/admin_create_product_screen.dart';
import 'package:smartshop_mobile/features/admin/presentation/screens/admin_edit_product_screen.dart';
import 'package:smartshop_mobile/features/products/presentation/screens/write_review_screen.dart';
import 'package:smartshop_mobile/features/profile/presentation/screens/wishlist_screen.dart';
import 'package:smartshop_mobile/features/profile/presentation/screens/add_edit_address_screen.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/admin/presentation/screens/admin_product_detail_screen.dart';
import 'dart:async';

class GoRouterRefreshStream extends ChangeNotifier {
  GoRouterRefreshStream(Stream<dynamic> stream) {
    notifyListeners();
    _subscription = stream.asBroadcastStream().listen((_) => notifyListeners());
  }
  late final StreamSubscription<dynamic> _subscription;

  @override
  void dispose() {
    _subscription.cancel();
    super.dispose();
  }
}

final routerProvider = Provider<GoRouter>((ref) {
  final authNotifier = ref.watch(authProvider.notifier);

  return GoRouter(
    initialLocation: '/login',
    refreshListenable: GoRouterRefreshStream(authNotifier.stream),
    routes: [
      // ShellRoute sẽ "bọc" các màn hình có BottomNavBar
      ShellRoute(
        builder: (context, state, child) {
          return MainScreen(child: child);
        },
        routes: [
          GoRoute(path: '/', builder: (context, state) => const HomeScreen()),
          GoRoute(path: '/explore', builder: (context, state) => const ExploreScreen()),
          GoRoute(path: '/my-orders', builder: (context, state) => const OrdersScreen()),
          GoRoute(path: '/profile', builder: (context, state) => const ProfileScreen()),
        ],
      ),

      ShellRoute(
        builder: (context, state, child) {
          // AdminMainScreen sẽ chứa sidebar/bottom bar của admin
          return AdminMainScreen(child: child);
        },
        routes: [
          GoRoute(path: '/admin', builder: (context, state) => const AdminDashboardScreen()),
          GoRoute(path: '/admin/orders', builder: (context, state) => const AdminOrdersScreen()),
          GoRoute(path: '/admin/products', builder: (context, state) => const AdminProductsScreen()),
          GoRoute(
            path: '/admin/orders/:orderNumber',
            builder: (context, state) {
              final orderNumber = state.pathParameters['orderNumber']!;
              return AdminOrderDetailScreen(orderNumber: orderNumber);
            },
          ),
          GoRoute(
            path: '/admin/products/create',
            builder: (context, state) => const AdminCreateProductScreen(),
          ),
          GoRoute(
            path: '/admin/products/detail/:productId',
            builder: (context, state) {
              final productId = state.pathParameters['productId']!;
              return AdminProductDetailScreen(productId: productId);
            },
          ),
          GoRoute(
            path: '/admin/products/edit/:productId',
            builder: (context, state) {
              final productId = state.pathParameters['productId']!;
              return AdminEditProductScreen(productId: productId);
            },
          ),
        ]
      ),


      
      // Các route không có BottomNavBar sẽ nằm ngoài ShellRoute
      GoRoute(
        path: '/product/:id',
        builder: (context, state) {
          final productId = state.pathParameters['id']!;
          return ProductDetailScreen(productId: productId);
        },
      ),
      GoRoute(
        path: '/products',
        builder: (context, state) {
          // Lấy tất cả các tham số từ URL
          final isFeatured = state.uri.queryParameters['featured'] == 'true';
          // final categoryId = state.uri.queryParameters['categoryId'];
          // final brandId = state.uri.queryParameters['brandId'];
          
          return ProductsScreen(
            isFeaturedOnly: isFeatured,
            // categoryId: categoryId,
            // brandId: brandId,
          );
        },
      ),

      GoRoute(
        path: '/filter',
        pageBuilder: (context, state) {
          // --- SỬA LẠI CÁCH NHẬN `extra` ---
          final initialFilter = state.extra as ProductListFilter? ?? const ProductListFilter();
          return MaterialPage(
            child: FilterScreen(initialFilter: initialFilter),
            fullscreenDialog: true,
          );
        },
      ),

      GoRoute(path: '/search', builder: (context, state) => const SearchScreen()),
      GoRoute(path: '/login', builder: (context, state) => const LoginScreen()),
      GoRoute(path: '/register', builder: (context, state) => const RegisterScreen()),
      GoRoute(path: '/forgot-password', builder: (context, state) => const ForgotPasswordScreen()),
      GoRoute(path: '/cart', builder: (context, state) => const CartScreen()),
      GoRoute(path: '/checkout', builder: (context, state) => const CheckoutScreen()),
      GoRoute(
        path: '/order-success/:orderNumber',
        builder: (context, state) {
          final orderNumber = state.pathParameters['orderNumber']!;
          return OrderSuccessScreen(orderNumber: orderNumber);
        },
      ),
      GoRoute(
        path: '/orders/:orderNumber',
        builder: (context, state) {
          final orderNumber = state.pathParameters['orderNumber']!;
          return OrderDetailScreen(orderNumber: orderNumber);
        },
      ),
      GoRoute(
        path: '/edit-profile',
        builder: (context, state) => const EditProfileScreen(),
      ),
      GoRoute(
        path: '/addresses',
        builder: (context, state) => const AddressScreen(),
      ),
      GoRoute(
        path: '/notifications',
        builder: (context, state) => const NotificationsScreen(),
      ),
      GoRoute(
        path: '/settings',
        builder: (context, state) => const SettingsScreen(),
      ),
      GoRoute(
        path: '/product/:id/review',
        builder: (context, state) {
          final productId = state.pathParameters['id']!;
          return WriteReviewScreen(productId: productId);
        },
      ),
      GoRoute(path: '/wishlist', builder: (context, state) => const WishlistScreen()),

      GoRoute(
        path: '/addresses',
        builder: (context, state) => const AddressScreen(),
      ),
      // ===== THÊM ROUTE MỚI VÀO ĐÂY =====
      GoRoute(
        path: '/add-edit-address',
        builder: (context, state) {
          final address = state.extra as Address?; // Nhận địa chỉ (nếu có)
          return AddEditAddressScreen(address: address);
        },
      ),

    ],
    redirect: (context, state) {
      final authState = ref.read(authProvider);
      final isLoggedIn = authState is Authenticated;
      final userRole = isLoggedIn ? authState.user.role : null;
      
      final loggingIn = state.matchedLocation == '/login' || 
                        state.matchedLocation == '/register' || 
                        state.matchedLocation == '/forgot-password';
      final isAdminRoute = state.matchedLocation.startsWith('/admin');

      // Nếu chưa đăng nhập và cố vào trang admin -> về login
      if (!isLoggedIn && isAdminRoute) return '/login';
      
      // Nếu đã đăng nhập nhưng không phải admin/manager và cố vào trang admin
      if (isLoggedIn && userRole == 'customer' && isAdminRoute) return '/';

      if (!isLoggedIn && !loggingIn) return '/login';
      if (isLoggedIn && loggingIn) return '/';
      
      return null;

    },
  );
});

================================================================================
// FILE PATH: lib\core\api\graphql_client.dart
================================================================================

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:graphql_flutter/graphql_flutter.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:smartshop_mobile/core/constants/api_constants.dart';

// Riverpod provider để cung cấp GraphQLClient cho toàn ứng dụng.
final graphqlClientProvider = Provider<GraphQLClient>((ref) {
  return GraphQLConfig.initializeClient();
});

class GraphQLConfig {
  // Dùng để lưu trữ token và thông tin user an toàn
  static const FlutterSecureStorage _secureStorage = FlutterSecureStorage();

  // Tạo một link HTTP đến địa chỉ GraphQL server
  static final HttpLink httpLink = HttpLink(
    ApiConstants.graphqlUrl,
  );

  /// Hàm private này sẽ được gọi trước mỗi request để lấy token
  static Future<String?> _getToken() async {
    try {
      return await _secureStorage.read(key: 'smartshop_token');
    } catch (e) {
      debugPrint("Không thể đọc token: $e");
      return null;
    }
  }

  /// Middleware sẽ đính kèm token vào header của mỗi request
  static final AuthLink authLink = AuthLink(
    getToken: () async {
      final token = await _getToken();
      return token != null ? 'Bearer $token' : null;
    },
  );

  /// Nối chuỗi các link lại với nhau.
  static final Link link = authLink.concat(httpLink);

  /// Hàm chính để khởi tạo client
  static GraphQLClient initializeClient() {
    ValueNotifier<GraphQLClient> client = ValueNotifier(
      GraphQLClient(
        link: link,
        cache: GraphQLCache(store: HiveStore()),
      ),
    );
    return client.value;
  }

  // Hàm tiện ích để lưu token và user sau khi đăng nhập thành công
  static Future<void> setToken(String token, dynamic user) async {
    await _secureStorage.write(key: 'smartshop_token', value: token);
    await _secureStorage.write(key: 'smartshop_user', value: jsonEncode(user));
  }
  
  // Hàm mới chỉ để cập nhật thông tin user trong storage (để không ghi đè token khi update profile)
  static Future<void> updateStoredUser(dynamic user) async {
    await _secureStorage.write(key: 'smartshop_user', value: jsonEncode(user)); //
  }

  // Hàm tiện ích để lấy thông tin user đã lưu
  static Future<Map<String, dynamic>?> getStoredUser() async {
    try {
      final userJson = await _secureStorage.read(key: 'smartshop_user');
      if (userJson != null) {
        return jsonDecode(userJson);
      }
      return null;
    } catch (e) {
      debugPrint("Không thể đọc thông tin user đã lưu: $e");
      return null;
    }
  }

  // Hàm tiện ích để xóa token và user khi logout
  static Future<void> clearToken() async {
    await _secureStorage.deleteAll();
  }
}

================================================================================
// FILE PATH: lib\core\constants\api_constants.dart
================================================================================

class ApiConstants {
  // QUAN TRỌNG:
  // - Nếu chạy trên MÁY ẢO ANDROID, dùng: "http://10.0.2.2:4000/"  static const String graphqlUrl = "http://10.0.2.2:4000/"; 
  // - Nếu chạy trên MÁY ẢO IOS, dùng: "http://localhost:4000/" 
  //   (Mở cmd/terminal, gõ `ipconfig` (Windows) hoặc `ifconfig` (macOS/Linux))
  // ip wifi trường UMT: 10.12.1.130
  // ip wifi nhà: 192.168.1.3

  static const String ipAddress = "192.168.1.24"; // <<-- THAY IP CỦA BẠN VÀO ĐÂY 
  static const String baseUrl = "http://$ipAddress:4000";
  static const String graphqlUrl = "$baseUrl/"; 
}



================================================================================
// FILE PATH: lib\core\mock_data\mock_data.dart
================================================================================

import 'models.dart';

// ----- MOCK DATA -----

final mockUser = User(
  id: 'customer1',
  username: 'manhduc',
  email: 'customer1@gmail.com',
  firstName: 'Manh Duc',
  lastName: 'Tran',
  role: 'customer',
  avatarUrl: 'https://res.cloudinary.com/drwdwymud/image/upload/v1752117816/duc_iezqfz.jpg',
);
    
final mockAdmin = User(
  id: 'admin1',
  username: 'admin',
  email: 'admin@smartshop.com',
  firstName: 'Admin',
  lastName: 'User',
  role: 'admin',
  avatarUrl: 'https://i.pravatar.cc/150?u=admin1',
);

// --- Categories ---
final mockCategories = [
  Category(id: 'cat1', name: 'Smart Phones', imageUrl: 'https://cdn-icons-png.flaticon.com/128/244/244210.png'),
  Category(id: 'cat2', name: 'Laptop', imageUrl: 'https://cdn-icons-png.flaticon.com/512/428/428001.png'),
  Category(id: 'cat3', name: 'headphone', imageUrl: 'https://cdn-icons-png.flaticon.com/128/8407/8407995.png'),
  Category(id: 'cat4', name: 'tablet', imageUrl: 'https://cdn-icons-png.flaticon.com/128/64/64828.png'),
  Category(id: 'cat5', name: 'Smart Watch', imageUrl: 'https://cdn-icons-png.flaticon.com/128/7361/7361546.png'),
];

// --- Brands ---
final mockBrands = [
  Brand(id: 'brand1', name: 'Apple', logoUrl: 'https://cdn-icons-png.flaticon.com/512/0/747.png'),
  Brand(id: 'brand2', name: 'Samsung', logoUrl: 'https://cdn-icons-png.flaticon.com/512/5969/5969249.png'),
  Brand(id: 'brand3', name: 'Xiaomi', logoUrl: 'https://cdn-icons-png.flaticon.com/512/882/882721.png'),
  Brand(id: 'brand4', name: 'Sony', logoUrl: 'https://cdn-icons-png.flaticon.com/512/882/882718.png'),
  Brand(id: 'brand5', name: 'Dell', logoUrl: 'https://cdn-icons-png.flaticon.com/512/882/882743.png'),
];

final mockReviews = [
  Review(
    id: 'review1',
    user: mockUser,
    rating: 5,
    comment: 'Sản phẩm tuyệt vời! Màn hình rất đẹp và hiệu năng mượt mà. Giao hàng nhanh chóng.',
    createdAt: DateTime.now().subtract(const Duration(days: 2)),
  ),
  Review(
    id: 'review2',
    user: User(id: 'user2', username: 'thanh', email: 'thanh@email.com', firstName: 'Minh', lastName: 'Thanh', role: 'customer', avatarUrl: 'https://i.pravatar.cc/150?u=user2'),
    rating: 4,
    comment: 'Thiết kế sang trọng, pin dùng ổn. Camera chụp ảnh rất nét. Sẽ tiếp tục ủng hộ shop.',
    createdAt: DateTime.now().subtract(const Duration(days: 5)),
  ),
];


================================================================================
// FILE PATH: lib\core\mock_data\models.dart
================================================================================

import 'package:smartshop_mobile/core/constants/api_constants.dart';

class Address {
  final String id, fullName, phone, address, city;
  final bool isDefault;

  Address({
    required this.id, required this.fullName, required this.phone,
    required this.address, required this.city, required this.isDefault,
  });

  factory Address.fromJson(Map<String, dynamic> json) {
    return Address(
      id: json['_id'],
      fullName: json['fullName'],
      phone: json['phone'],
      address: json['address'],
      city: json['city'],
      isDefault: json['isDefault'] ?? false,
    );
  }
}


class User {
  final String id, username, email, firstName, lastName, role, avatarUrl;
  final List<Address> addresses;

  User({
    required this.id, required this.username, required this.email,
    required this.firstName, required this.lastName, required this.role,
    required this.avatarUrl,
    this.addresses = const [],
  });

  factory User.fromJson(Map<String, dynamic> json) {
    String? rawAvatarUrl = json['avatarUrl'];
    String finalAvatarUrl;

    // Kiểm tra xem avatarUrl có phải là đường dẫn tương đối không
    if (rawAvatarUrl != null && rawAvatarUrl.startsWith('/')) {
      // Nếu đúng, thêm baseUrl vào trước
      finalAvatarUrl = "${ApiConstants.baseUrl}$rawAvatarUrl"; //
    } else {
      // Nếu đã là URL đầy đủ, hoặc là null, thì giữ nguyên
      // Nếu null thì dùng ảnh mặc định
      finalAvatarUrl = rawAvatarUrl ?? 'https://i.pravatar.cc/150';
    }

    // THÊM LOGIC XỬ LÝ ADDRESSES
    final List<dynamic> addressList = json['addresses'] ?? [];
    final List<Address> addresses = addressList.map((a) => Address.fromJson(a)).toList();


    return User(
      id: json['_id'] ?? 'N/A',
      username: json['username'] ?? 'user',
      email: json['email'] ?? 'N/A',
      firstName: json['firstName'] ?? 'Người dùng',
      lastName: json['lastName'] ?? '',
      role: json['role'] ?? 'customer',
      avatarUrl: finalAvatarUrl, // <-- Sử dụng biến đã được xử lý
      addresses: addresses,
    );
  }
}

class Category {
  final String id, name;
  final String? imageUrl;

  Category({required this.id, required this.name, this.imageUrl});
  
  factory Category.fromJson(Map<String, dynamic> json) {
    return Category(
      id: json['_id'] ?? 'N/A',
      name: json['name'] ?? 'Chưa phân loại',
      imageUrl: json['image'], 
    );
  }
}

class Brand {
  final String id, name;
  final String? logoUrl;
  
  Brand({required this.id, required this.name, this.logoUrl});

  factory Brand.fromJson(Map<String, dynamic> json) {
    return Brand(
      id: json['_id'] ?? 'N/A',
      name: json['name'] ?? 'Không có thương hiệu',
      logoUrl: json['logo'], 
    );
  }
}

class Product {
  final String id, name, description;
  final double price;
  final double? originalPrice;
  final List<String> images;
  final int stock;
  final bool isFeatured, isActive;
  final Category? category;
  final Brand? brand;
  final double averageRating;
  final int totalReviews;

  Product({
    required this.id, required this.name, required this.description,
    required this.price, this.originalPrice, required this.images,
    required this.stock, this.isFeatured = false, this.isActive = true,
    this.category, this.brand, this.averageRating = 4.5, this.totalReviews = 99,
  });

  factory Product.fromJson(Map<String, dynamic> json) {
    final List<dynamic> imageList = json['images'] ?? [];
    final List<String> images = imageList.map((e) => e.toString()).toList();

    return Product(
      id: json['_id'] ?? 'N/A',
      name: json['name'] ?? 'Sản phẩm không tên',
      description: json['description'] ?? '',
      price: (json['price'] as num? ?? 0).toDouble(),
      originalPrice: (json['originalPrice'] as num?)?.toDouble(),
      images: images,
      stock: (json['stock'] as num? ?? 0).toInt(),
      isFeatured: json['isFeatured'] ?? false,
      isActive: json['isActive'] ?? true,
      category: json['category'] != null ? Category.fromJson(json['category']) : null,
      brand: json['brand'] != null ? Brand.fromJson(json['brand']) : null,
      averageRating: (json['averageRating'] as num? ?? 4.5).toDouble(),
      totalReviews: (json['totalReviews'] as num? ?? 99).toInt(),
    );
  }
}


class CartItem {
  final String id;
  final Product product;
  int quantity;
  final double unitPrice;
  final double totalPrice;

  CartItem({
    required this.id,
    required this.product,
    required this.quantity,
    required this.unitPrice,
    required this.totalPrice,
  });

  // Hàm để tạo CartItem từ dữ liệu JSON của API
  factory CartItem.fromJson(Map<String, dynamic> json) {
    return CartItem(
      id: json['_id'],
      product: Product.fromJson(json['product']),
      quantity: (json['quantity'] as num).toInt(),
      unitPrice: (json['unitPrice'] as num).toDouble(),
      totalPrice: (json['totalPrice'] as num).toDouble(),
    );
  }
}

class Cart {
  final List<CartItem> items;
  final int totalItems;
  final double subtotal;

  Cart({
    required this.items,
    required this.totalItems,
    required this.subtotal,
  });

  // Trạng thái giỏ hàng rỗng
  factory Cart.empty() {
    return Cart(items: [], totalItems: 0, subtotal: 0);
  }

  // Hàm để tạo Cart từ dữ liệu JSON của API
  factory Cart.fromJson(Map<String, dynamic> json) {
    final List<dynamic> itemJsonList = json['items'] ?? [];
    return Cart(
      items: itemJsonList.map((itemJson) => CartItem.fromJson(itemJson)).toList(),
      totalItems: (json['totalItems'] as num? ?? 0).toInt(),
      subtotal: (json['subtotal'] as num? ?? 0).toDouble(),
    );
  }
}

class OrderItem {
  final String id;
  final String productName;
  final String productSku;
  final Product? product;
  final int quantity;
  final double priceAtOrder;

  OrderItem({
    required this.id, required this.productName, required this.productSku,
    this.product, required this.quantity, required this.priceAtOrder,
  });

  factory OrderItem.fromJson(Map<String, dynamic> json) {
    return OrderItem(
      id: json['_id'] ?? 'N/A',
      productName: json['productName'] ?? 'Sản phẩm không tên', // Xử lý null
      productSku: json['productSku'] ?? 'N/A', // Xử lý null
      product: json['product'] != null ? Product.fromJson(json['product']) : null,
      quantity: (json['quantity'] as num? ?? 0).toInt(),
      priceAtOrder: (json['unitPrice'] as num? ?? 0).toDouble(),
    );
  }
}

class Order {
  final String id;
  final String orderNumber;
  final DateTime orderDate;
  final String paymentStatus;
  final String status;
  final List<OrderItem> items;
  final double totalAmount;
  final User? user; 
  final dynamic customerInfo; 


  Order({
    required this.id,
    required this.orderNumber,
    required this.orderDate,
    required this.status,
    required this.paymentStatus, 
    required this.items,
    required this.totalAmount,
    this.user, 
    this.customerInfo, 
  });


  factory Order.fromJson(Map<String, dynamic> json) {
    final List<dynamic> itemJsonList = json['items'] ?? [];
    
    DateTime parsedDate;
    final dynamic dateValue = json['orderDate'];

    if (dateValue is num) {
      parsedDate = DateTime.fromMillisecondsSinceEpoch(dateValue.toInt());
    } else if (dateValue is String) {
      final intTimestamp = int.tryParse(dateValue);
      if (intTimestamp != null) {
        parsedDate = DateTime.fromMillisecondsSinceEpoch(intTimestamp);
      } else {
        try {
          parsedDate = DateTime.parse(dateValue);
        } catch (e) {
          parsedDate = DateTime.now();
        }
      }
    } else {
      parsedDate = DateTime.now();
    }

    return Order(
      id: json['_id'] ?? 'unknown_id',
      orderNumber: json['orderNumber'] ?? 'N/A',
      orderDate: parsedDate,
      status: json['status'] ?? 'pending',
      paymentStatus: json['paymentStatus'] ?? 'pending', 
      items: itemJsonList.map((item) => OrderItem.fromJson(item)).toList(),
      totalAmount: (json['totalAmount'] as num? ?? 0).toDouble(),
      user: json['user'] != null ? User.fromJson(json['user']) : null, 
      customerInfo: json['customerInfo'], 
    );
  }
}



class Review {
  final String id;
  final User user;
  final int rating;
  final String comment;
  final DateTime createdAt;

  Review({
    required this.id,
    required this.user,
    required this.rating,
    required this.comment,
    required this.createdAt,
  });

  factory Review.fromJson(Map<String, dynamic> json) {
    return Review(
      id: json['_id'],
      user: User.fromJson(json['user']), // Bây giờ hàm này đã tồn tại
      rating: (json['rating'] as num).toInt(),
      comment: json['comment'],
      createdAt: DateTime.parse(json['createdAt']),
    );
  }
}

class OrderStats {
  final int totalOrders;
  final int pendingOrders;
  final int deliveredOrders;
  final double totalRevenue;

  OrderStats({
    required this.totalOrders,
    required this.pendingOrders,
    required this.deliveredOrders,
    required this.totalRevenue,
  });

  factory OrderStats.fromJson(Map<String, dynamic> json) {
    return OrderStats(
      totalOrders: (json['totalOrders'] as num? ?? 0).toInt(),
      pendingOrders: (json['pendingOrders'] as num? ?? 0).toInt(),
      deliveredOrders: (json['deliveredOrders'] as num? ?? 0).toInt(),
      totalRevenue: (json['totalRevenue'] as num? ?? 0).toDouble(),
    );
  }
}


================================================================================
// FILE PATH: lib\core\providers\theme_provider.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

// Enum để định nghĩa các chế độ giao diện
enum ThemeModeOption { light, dark, system }

// StateNotifier để quản lý logic thay đổi theme
class ThemeNotifier extends StateNotifier<ThemeMode> {
  ThemeNotifier() : super(ThemeMode.system); // Bắt đầu với theme của hệ thống

  void setThemeMode(ThemeModeOption mode) {
    switch (mode) {
      case ThemeModeOption.light:
        state = ThemeMode.light;
        break;
      case ThemeModeOption.dark:
        state = ThemeMode.dark;
        break;
      case ThemeModeOption.system:
        state = ThemeMode.system;
        break;
    }
  }
}

// Provider để cung cấp ThemeNotifier cho toàn ứng dụng
final themeProvider = StateNotifierProvider<ThemeNotifier, ThemeMode>((ref) {
  return ThemeNotifier();
});

================================================================================
// FILE PATH: lib\core\theme\theme.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

class AppTheme {
  static final ThemeData lightTheme = ThemeData(
    // Bảng màu chính
    primarySwatch: Colors.blue,
    scaffoldBackgroundColor: const Color(0xFFF7F8FC), // Một màu xám rất nhạt

    // Font chữ - Dùng Inter như trên web
    fontFamily: GoogleFonts.inter().fontFamily,

    // Chủ đề cho AppBar
    appBarTheme: AppBarTheme(
      backgroundColor: Colors.white,
      elevation: 0.5,
      iconTheme: const IconThemeData(color: Colors.black87),
      titleTextStyle: GoogleFonts.poppins(
        color: Colors.black87,
        fontSize: 20,
        fontWeight: FontWeight.w600,
      ),
      centerTitle: true,
    ),

    
    // Chủ đề cho các nút
    elevatedButtonTheme: ElevatedButtonThemeData(
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.blue[600], // Màu nút chính
        foregroundColor: Colors.white, // Màu chữ
        padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 24),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
        elevation: 2,
        shadowColor: Colors.blue.withAlpha(51),
        textStyle: const TextStyle(fontWeight: FontWeight.bold),
      ),
    ),
    
    // Chủ đề cho các ô nhập liệu
    inputDecorationTheme: InputDecorationTheme(
      filled: true,
      fillColor: Colors.grey[100],
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide.none,
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: Colors.blue[600]!, width: 2),
      ),
      labelStyle: const TextStyle(color: Colors.grey),
    ),

    // Chủ đề cho Card
    cardTheme: CardThemeData(
      elevation: 0,
      clipBehavior: Clip.antiAlias,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
        side: BorderSide(color: Colors.grey[200]!),
      ),
    ),

    // Chủ đề cho Text
    textTheme: TextTheme(
      displayLarge: GoogleFonts.poppins(fontSize: 57, fontWeight: FontWeight.bold),
      displayMedium: GoogleFonts.poppins(fontSize: 45, fontWeight: FontWeight.bold),
      displaySmall: GoogleFonts.poppins(fontSize: 36, fontWeight: FontWeight.bold),
      headlineLarge: GoogleFonts.poppins(fontSize: 32, fontWeight: FontWeight.w600),
      headlineMedium: GoogleFonts.poppins(fontSize: 28, fontWeight: FontWeight.w600),
      headlineSmall: GoogleFonts.poppins(fontSize: 24, fontWeight: FontWeight.w600),
      titleLarge: GoogleFonts.inter(fontSize: 22, fontWeight: FontWeight.bold),
      titleMedium: GoogleFonts.inter(fontSize: 16, fontWeight: FontWeight.w500),
      titleSmall: GoogleFonts.inter(fontSize: 14, fontWeight: FontWeight.w500),
      bodyLarge: GoogleFonts.inter(fontSize: 16),
      bodyMedium: GoogleFonts.inter(fontSize: 14),
      bodySmall: GoogleFonts.inter(fontSize: 12),
      labelLarge: GoogleFonts.inter(fontSize: 14, fontWeight: FontWeight.bold),
      labelMedium: GoogleFonts.inter(fontSize: 12, fontWeight: FontWeight.bold),
      labelSmall: GoogleFonts.inter(fontSize: 11, fontWeight: FontWeight.bold),
    ),
  );

  static final ThemeData darkTheme = ThemeData(
    brightness: Brightness.dark,
    primarySwatch: Colors.blue,
    scaffoldBackgroundColor: const Color(0xFF121212),
    fontFamily: GoogleFonts.inter().fontFamily,
    
    appBarTheme: AppBarTheme(
      backgroundColor: const Color(0xFF1F1F1F),
      elevation: 0.5,
      titleTextStyle: GoogleFonts.poppins(
        color: Colors.white,
        fontSize: 20,
        fontWeight: FontWeight.w600,
      ),
    ),
  );  

}

================================================================================
// FILE PATH: lib\core\utils\formatter.dart
================================================================================

import 'package:intl/intl.dart';

class AppFormatters {
  static final currency = NumberFormat.currency(locale: 'vi_VN', symbol: '₫');
  
  static String formatDate(DateTime? date) {
    if (date == null) return 'N/A';
    return DateFormat('dd/MM/yyyy HH:mm').format(date);
  }
}

================================================================================
// FILE PATH: lib\core\utils\icon_mapper.dart
================================================================================

import 'package:flutter/material.dart';

class IconMapper {
  // --- BỘ ÁNH XẠ CHO DANH MỤC ---
  // Key là tên danh mục (viết thường, không dấu)
  static final Map<String, IconData> _categoryIcons = {
    'smart phones': Icons.phone_android,
    'laptops': Icons.laptop_mac,
    'smart home': Icons.home,
    'wearables': Icons.watch,
    'audio': Icons.headset,
  };

  // --- BỘ ÁNH XẠ CHO THƯƠNG HIỆU ---
  // Key là tên thương hiệu (viết thường)
  static final Map<String, IconData> _brandIcons = {
    'apple': Icons.apple,
    'samsung': Icons.phone_android, // Có thể dùng icon chung
    'xiaomi': Icons.phone_android,
    'sony': Icons.camera_alt,
    'dell': Icons.laptop_windows,
  };

  // Hàm để lấy icon cho danh mục
  static IconData getCategoryIcon(String categoryName) {
    // Chuẩn hóa tên: viết thường, không dấu, bỏ ký tự đặc biệt
    final normalizedName = categoryName.toLowerCase()
      .replaceAll('đ', 'd')
      .replaceAll(RegExp(r'[^a-z0-9\s]'), '');
    
    // Tìm key tương ứng
    for (var key in _categoryIcons.keys) {
      if (normalizedName.contains(key)) {
        return _categoryIcons[key]!;
      }
    }
    
    // Icon mặc định nếu không tìm thấy
    return Icons.category;
  }

  // Hàm để lấy icon cho thương hiệu
  static IconData getBrandIcon(String brandName) {
    final normalizedName = brandName.toLowerCase();

    for (var key in _brandIcons.keys) {
      if (normalizedName.contains(key)) {
        return _brandIcons[key]!;
      }
    }

    return Icons.store; // Icon mặc định
  }
}

================================================================================
// FILE PATH: lib\features\admin\application\admin_providers.dart
================================================================================

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/admin/data/admin_repository.dart';

final orderStatsProvider = FutureProvider.autoDispose<OrderStats>((ref) {
  return ref.watch(adminRepositoryProvider).getOrderStats();
});

final allOrdersProvider = FutureProvider.autoDispose<List<Order>>((ref) {
  // Tạm thời chưa có phân trang và lọc
  return ref.watch(adminRepositoryProvider).getAllOrders();
});

final adminOrderDetailProvider = FutureProvider.autoDispose.family<Order, String>((ref, orderNumber) {
  return ref.watch(adminRepositoryProvider).getOrder(orderNumber);
});

final adminProductsProvider = FutureProvider.autoDispose<List<Product>>((ref) {
  return ref.watch(adminRepositoryProvider).getProducts();
});



================================================================================
// FILE PATH: lib\features\admin\data\admin_graphql.dart
================================================================================

import 'package:smartshop_mobile/features/profile/data/order_graphql.dart'; 
import 'package:smartshop_mobile/features/products/data/product_graphql.dart'; 

class AdminGraphQL {
  // Query để lấy các số liệu thống kê đơn hàng
  static const String getOrderStats = r'''
    query GetOrderStats {
      getOrderStats {
        totalOrders
        pendingOrders
        confirmedOrders
        shippingOrders
        deliveredOrders
        cancelledOrders
        totalRevenue
        todayOrders
      }
    }
  ''';

  static const String getAllOrders = r'''
    query GetAllOrders($first: Int, $offset: Int, $orderBy: OrdersOrderBy, $condition: OrderConditionInput, $search: String) {
      getAllOrders(first: $first, offset: $offset, orderBy: $orderBy, condition: $condition, search: $search) {
        nodes {
          _id
          orderNumber
          orderDate
          status
          paymentStatus
          totalAmount
          customerInfo {
            fullName
          }
          user {
            email
          }
          items {
            _id
          }
        }
        totalCount
      }
    }
  ''';

  static const String getOrder = '''
    query GetOrder(\$orderNumber: String!) {
      getOrder(orderNumber: \$orderNumber) {
        ...OrderDetails
        user {
          _id
          firstName
          lastName
          email
        }
      }
    }
    ${OrderGraphQL.orderFragment}
  ''';

  static const String updateOrderStatus = r'''
    mutation UpdateOrderStatus($orderNumber: String!, $status: OrderStatus!, $adminNotes: String) {
      updateOrderStatus(orderNumber: $orderNumber, status: $status, adminNotes: $adminNotes) {
        _id
        status
      }
    }
  ''';
  
  static const String updatePaymentStatus = r'''
    mutation UpdatePaymentStatus($orderNumber: String!, $paymentStatus: PaymentStatus!) {
      updatePaymentStatus(orderNumber: $orderNumber, paymentStatus: $paymentStatus) {
        _id
        paymentStatus
      }
    }
  ''';

  // Sử dụng lại productFragment từ file của products
  static const String getAdminProducts = '''
    query GetProducts(\$first: Int, \$offset: Int, \$orderBy: ProductsOrderBy, \$condition: ProductConditionInput) {
      products(first: \$first, offset: \$offset, orderBy: \$orderBy, condition: \$condition) {
        nodes {
          ...ProductData
        }
        totalCount
      }
    }
    ${ProductGraphQL.productFragment}
  ''';

  static const String createProduct = '''
    mutation CreateProduct(\$input: ProductInput!) {
      createProduct(input: \$input) {
        ...ProductData
      }
    }
    ${ProductGraphQL.productFragment}
  ''';
  
  static const String updateProduct = '''
    mutation UpdateProduct(\$id: ID!, \$input: ProductInput!) {
      updateProduct(id: \$id, input: \$input) {
        ...ProductData
      }
    }
    ${ProductGraphQL.productFragment}
  ''';

  static const String deleteProduct = r'''
    mutation DeleteProduct($id: ID!) {
      deleteProduct(id: $id)
    }
  ''';

}

================================================================================
// FILE PATH: lib\features\admin\data\admin_repository.dart
================================================================================

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:graphql_flutter/graphql_flutter.dart';
import 'package:smartshop_mobile/core/api/graphql_client.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/admin/data/admin_graphql.dart';
import 'package:smartshop_mobile/features/products/data/product_graphql.dart';
import 'dart:io';
import 'package:http/http.dart' show MultipartFile;
import 'package:http_parser/http_parser.dart';
import 'package:http/http.dart' as http;

final adminRepositoryProvider = Provider((ref) => AdminRepository(client: ref.watch(graphqlClientProvider)));

class AdminRepository {
  final GraphQLClient client;
  AdminRepository({required this.client});

  Future<void> bulkUpdateProducts({required List<String> ids, double? price, int? stock}) async {
    final String mutation = r'''
      mutation BulkUpdate($input: BulkUpdateInput!) {
        bulkUpdateProducts(input: $input)
      }
    ''';
    final Map<String, dynamic> input = {'ids': ids};
    if (price != null) input['price'] = price;
    if (stock != null) input['stock'] = stock;

    final options = MutationOptions(document: gql(mutation), variables: {'input': input});
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());
  }

  Future<Map<String, dynamic>> importProducts(File file) async {
    final multipartFile = await http.MultipartFile.fromPath(
      'file',
      file.path,
      filename: file.path.split('/').last,
      contentType: MediaType('text', 'csv'),
    );
    final options = MutationOptions(
      document: gql(r'''
        mutation ImportProducts($file: Upload!) {
          importProducts(file: $file) {
            success message created updated errors
          }
        }
      '''),
      variables: {'file': multipartFile},
    );
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());
    return result.data?['importProducts'] as Map<String, dynamic>;
  }

  Future<List<Product>> getAllProductsSimple() async {
    final options = QueryOptions(
      // XÓA CHỮ 'r' Ở ĐẦU DÒNG DƯỚI
      document: gql(''' 
        query AllProductsSimple {
          allProducts { ...ProductData }
        }
        ${ProductGraphQL.productFragment}
      '''),
      fetchPolicy: FetchPolicy.networkOnly,
    );
    final result = await client.query(options);
    if (result.hasException) throw Exception(result.exception.toString());
    final List<dynamic> list = result.data?['allProducts'] ?? [];
    return list.map((json) => Product.fromJson(json)).toList();
  }

  Future<void> deleteManyProducts(List<String> ids) async {
    // Cần định nghĩa mutation string này trong admin_graphql.dart
    final String deleteManyMutation = r'''
      mutation DeleteManyProducts($ids: [ID!]!) {
        deleteManyProducts(ids: $ids)
      }
    ''';
    final options = MutationOptions(
      document: gql(deleteManyMutation),
      variables: {'ids': ids},
    );
    final result = await client.mutate(options);
    if (result.hasException) {
      throw Exception(result.exception.toString());
    }
  }

  Future<OrderStats> getOrderStats() async {
    final options = QueryOptions(
      document: gql(AdminGraphQL.getOrderStats),
      fetchPolicy: FetchPolicy.networkOnly,
    );
    final result = await client.query(options);
    if (result.hasException) {
      throw Exception(result.exception.toString());
    }

    final statsJson = result.data?['getOrderStats'];
    if (statsJson == null) {
      throw Exception('Không thể lấy dữ liệu thống kê');
    }

    return OrderStats.fromJson(statsJson);
  }

  Future<List<Order>> getAllOrders({int limit = 10, int offset = 0, String? search}) async {
    final options = QueryOptions(
      document: gql(AdminGraphQL.getAllOrders),
      variables: {
        'first': limit,
        'offset': offset,
        'search': search,
      },
      fetchPolicy: FetchPolicy.networkOnly,
    );
    final result = await client.query(options);
    if (result.hasException) throw Exception(result.exception.toString());
    
    final List<dynamic> list = result.data?['getAllOrders']?['nodes'] ?? [];
    return list.map((json) => Order.fromJson(json)).toList();
  }

  Future<Order> getOrder(String orderNumber) async {
    final options = QueryOptions(
      document: gql(AdminGraphQL.getOrder),
      variables: {'orderNumber': orderNumber},
      fetchPolicy: FetchPolicy.networkOnly,
    );
    final result = await client.query(options);
    if (result.hasException) throw Exception(result.exception.toString());
    
    final orderJson = result.data?['getOrder'];
    if (orderJson == null) throw Exception('Không tìm thấy đơn hàng');
    
    return Order.fromJson(orderJson);
  }

  Future<void> updateOrderStatus({required String orderNumber, required String status}) async {
    final options = MutationOptions(
      document: gql(AdminGraphQL.updateOrderStatus),
      variables: {'orderNumber': orderNumber, 'status': status},
    );
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());
  }


  Future<void> updatePaymentStatus({required String orderNumber, required String paymentStatus}) async {
    final options = MutationOptions(
      document: gql(AdminGraphQL.updatePaymentStatus),
      variables: {'orderNumber': orderNumber, 'paymentStatus': paymentStatus},
    );
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());
  }

  Future<List<Product>> getProducts() async {
    final options = QueryOptions(
      document: gql(AdminGraphQL.getAdminProducts),
      // Tạm thời chưa có phân trang/lọc để đơn giản hóa
      variables: {'first': 50, 'offset': 0},
      fetchPolicy: FetchPolicy.networkOnly,
    );
    final result = await client.query(options);
    if (result.hasException) throw Exception(result.exception.toString());
    
    final List<dynamic> list = result.data?['products']?['nodes'] ?? [];
    return list.map((json) => Product.fromJson(json)).toList();
  }

  Future<Product> createProduct(Map<String, dynamic> productData) async {
    final options = MutationOptions(
      document: gql(AdminGraphQL.createProduct),
      variables: {'input': productData},
    );
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());
    
    return Product.fromJson(result.data!['createProduct']);
  }
  
  Future<Product> updateProduct(String id, Map<String, dynamic> productData) async {
    final options = MutationOptions(
      document: gql(AdminGraphQL.updateProduct),
      variables: {'id': id, 'input': productData},
    );
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());

    return Product.fromJson(result.data!['updateProduct']);
  }

  Future<void> deleteProduct(String id) async {
    final options = MutationOptions(
      document: gql(AdminGraphQL.deleteProduct),
      variables: {'id': id},
    );
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());
  }

}

================================================================================
// FILE PATH: lib\features\admin\data\upload_graphql.dart
================================================================================

class UploadGraphQL {
  static const String uploadProductImages = r'''
    mutation UploadProductImages($productId: ID!, $files: [Upload!]!) {
      uploadProductImages(productId: $productId, files: $files) {
        success
        message
        # Không cần lấy urls vì backend không trả về
      }
    }
  ''';
}

================================================================================
// FILE PATH: lib\features\admin\data\upload_repository.dart
================================================================================

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:graphql_flutter/graphql_flutter.dart';
import 'package:http/http.dart' show MultipartFile;
import 'package:http_parser/http_parser.dart';
import 'package:image_picker/image_picker.dart';
import 'package:smartshop_mobile/core/api/graphql_client.dart';
import 'package:smartshop_mobile/features/admin/data/upload_graphql.dart';

final uploadRepositoryProvider = Provider((ref) => UploadRepository(client: ref.watch(graphqlClientProvider)));

class UploadRepository {
  final GraphQLClient client;
  UploadRepository({required this.client});

  Future<void> uploadProductImages(String productId, List<XFile> files) async {
    if (files.isEmpty) return;

    List<MultipartFile> multipartFiles = [];
    for (var file in files) {
      multipartFiles.add(await MultipartFile.fromPath(
        'files', // Tên field này không quan trọng, miễn là có
        file.path,
        filename: file.name,
      ));
    }

    final options = MutationOptions(
      document: gql(UploadGraphQL.uploadProductImages),
      variables: {
        'productId': productId,
        'files': multipartFiles,
      },
    );

    final result = await client.mutate(options);

    if (result.hasException) {
      throw Exception(result.exception.toString());
    }

    final response = result.data?['uploadProductImages'];
    if (response == null || !response['success']) {
      throw Exception(response['message'] ?? 'Upload ảnh thất bại');
    }
    // Không cần return gì cả
  }
}

================================================================================
// FILE PATH: lib\features\admin\presentation\screens\admin_create_product_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/features/admin/application/admin_providers.dart';
import 'package:smartshop_mobile/features/admin/data/admin_repository.dart';
import 'package:smartshop_mobile/features/admin/presentation/widgets/product_form.dart';
import 'package:image_picker/image_picker.dart';
import 'package:smartshop_mobile/features/admin/data/upload_repository.dart'; 

class AdminCreateProductScreen extends ConsumerWidget {
  const AdminCreateProductScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      appBar: AppBar(title: const Text('Tạo sản phẩm mới')),
      body: ProductForm(
        onSave: (data, imageFiles) async {
    final messenger = ScaffoldMessenger.of(context);
    try {
      final newProduct = await ref.read(adminRepositoryProvider).createProduct(data);
      
      if (imageFiles.isNotEmpty) {
        // Chỉ cần gọi upload và không cần đợi kết quả
        await ref.read(uploadRepositoryProvider).uploadProductImages(newProduct.id, imageFiles);
      }
      
      ref.refresh(adminProductsProvider); // Làm mới danh sách sản phẩm
      context.pop();
      messenger.showSnackBar(const SnackBar(content: Text('Tạo sản phẩm thành công!'), backgroundColor: Colors.green));

        } catch (e) {
          messenger.showSnackBar(SnackBar(content: Text('Lỗi: $e'), backgroundColor: Colors.red));
        }
      },

      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\admin\presentation\screens\admin_dashboard_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:smartshop_mobile/core/utils/formatter.dart';
import 'package:smartshop_mobile/features/admin/application/admin_providers.dart';

class AdminDashboardScreen extends ConsumerWidget {
  const AdminDashboardScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final statsAsync = ref.watch(orderStatsProvider);

    return Scaffold(
      body: RefreshIndicator(
        onRefresh: () => ref.refresh(orderStatsProvider.future),
        child: ListView(
          padding: const EdgeInsets.all(16.0),
          children: [
            // Welcome Section
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(15),
                gradient: LinearGradient(
                  colors: [Theme.of(context).primaryColor, Colors.blue.shade800],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
              child: const Text(
                'Chào mừng đến với Bảng điều khiển!',
                style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold, color: Colors.white),
              ),
            ),
            const SizedBox(height: 20),

            // Stats Cards
            statsAsync.when(
              data: (stats) => GridView(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 2,
                  crossAxisSpacing: 16,
                  mainAxisSpacing: 16,
                  childAspectRatio: 1.2, // Tăng chiều cao của card
                ),
                children: [
                  _buildStatCard(context, 'Tổng Đơn', stats.totalOrders.toString(), Icons.shopping_bag_outlined),
                  _buildStatCard(context, 'Đơn Chờ', stats.pendingOrders.toString(), Icons.pending_actions_outlined, color: Colors.orange),
                  _buildStatCard(context, 'Hoàn thành', stats.deliveredOrders.toString(), Icons.check_circle_outline, color: Colors.green),
                  _buildStatCard(context, 'Doanh thu', AppFormatters.currency.format(stats.totalRevenue), Icons.attach_money, color: Colors.teal),
                ],
              ),
              loading: () => const Center(child: CircularProgressIndicator()),
              error: (err, stack) => Center(child: Text('Lỗi: $err')),
            ),

            // More sections to be added...
          ],
        ),
      ),
    );
  }

  // --- WIDGET ĐÃ ĐƯỢC THIẾT KẾ LẠI ---
  Widget _buildStatCard(BuildContext context, String title, String value, IconData icon, {Color color = const Color.fromARGB(255, 101, 15, 193)}) {
    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(
        side: BorderSide(color: Colors.grey[200]!),
        borderRadius: BorderRadius.circular(15),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Icon
            CircleAvatar(
              radius: 20,
              backgroundColor: color.withOpacity(0.1),
              child: Icon(icon, size: 22, color: color),
            ),
            const Spacer(),
            
            // Value
            Text(
              value,
              style: const TextStyle(
                fontSize: 26,
                fontWeight: FontWeight.bold,
                height: 1.2, // Giảm khoảng cách dòng
              ),
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
            ),
            
            // Title
            Text(
              title,
              style: const TextStyle(color: Colors.grey, height: 1.2),
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
            ),
          ],
        ),
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\admin\presentation\screens\admin_edit_product_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:image_picker/image_picker.dart';
import 'package:smartshop_mobile/features/admin/application/admin_providers.dart';
import 'package:smartshop_mobile/features/admin/data/admin_repository.dart';
import 'package:smartshop_mobile/features/admin/presentation/widgets/product_form.dart';
import 'package:smartshop_mobile/features/products/application/product_providers.dart';
import 'package:smartshop_mobile/features/admin/data/upload_repository.dart';

class AdminEditProductScreen extends ConsumerWidget {
  final String productId;
  const AdminEditProductScreen({super.key, required this.productId});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final productAsync = ref.watch(productDetailProvider(productId));

    return Scaffold(
      appBar: AppBar(title: const Text('Chỉnh sửa sản phẩm')),
      body: productAsync.when(
        data: (product) => ProductForm(
          product: product,
          onSave: (data, imageFiles) async {
            final messenger = ScaffoldMessenger.of(context);
            try {
              // Bước 1: Cập nhật thông tin text và danh sách ảnh CŨ
              await ref.read(adminRepositoryProvider).updateProduct(productId, data);

              // Bước 2: Upload ảnh MỚI nếu có
              if (imageFiles.isNotEmpty) {
                 await ref.read(uploadRepositoryProvider).uploadProductImages(productId, imageFiles);
                 messenger.showSnackBar(
                   SnackBar(content: Text('Đã upload ${imageFiles.length} ảnh mới.'))
                 );
              }

              // Bước 3: Làm mới danh sách và quay lại
              ref.refresh(adminProductsProvider); // Làm mới danh sách chung
              ref.refresh(productDetailProvider(productId)); // Làm mới chi tiết sản phẩm này
              context.pop();
              messenger.showSnackBar(const SnackBar(content: Text('Cập nhật thành công!'), backgroundColor: Colors.green));
            } catch (e) {
               messenger.showSnackBar(SnackBar(content: Text('Lỗi: $e'), backgroundColor: Colors.red));
            }
          },
        ),
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (e,s) => Center(child: Text('Lỗi tải sản phẩm: $e')),
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\admin\presentation\screens\admin_main_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

class AdminMainScreen extends StatelessWidget {
  final Widget child;
  const AdminMainScreen({super.key, required this.child});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Sử dụng Drawer làm sidebar
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            const DrawerHeader(
              decoration: BoxDecoration(color: Colors.blue),
              child: Text('Admin Panel', style: TextStyle(color: Colors.white, fontSize: 24)),
            ),
            ListTile(title: const Text('Dashboard'), onTap: () => context.go('/admin')),
            ListTile(title: const Text('Quản lý Đơn hàng'), onTap: () => context.go('/admin/orders')),
            ListTile(title: const Text('Quản lý Sản phẩm'), onTap: () => context.go('/admin/products')),
            const Divider(),
            ListTile(title: const Text('Quay lại trang KH'), onTap: () => context.go('/')),
          ],
        ),
      ),
      appBar: AppBar(
        title: const Text('Admin'),
      ),
      body: child,
    );
  }
}

================================================================================
// FILE PATH: lib\features\admin\presentation\screens\admin_orders_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/core/utils/formatter.dart';
import 'package:smartshop_mobile/features/admin/application/admin_providers.dart';

class AdminOrdersScreen extends ConsumerWidget {
  const AdminOrdersScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final ordersAsync = ref.watch(allOrdersProvider);

    return Scaffold(
      body: RefreshIndicator(
        onRefresh: () => ref.refresh(allOrdersProvider.future),
        child: ordersAsync.when(
          data: (orders) {
            if (orders.isEmpty) {
              return const Center(child: Text('Không có đơn hàng nào.'));
            }
            return ListView.builder(
              padding: const EdgeInsets.all(8.0),
              itemCount: orders.length,
              itemBuilder: (context, index) {
                return _buildOrderCard(context, orders[index]);
              },
            );
          },
          loading: () => const Center(child: CircularProgressIndicator()),
          error: (err, stack) => Center(child: Text('Lỗi: $err')),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () { /* TODO: Điều hướng đến trang tạo đơn hàng */ },
        child: const Icon(Icons.add),
        tooltip: 'Tạo đơn hàng mới',
      ),
    );
  }

  Widget _buildOrderCard(BuildContext context, Order order) {
    Color statusColor;
    switch(order.status) {
      case 'delivered': statusColor = Colors.green; break;
      case 'shipping': statusColor = Colors.orange; break;
      case 'cancelled': statusColor = Colors.red; break;
      default: statusColor = Colors.blue;
    }
    
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 6.0, horizontal: 8.0),
      child: ListTile(
        contentPadding: const EdgeInsets.symmetric(vertical: 10, horizontal: 16),
        leading: CircleAvatar(
          backgroundColor: statusColor.withOpacity(0.1),
          child: Icon(Icons.receipt_long, color: statusColor),
        ),
        title: Text(
          '#${order.orderNumber}', 
          style: const TextStyle(fontWeight: FontWeight.bold),
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Khách hàng: ${order.items.isNotEmpty ? "Khách hàng A" : "N/A"}'), // Placeholder
            Text('Ngày đặt: ${AppFormatters.formatDate(order.orderDate)}'),
          ],
        ),
        trailing: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            Text(
              AppFormatters.currency.format(order.totalAmount), 
              style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16)
            ),
            Text(
              '${order.items.length} SP',
              style: const TextStyle(color: Colors.grey, fontSize: 12)
            ),
          ],
        ),
        onTap: () {
          context.push('/admin/orders/${order.orderNumber}');
        },
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\admin\presentation\screens\admin_order_detail_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:smartshop_mobile/features/admin/application/admin_providers.dart';
import 'package:smartshop_mobile/core/utils/formatter.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:smartshop_mobile/features/admin/presentation/widgets/update_status_dialog.dart';
import 'package:smartshop_mobile/features/admin/data/admin_repository.dart';
import 'package:smartshop_mobile/core/constants/api_constants.dart';

class AdminOrderDetailScreen extends ConsumerWidget {
  final String orderNumber;
  const AdminOrderDetailScreen({super.key, required this.orderNumber});
  
  // Hàm helper để tạo URL hình ảnh an toàn
  String getImageUrl(String? imagePath) {
    if (imagePath == null || imagePath.isEmpty) {
      return ''; // Trả về chuỗi rỗng để errorWidget xử lý
    }
    // Nếu đã là URL đầy đủ (ví dụ: từ Firebase)
    if (imagePath.startsWith('http')) {
      return imagePath;
    }
    // Nếu là đường dẫn tương đối (bắt đầu bằng /)
    if (imagePath.startsWith('/')) {
      return "${ApiConstants.baseUrl}$imagePath";
    }
    // Mặc định, nếu chỉ là tên file
    return "${ApiConstants.baseUrl}/img/$imagePath";
  }

  void _showUpdateStatusDialog(BuildContext context, WidgetRef ref, Order order) async {
    final result = await showDialog<Map<String, String>>(
      context: context,
      builder: (ctx) => UpdateStatusDialog(
        currentOrderStatus: order.status,
        currentPaymentStatus: order.paymentStatus,
      ),
    );

    if (result != null) {
      final messenger = ScaffoldMessenger.of(context);
      try {
        bool updated = false;
        if (result['orderStatus'] != order.status) {
          await ref.read(adminRepositoryProvider).updateOrderStatus(
            orderNumber: order.orderNumber,
            status: result['orderStatus']!,
          );
          updated = true;
        }
        if (result['paymentStatus'] != order.paymentStatus) {
           await ref.read(adminRepositoryProvider).updatePaymentStatus(
            orderNumber: order.orderNumber,
            paymentStatus: result['paymentStatus']!,
          );
           updated = true;
        }

        if (updated) {
          messenger.showSnackBar(const SnackBar(content: Text('Cập nhật thành công!'), backgroundColor: Colors.green));
          ref.refresh(adminOrderDetailProvider(order.orderNumber));
          ref.refresh(allOrdersProvider);
        }
      } catch (e) {
        messenger.showSnackBar(SnackBar(content: Text('Lỗi: ${e.toString()}'), backgroundColor: Colors.red));
      }
    }
  }

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final orderAsync = ref.watch(adminOrderDetailProvider(orderNumber));

    return Scaffold(
      appBar: AppBar(title: Text('Chi tiết Đơn #$orderNumber')),
      body: orderAsync.when(
        data: (order) => _buildOrderDetail(context, ref, order),
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (err, stack) => Center(child: Text('Lỗi: $err')),
      ),
    );
  }

  Widget _buildOrderDetail(BuildContext context, WidgetRef ref, Order order) {
    final customerName = order.customerInfo?['fullName'] ?? '${order.user?.firstName ?? ''} ${order.user?.lastName ?? ''}'.trim();
    final customerPhone = order.customerInfo?['phone'] ?? 'N/A';
    final customerAddress = order.customerInfo?['address'] ?? 'N/A';

    return ListView(
      padding: const EdgeInsets.all(16.0),
      children: [
        // --- Thông tin khách hàng ---
        _buildInfoCard(
          context,
          title: 'Khách hàng',
          icon: Icons.person_outline,
          children: [
            _buildInfoRow('Tên:', customerName),
            _buildInfoRow('Số điện thoại:', customerPhone),
            _buildInfoRow('Địa chỉ:', customerAddress),
          ],
        ),
        const SizedBox(height: 16),

        // --- Tóm tắt đơn hàng ---
        _buildInfoCard(
          context,
          title: 'Tóm tắt',
          icon: Icons.receipt_long_outlined,
          children: [
            _buildInfoRow('Mã đơn hàng:', order.orderNumber),
            _buildInfoRow('Ngày đặt:', AppFormatters.formatDate(order.orderDate)),
            _buildInfoRow('Trạng thái:', order.status.toUpperCase()),
            _buildInfoRow('Thanh toán:', order.paymentStatus.toUpperCase()),
            _buildInfoRow('Tổng tiền:', AppFormatters.currency.format(order.totalAmount), isBold: true),
          ],
        ),
        const SizedBox(height: 16),

        // --- Danh sách sản phẩm ---
        _buildInfoCard(
          context,
          title: 'Sản phẩm (${order.items.length})',
          icon: Icons.shopping_bag_outlined,
          children: [
            for (var item in order.items)
              ListTile(
                contentPadding: EdgeInsets.zero,
                leading: CachedNetworkImage(
                  imageUrl: getImageUrl(item.product?.images.isNotEmpty ?? false ? item.product!.images[0] : null),
                  width: 50, height: 50, fit: BoxFit.cover,
                  errorWidget: (c, u, e) => Container(width: 50, height: 50, color: Colors.grey[200], child: const Icon(Icons.image_not_supported, color: Colors.grey)),
                  placeholder: (c, u) => Container(width: 50, height: 50, color: Colors.grey[200]),
                ),
                title: Text(item.productName, style: const TextStyle(fontWeight: FontWeight.w500)),
                subtitle: Text('SL: ${item.quantity}'),
                trailing: Text(AppFormatters.currency.format(item.priceAtOrder * item.quantity)),
              )
          ]
        ),
        const SizedBox(height: 24),
        
        // --- NÚT HÀNH ĐỘNG CỦA ADMIN ---
        ElevatedButton.icon(
          icon: const Icon(Icons.sync),
          label: const Text('Cập nhật trạng thái'),
          onPressed: () => _showUpdateStatusDialog(context, ref, order),
          style: ElevatedButton.styleFrom(padding: const EdgeInsets.symmetric(vertical: 12)),
        ),
      ],
    );
  }

  Widget _buildInfoCard(BuildContext context, {required String title, required IconData icon, required List<Widget> children}) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(icon, color: Theme.of(context).primaryColor),
                const SizedBox(width: 8),
                Text(title, style: Theme.of(context).textTheme.titleLarge),
              ],
            ),
            const Divider(height: 24),
            ...children,
          ],
        ),
      ),
    );
  }
  
  Widget _buildInfoRow(String label, String value, {bool isBold = false}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(label, style: const TextStyle(color: Colors.grey)),
          const SizedBox(width: 16),
          Expanded(
            child: Text(
              value,
              textAlign: TextAlign.right,
              style: TextStyle(fontWeight: isBold ? FontWeight.bold : FontWeight.normal)
            ),
          ),
        ],
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\admin\presentation\screens\admin_products_screen.dart
================================================================================

// FILE PATH: lib/features/admin/presentation/screens/admin_products_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/admin/application/admin_providers.dart';
import 'package:smartshop_mobile/core/utils/formatter.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:smartshop_mobile/core/constants/api_constants.dart';
import 'package:smartshop_mobile/features/admin/data/admin_repository.dart';
import 'package:csv/csv.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';
import 'package:share_plus/share_plus.dart';
// import 'package:file_picker/file_picker.dart';
import 'dart:io';

class AdminProductsScreen extends ConsumerStatefulWidget {
  const AdminProductsScreen({super.key});

  @override
  ConsumerState<AdminProductsScreen> createState() => _AdminProductsScreenState();
}

class _AdminProductsScreenState extends ConsumerState<AdminProductsScreen> {
  // --- CÁC BIẾN STATE MỚI ---
  bool _isSelectionMode = false;
  final Set<String> _selectedProductIds = {};

  Future<void> _showBulkUpdateDialog() async {
    final priceController = TextEditingController();
    final stockController = TextEditingController();

    final result = await showDialog<Map<String, String>>(
      context: context,
      builder: (ctx) => AlertDialog(
        title: Text('Cập nhật hàng loạt'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('Nhập giá trị mới cho ${_selectedProductIds.length} sản phẩm đã chọn. Bỏ trống nếu không muốn thay đổi.'),
            SizedBox(height: 16),
            TextField(controller: priceController, decoration: InputDecoration(labelText: 'Giá mới'), keyboardType: TextInputType.number),
            SizedBox(height: 16),
            TextField(controller: stockController, decoration: InputDecoration(labelText: 'Số lượng kho mới'), keyboardType: TextInputType.number),
          ],
        ),
        actions: [
          TextButton(onPressed: () => Navigator.of(ctx).pop(), child: Text('Hủy')),
          ElevatedButton(
            onPressed: () => Navigator.of(ctx).pop({
              'price': priceController.text,
              'stock': stockController.text
            }),
            child: Text('Cập nhật'),
          ),
        ],
      ),
    );

    if (result != null) {
      final double? newPrice = double.tryParse(result['price']!);
      final int? newStock = int.tryParse(result['stock']!);

      if (newPrice == null && newStock == null) return;

      final messenger = ScaffoldMessenger.of(context);
      try {
        await ref.read(adminRepositoryProvider).bulkUpdateProducts(
          ids: _selectedProductIds.toList(),
          price: newPrice,
          stock: newStock,
        );
        messenger.showSnackBar(SnackBar(content: Text('Đã cập nhật hàng loạt thành công.'), backgroundColor: Colors.green));
        _exitSelectionMode();
        ref.refresh(adminProductsProvider);
      } catch (e) {
        messenger.showSnackBar(SnackBar(content: Text('Lỗi: $e'), backgroundColor: Colors.red));
      }
    }
  }

  // Future<void> _importProducts() async {
  //   // 1. Chọn file
  //   FilePickerResult? result = await FilePicker.platform.pickFiles(
  //     type: FileType.custom,
  //     allowedExtensions: ['csv'],
  //   );

  //   if (result != null) {
  //     File file = File(result.files.single.path!);
  //     final messenger = ScaffoldMessenger.of(context);
  //     messenger.showSnackBar(SnackBar(content: Text('Đang import file: ${result.files.single.name}...')));

  //     try {
  //       // 2. Gọi API
  //       final importResult = await ref.read(adminRepositoryProvider).importProducts(file);

  //       // 3. Hiển thị kết quả
  //       await showDialog(
  //         context: context,
  //         builder: (ctx) => AlertDialog(
  //           title: Text('Kết quả Import'),
  //           content: Text(
  //             'Thành công: ${importResult['success']}\n'
  //             'Tạo mới: ${importResult['created']}\n'
  //             'Cập nhật: ${importResult['updated']}\n'
  //             'Lỗi: ${importResult['errors']?.length ?? 0}'
  //           ),
  //           actions: [TextButton(onPressed: () => Navigator.of(ctx).pop(), child: Text('OK'))],
  //         ),
  //       );
  //       ref.refresh(adminProductsProvider); // Làm mới danh sách

  //     } catch (e) {
  //       messenger.showSnackBar(SnackBar(content: Text('Lỗi khi import: $e'), backgroundColor: Colors.red));
  //     }
  //   } else {
  //     // User canceled the picker
  //   }
  // }


  Future<void> _exportProducts() async {
    final messenger = ScaffoldMessenger.of(context);
    messenger.showSnackBar(const SnackBar(content: Text('Đang chuẩn bị file export...')));

    try {
      // 1. Lấy toàn bộ sản phẩm
      final products = await ref.read(adminRepositoryProvider).getAllProductsSimple();
      if (products.isEmpty) {
        messenger.showSnackBar(const SnackBar(content: Text('Không có sản phẩm để export.'), backgroundColor: Colors.orange));
        return;
      }

      // 2. Chuyển đổi sang dạng List<List<dynamic>> cho thư viện CSV
      List<List<dynamic>> rows = [];
      // Thêm hàng tiêu đề
      rows.add(['ID', 'Name', 'SKU', 'Price', 'Stock', 'Category', 'Brand']);
      // Thêm dữ liệu sản phẩm
      for (var product in products) {
        rows.add([
          product.id,
          product.name,
          product.id, // Assuming SKU is the same as ID based on your code
          product.price,
          product.stock,
          product.category?.name ?? '',
          product.brand?.name ?? '',
        ]);
      }

      // 3. Tạo chuỗi CSV
      String csv = const ListToCsvConverter().convert(rows);

      // 4. Lưu vào file tạm và chia sẻ
      final directory = await getTemporaryDirectory();
      final path = '${directory.path}/products_export_${DateTime.now().millisecondsSinceEpoch}.csv';
      final file = File(path);
      await file.writeAsString(csv);

      Share.shareXFiles([XFile(path)], text: 'Danh sách sản phẩm SmartShop');

    } catch (e) {
      messenger.showSnackBar(SnackBar(content: Text('Lỗi khi export: $e'), backgroundColor: Colors.red));
    }
  }


  void _toggleSelection(String productId) {
    setState(() {
      if (_selectedProductIds.contains(productId)) {
        _selectedProductIds.remove(productId);
      } else {
        _selectedProductIds.add(productId);
      }
      // Tự động thoát chế độ chọn nếu không còn sản phẩm nào được chọn
      if (_selectedProductIds.isEmpty) {
        _isSelectionMode = false;
      }
    });
  }

  void _enterSelectionMode(String productId) {
    setState(() {
      _isSelectionMode = true;
      _selectedProductIds.add(productId);
    });
  }

  void _exitSelectionMode() {
    setState(() {
      _isSelectionMode = false;
      _selectedProductIds.clear();
    });
  }

  Future<void> _deleteSelectedProducts() async {
    final confirm = await showDialog<bool>(
      context: context,
      builder: (ctx) => AlertDialog(
        title: Text('Xác nhận xóa'),
        content: Text('Bạn có chắc muốn xóa ${_selectedProductIds.length} sản phẩm đã chọn?'),
        actions: [
          TextButton(onPressed: () => Navigator.of(ctx).pop(false), child: const Text('Hủy')),
          TextButton(onPressed: () => Navigator.of(ctx).pop(true), child: const Text('Xóa'), style: TextButton.styleFrom(foregroundColor: Colors.red)),
        ],
      ),
    ) ?? false;

    if (confirm) {
      final messenger = ScaffoldMessenger.of(context);
      try {
        await ref.read(adminRepositoryProvider).deleteManyProducts(_selectedProductIds.toList());
        messenger.showSnackBar(SnackBar(content: Text('Đã xóa ${_selectedProductIds.length} sản phẩm.'), backgroundColor: Colors.green));
        _exitSelectionMode();
        ref.refresh(adminProductsProvider); // Làm mới danh sách
      } catch (e) {
        messenger.showSnackBar(SnackBar(content: Text('Lỗi: $e'), backgroundColor: Colors.red));
      }
    }
  }

  // --- APPBAR ĐỘNG ---

  AppBar _buildAppBar() {
    if (_isSelectionMode) {
      return AppBar(
        leading: IconButton(icon: const Icon(Icons.close), onPressed: _exitSelectionMode),
        title: Text('${_selectedProductIds.length} đã chọn'),
        actions: [
          // THÊM NÚT MỚI
          IconButton(
            icon: const Icon(Icons.edit_note),
            onPressed: _showBulkUpdateDialog,
            tooltip: 'Cập nhật hàng loạt',
          ),
          IconButton(icon: const Icon(Icons.delete_outline), onPressed: _deleteSelectedProducts),
        ],
      );
    } else {
    return AppBar(
      title: const Text('Quản lý Sản phẩm'),
      actions: [
        // IconButton(
        //   icon: const Icon(Icons.upload_file_outlined),
        //   onPressed: _importProducts,
        //   tooltip: 'Import từ CSV',
        // ),
        IconButton(
          icon: const Icon(Icons.download_for_offline_outlined),
          onPressed: _exportProducts,
          tooltip: 'Export ra CSV',
        )
      ],
    );
  }
  }

  @override
  Widget build(BuildContext context) {
    final productsAsync = ref.watch(adminProductsProvider);

    return Scaffold(
      appBar: _buildAppBar(),
      body: RefreshIndicator(
        onRefresh: () => ref.refresh(adminProductsProvider.future),
        child: productsAsync.when(
          data: (products) {
            if (products.isEmpty) {
              return const Center(child: Text('Không có sản phẩm nào.'));
            }
            return ListView.builder(
              padding: const EdgeInsets.all(8.0),
              itemCount: products.length,
              itemBuilder: (context, index) {
                return _buildProductListItem(context, ref, products[index]);
              },
            );
          },
          loading: () => const Center(child: CircularProgressIndicator()),
          error: (err, stack) => Center(child: Text('Lỗi: $err')),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => context.push('/admin/products/create'),
        child: const Icon(Icons.add),
        tooltip: 'Thêm sản phẩm',
      ),
    );
  }

  // --- WIDGET DANH SÁCH ĐƯỢC CẬP NHẬT ---
  Widget _buildProductListItem(BuildContext context, WidgetRef ref, Product product) {
    final isSelected = _selectedProductIds.contains(product.id);

    String getImageUrl(String? imagePath) {
      if (imagePath == null || imagePath.isEmpty) return '';
      if (imagePath.startsWith('http')) return imagePath;
      if (imagePath.startsWith('/')) return "${ApiConstants.baseUrl}$imagePath";
      return "${ApiConstants.baseUrl}/img/$imagePath";
    }
    final imageUrl = product.images.isNotEmpty ? getImageUrl(product.images[0]) : '';

    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),
      child: ListTile(
        selected: isSelected,
        selectedTileColor: Colors.blue.withOpacity(0.1),
        onTap: () {
          if (_isSelectionMode) {
            _toggleSelection(product.id);
          } else {
            context.push('/admin/products/detail/${product.id}');
          }
        },
        onLongPress: () {
          if (!_isSelectionMode) {
            _enterSelectionMode(product.id);
          }
        },
        leading: isSelected
            ? CircleAvatar(
                backgroundColor: Colors.blue,
                child: Icon(Icons.check, color: Colors.white),
              )
            : ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: CachedNetworkImage(
                  imageUrl: imageUrl,
                  width: 50,
                  height: 50,
                  fit: BoxFit.cover,
                  errorWidget: (c, u, e) => Container(width: 50, height: 50, color: Colors.grey[200]),
                  placeholder: (c, u) => Container(width: 50, height: 50, color: Colors.grey[200]),
                ),
              ),
        title: Text(product.name, style: const TextStyle(fontWeight: FontWeight.bold)),
        subtitle: Text('Kho: ${product.stock}'),
        trailing: Text(AppFormatters.currency.format(product.price), style: TextStyle(color: Theme.of(context).primaryColor, fontWeight: FontWeight.w600)),
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\admin\presentation\screens\admin_product_detail_screen.dart
================================================================================

// FILE PATH: lib/features/admin/presentation/screens/admin_product_detail_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/features/products/application/product_providers.dart';
import 'package:smartshop_mobile/core/utils/formatter.dart';
import 'package:cached_network_image/cached_network_image.dart';

class AdminProductDetailScreen extends ConsumerWidget {
  final String productId;
  const AdminProductDetailScreen({super.key, required this.productId});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final productAsync = ref.watch(productDetailProvider(productId));

    return DefaultTabController(
      length: 3,
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Chi tiết Sản phẩm'),
          bottom: const TabBar(
            tabs: [
              Tab(text: 'Tổng quan'),
              Tab(text: 'Thông số'),
              Tab(text: 'Đánh giá'),
            ],
          ),
        ),
        body: productAsync.when(
          data: (product) => TabBarView(
            children: [
              // Tab 1: Tổng quan
              ListView(
                padding: const EdgeInsets.all(16),
                children: [
                  if (product.images.isNotEmpty)
                    SizedBox(
                      height: 250,
                      child: CachedNetworkImage(imageUrl: product.images[0], fit: BoxFit.contain),
                    ),
                  const SizedBox(height: 16),
                  Text(product.name, style: Theme.of(context).textTheme.headlineSmall),
                  const SizedBox(height: 8),
                  Text(AppFormatters.currency.format(product.price), style: TextStyle(color: Theme.of(context).primaryColor, fontSize: 20, fontWeight: FontWeight.bold)),
                  const SizedBox(height: 8),
                  Text("Kho: ${product.stock}"),
                ],
              ),
              // Tab 2: Thông số
              ListView(padding: const EdgeInsets.all(16), children: [Text(product.description)]),
              // Tab 3: Đánh giá
              const Center(child: Text("Tính năng đánh giá đang phát triển.")),
            ],
          ),
          loading: () => const Center(child: CircularProgressIndicator()),
          error: (e, s) => Center(child: Text('Lỗi: $e')),
        ),
        floatingActionButton: FloatingActionButton(
          onPressed: () => context.push('/admin/products/edit/${productId}'),
          child: const Icon(Icons.edit),
          tooltip: 'Chỉnh sửa',
        ),
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\admin\presentation\widgets\product_form.dart
================================================================================

import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:image_picker/image_picker.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/products/application/product_providers.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:smartshop_mobile/core/constants/api_constants.dart';

// Định nghĩa kiểu dữ liệu cho callback onSave, bao gồm cả data và file ảnh
typedef ProductSaveCallback = void Function(Map<String, dynamic> data, List<XFile> imageFiles);

class ProductForm extends ConsumerStatefulWidget {
  final Product? product; // null nếu là tạo mới, có giá trị nếu là sửa
  final ProductSaveCallback onSave;

  const ProductForm({super.key, this.product, required this.onSave});

  @override
  ConsumerState<ProductForm> createState() => _ProductFormState();
}

class _ProductFormState extends ConsumerState<ProductForm> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameController;
  late TextEditingController _priceController;
  late TextEditingController _stockController;
  late TextEditingController _descriptionController;
  late TextEditingController _skuController;
  late TextEditingController _originalPriceController;

  String? _selectedCategory;
  String? _selectedBrand;
  bool _isActive = true;
  bool _isFeatured = false;

  // State để quản lý ảnh
  List<XFile> _imageFiles = []; // Danh sách file ảnh mới chờ upload
  late List<String> _existingImages; // Danh sách ảnh đã có trên server
  final ImagePicker _picker = ImagePicker();

  @override
  void initState() {
    super.initState();
    final p = widget.product;
    _nameController = TextEditingController(text: p?.name ?? '');
    _priceController = TextEditingController(text: p?.price.toString() ?? '');
    _originalPriceController = TextEditingController(text: p?.originalPrice?.toString() ?? '');
    _stockController = TextEditingController(text: p?.stock.toString() ?? '');
    _descriptionController = TextEditingController(text: p?.description ?? '');
    _skuController = TextEditingController(text: p?.id ?? 'SKU-${DateTime.now().millisecondsSinceEpoch}');
    _selectedCategory = p?.category?.id;
    _selectedBrand = p?.brand?.id;
    _isActive = p?.isActive ?? true;
    _isFeatured = p?.isFeatured ?? false;
    _existingImages = List<String>.from(p?.images ?? []);
  }
  
  @override
  void dispose() {
    _nameController.dispose();
    _priceController.dispose();
    _stockController.dispose();
    _descriptionController.dispose();
    _skuController.dispose();
    _originalPriceController.dispose();
    super.dispose();
  }

  void _submit() {
    if (_formKey.currentState!.validate()) {
      final data = {
        'name': _nameController.text.trim(),
        'description': _descriptionController.text.trim(),
        'price': double.tryParse(_priceController.text) ?? 0.0,
        'originalPrice': double.tryParse(_originalPriceController.text),
        'sku': _skuController.text.trim(),
        'category': _selectedCategory,
        'brand': _selectedBrand,
        'stock': int.tryParse(_stockController.text) ?? 0,
        'isActive': _isActive,
        'isFeatured': _isFeatured,
        'images': _existingImages, // Gửi lại danh sách ảnh cũ đã được cập nhật
      };
      widget.onSave(data, _imageFiles); 
    }
  }
  
  Future<void> _pickImages() async {
    final List<XFile> pickedFiles = await _picker.pickMultiImage(
      imageQuality: 80, // Nén ảnh một chút
    );
    if (pickedFiles.isNotEmpty) {
      if ((_existingImages.length + _imageFiles.length + pickedFiles.length) > 5) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Chỉ được upload tối đa 5 ảnh.'), backgroundColor: Colors.orange,)
        );
        return;
      }
      setState(() {
        _imageFiles.addAll(pickedFiles);
      });
    }
  }

  void _removeNewImage(int index) {
    setState(() {
      _imageFiles.removeAt(index);
    });
  }
  
  void _removeExistingImage(int index) {
    // Logic này sẽ xóa ảnh khỏi danh sách sẽ được gửi đi khi cập nhật.
    // Việc xóa file thật trên server cần được thực hiện riêng.
    setState(() {
      _existingImages.removeAt(index);
    });
  }

  @override
  Widget build(BuildContext context) {
    final categoriesAsync = ref.watch(categoriesProvider);
    final brandsAsync = ref.watch(brandsProvider);

    return Form(
      key: _formKey,
      child: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          TextFormField(controller: _nameController, decoration: const InputDecoration(labelText: 'Tên sản phẩm*'), validator: (v) => v!.isEmpty ? 'Bắt buộc' : null),
          const SizedBox(height: 16),
          TextFormField(controller: _skuController, decoration: const InputDecoration(labelText: 'SKU*'), validator: (v) => v!.isEmpty ? 'Bắt buộc' : null),
          const SizedBox(height: 16),
          Row(children: [
            Expanded(child: TextFormField(controller: _priceController, decoration: const InputDecoration(labelText: 'Giá bán*'), keyboardType: TextInputType.number, validator: (v) => v!.isEmpty ? 'Bắt buộc' : null)),
            const SizedBox(width: 16),
            Expanded(child: TextFormField(controller: _originalPriceController, decoration: const InputDecoration(labelText: 'Giá gốc'), keyboardType: TextInputType.number)),
          ]),
          const SizedBox(height: 16),
          TextFormField(controller: _stockController, decoration: const InputDecoration(labelText: 'Số lượng kho*'), keyboardType: TextInputType.number, validator: (v) => v!.isEmpty ? 'Bắt buộc' : null),
          const SizedBox(height: 16),
          TextFormField(controller: _descriptionController, decoration: const InputDecoration(labelText: 'Mô tả sản phẩm'), maxLines: 5),
          const SizedBox(height: 16),

          categoriesAsync.when(
            data: (categories) => DropdownButtonFormField<String>(
              value: _selectedCategory,
              hint: const Text('Chọn danh mục*'),
              items: categories.map((c) => DropdownMenuItem(value: c.id, child: Text(c.name))).toList(),
              onChanged: (val) => setState(() => _selectedCategory = val),
              validator: (value) => value == null ? 'Bắt buộc' : null,
            ),
            loading: () => const Center(child: CircularProgressIndicator()),
            error: (e,s) => Text('Lỗi tải danh mục: $e'),
          ),
          const SizedBox(height: 16),

           brandsAsync.when(
            data: (brands) => DropdownButtonFormField<String>(
              value: _selectedBrand,
              hint: const Text('Chọn thương hiệu*'),
              items: brands.map((b) => DropdownMenuItem(value: b.id, child: Text(b.name))).toList(),
              onChanged: (val) => setState(() => _selectedBrand = val),
               validator: (value) => value == null ? 'Bắt buộc' : null,
            ),
            loading: () => const Center(child: CircularProgressIndicator()),
            error: (e,s) => Text('Lỗi tải thương hiệu: $e'),
          ),
          const SizedBox(height: 24),
          
          Text('Hình ảnh sản phẩm', style: Theme.of(context).textTheme.titleLarge),
          const SizedBox(height: 12),
          
          if (_existingImages.isNotEmpty)
            GridView.builder(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 4, crossAxisSpacing: 8, mainAxisSpacing: 8),
              itemCount: _existingImages.length,
              itemBuilder: (context, index) {
                return Stack(
                  fit: StackFit.expand,
                  children: [
                    CachedNetworkImage(imageUrl: "${ApiConstants.baseUrl}${_existingImages[index]}", fit: BoxFit.cover, errorWidget: (c,u,e) => const Icon(Icons.error)),
                    Positioned(
                      top: -8, right: -8,
                      child: IconButton(
                        icon: const CircleAvatar(radius: 12, backgroundColor: Colors.black54, child: Icon(Icons.close, size: 14, color: Colors.white)),
                        onPressed: () => _removeExistingImage(index),
                      ),
                    )
                  ],
                );
              },
            ),
          
          if (_imageFiles.isNotEmpty) ...[
            const SizedBox(height: 16),
            GridView.builder(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 4, crossAxisSpacing: 8, mainAxisSpacing: 8),
              itemCount: _imageFiles.length,
              itemBuilder: (context, index) {
                 return Stack(
                  fit: StackFit.expand,
                  children: [
                    Image.file(File(_imageFiles[index].path), fit: BoxFit.cover),
                    Positioned(
                      top: -8, right: -8,
                      child: IconButton(
                        icon: const CircleAvatar(radius: 12, backgroundColor: Colors.black54, child: Icon(Icons.close, size: 14, color: Colors.white)),
                        onPressed: () => _removeNewImage(index),
                      ),
                    )
                  ],
                );
              },
            ),
          ],

          const SizedBox(height: 16),
          OutlinedButton.icon(
            icon: const Icon(Icons.add_a_photo_outlined),
            label: const Text('Thêm ảnh'),
            onPressed: _pickImages,
            style: OutlinedButton.styleFrom(padding: const EdgeInsets.symmetric(vertical: 12)),
          ),

          const SizedBox(height: 24),
          SwitchListTile(
            title: const Text('Kích hoạt sản phẩm'),
            value: _isActive,
            onChanged: (val) => setState(() => _isActive = val),
          ),
           SwitchListTile(
            title: const Text('Sản phẩm nổi bật'),
            value: _isFeatured,
            onChanged: (val) => setState(() => _isFeatured = val),
          ),

          const SizedBox(height: 32),
          ElevatedButton(
            onPressed: _submit,
            child: Text(widget.product == null ? 'Tạo mới' : 'Lưu thay đổi'),
          )
        ],
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\admin\presentation\widgets\update_status_dialog.dart
================================================================================

import 'package:flutter/material.dart';

class UpdateStatusDialog extends StatefulWidget {
  final String currentOrderStatus;
  final String currentPaymentStatus;
  
  const UpdateStatusDialog({
    super.key,
    required this.currentOrderStatus,
    required this.currentPaymentStatus
  });

  @override
  State<UpdateStatusDialog> createState() => _UpdateStatusDialogState();
}

class _UpdateStatusDialogState extends State<UpdateStatusDialog> {
  late String _selectedOrderStatus;
  late String _selectedPaymentStatus;

  // Danh sách các trạng thái để admin chọn
  final List<String> orderStatusOptions = ['pending', 'confirmed', 'processing', 'shipping', 'delivered', 'cancelled'];
  final List<String> paymentStatusOptions = ['pending', 'paid', 'failed', 'refunded'];

  @override
  void initState() {
    super.initState();
    _selectedOrderStatus = widget.currentOrderStatus;
    _selectedPaymentStatus = widget.currentPaymentStatus;
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('Cập nhật Trạng thái'),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          // Dropdown cho trạng thái đơn hàng
          DropdownButtonFormField<String>(
            value: _selectedOrderStatus,
            decoration: const InputDecoration(labelText: 'Trạng thái Đơn hàng'),
            items: orderStatusOptions.map((String value) {
              return DropdownMenuItem<String>(value: value, child: Text(value.toUpperCase()));
            }).toList(),
            onChanged: (newValue) {
              setState(() {
                _selectedOrderStatus = newValue!;
              });
            },
          ),
          const SizedBox(height: 16),
          // Dropdown cho trạng thái thanh toán
          DropdownButtonFormField<String>(
            value: _selectedPaymentStatus,
            decoration: const InputDecoration(labelText: 'Trạng thái Thanh toán'),
            items: paymentStatusOptions.map((String value) {
              return DropdownMenuItem<String>(value: value, child: Text(value.toUpperCase()));
            }).toList(),
            onChanged: (newValue) {
              setState(() {
                _selectedPaymentStatus = newValue!;
              });
            },
          ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('Hủy'),
        ),
        ElevatedButton(
          onPressed: () {
            // Trả về kết quả là một Map chứa các giá trị mới
            Navigator.of(context).pop({
              'orderStatus': _selectedOrderStatus,
              'paymentStatus': _selectedPaymentStatus,
            });
          },
          child: const Text('Lưu'),
        ),
      ],
    );
  }
}

================================================================================
// FILE PATH: lib\features\auth\application\auth_provider.dart
================================================================================

import 'dart:async';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:smartshop_mobile/core/api/graphql_client.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/auth/data/auth_repository.dart';

// Định nghĩa các trạng thái
abstract class AuthState { const AuthState(); }
class AuthLoading extends AuthState {}
class Authenticated extends AuthState {
  final User user;
  const Authenticated(this.user);
}
class Unauthenticated extends AuthState {}
class AuthError extends AuthState {
  final String message;
  const AuthError(this.message);
}

// Provider chính
final authProvider = StateNotifierProvider<AuthNotifier, AuthState>((ref) {
  return AuthNotifier(ref);
});

// Notifier xử lý logic
class AuthNotifier extends StateNotifier<AuthState> {
  final Ref _ref;
  
  AuthNotifier(this._ref) : super(AuthLoading()) {
    _checkAuthStatus();
  }
  
  // Hàm này giờ không cần thiết nữa vì GoRouter sẽ lắng nghe trực tiếp StateNotifier
  // Stream<AuthState> get stream => state.asStream();

  // --- HÀM ĐÃ ĐƯỢC CẬP NHẬT LOGIC ---
  Future<void> _checkAuthStatus() async {
    final userMap = await GraphQLConfig.getStoredUser(); 
    if (userMap != null) {
      // Dùng User.fromJson để đảm bảo avatarUrl được xử lý đúng
      // từ dữ liệu đã lưu.
      final user = User.fromJson(userMap); 
      state = Authenticated(user); 
    } else {
      state = Unauthenticated();
    }
  }

  // Update info
  void updateUserData(User updatedUser) {
    print('[AUTH] updateUserData nhận được avatarUrl: ${updatedUser.avatarUrl}');
    final currentState = state;
    if (currentState is Authenticated) {
      // Luôn coi đối tượng `updatedUser` nhận được từ server 
      // là phiên bản đầy đủ và chính xác nhất.
      // Gán thẳng nó làm state mới.
      state = Authenticated(updatedUser);

      // Cập nhật lại thông tin trong secure storage với đối tượng user hoàn chỉnh này.
      GraphQLConfig.updateStoredUser(
          {
              '_id': updatedUser.id,
              'username': updatedUser.username,
              'email': updatedUser.email,
              'firstName': updatedUser.firstName,
              'lastName': updatedUser.lastName,
              'role': updatedUser.role,
              // `updatedUser.avatarUrl` lúc này đã là URL đầy đủ và mới nhất
              'avatarUrl': updatedUser.avatarUrl,
          }
      );
    }
  }

  Future<void> login(String username, String password) async {
    state = AuthLoading(); 
    try {
      final responseData = await _ref.read(authRepositoryProvider).login(username, password);
      final userMap = responseData['user'];
      final token = responseData['jwt']; 

      await GraphQLConfig.setToken(token, userMap); 

      // SỬA Ở ĐÂY: Dùng User.fromJson để đảm bảo avatarUrl từ server được xử lý đúng.
      final user = User.fromJson(userMap);
      state = Authenticated(user); 

    } catch (e) {
      state = AuthError(e.toString().replaceFirst("Exception: ", "")); 
      await Future.delayed(const Duration(seconds: 2));
      if (mounted) state = Unauthenticated(); 
    }
  }

  // Future<void> login(String username, String password) async {
  //   state = AuthLoading();
  //   try {
  //     final responseData = await _ref.read(authRepositoryProvider).login(username, password);
  //     final userMap = responseData['user'];
  //     final token = responseData['jwt'];

  //     await GraphQLConfig.setToken(token, userMap);

  //     final user = User(
  //       id: userMap['_id'],
  //       username: userMap['username'],
  //       email: userMap['email'],
  //       firstName: userMap['firstName'],
  //       lastName: userMap['lastName'],
  //       role: userMap['role'],
  //       avatarUrl: 'https://i.pravatar.cc/150?u=${userMap['_id']}',
  //     );
      
  //     state = Authenticated(user);

  //   } catch (e) {
  //     state = AuthError(e.toString().replaceFirst("Exception: ", ""));
  //     await Future.delayed(const Duration(seconds: 2));
  //     if (mounted) state = Unauthenticated();
  //   }
  // }
  
  Future<void> register({
    required String username,
    required String email,
    required String password,
    required String firstName,
    required String lastName
  }) async {
    state = AuthLoading();
    try {
      await _ref.read(authRepositoryProvider).register(
        username: username, email: email, password: password,
        firstName: firstName, lastName: lastName
      );
      state = Unauthenticated();
    } catch(e) {
      state = AuthError(e.toString().replaceFirst("Exception: ", ""));
      await Future.delayed(const Duration(seconds: 2));
      if (mounted) state = Unauthenticated();
    }
  }
  
  Future<void> forgotPassword(String email) async {
    state = AuthLoading();
    try {
      await _ref.read(authRepositoryProvider).sendOTP(email);
      state = Unauthenticated();
    } catch (e) {
      state = AuthError(e.toString().replaceFirst("Exception: ", ""));
      await Future.delayed(const Duration(seconds: 2));
      if (mounted) state = Unauthenticated();
    }
  }

  Future<void> resetPassword(String email, String otp, String newPassword) async {
    state = AuthLoading();
     try {
      await _ref.read(authRepositoryProvider).resetPassword(email, otp, newPassword);
      state = Unauthenticated();
    } catch (e) {
      state = AuthError(e.toString().replaceFirst("Exception: ", ""));
      await Future.delayed(const Duration(seconds: 2));
      if (mounted) state = Unauthenticated();
    }
  }
  
  Future<void> logout() async {
    state = AuthLoading();
    await GraphQLConfig.clearToken();
    await Future.delayed(const Duration(milliseconds: 500));
    state = Unauthenticated();
  }
}

================================================================================
// FILE PATH: lib\features\auth\data\auth_graphql.dart
================================================================================

class AuthGraphQL {
  static const String loginMutation = r'''
    mutation Login($input: LoginInput!) {
      login(input: $input) {
        success
        message
        data {
          jwt
          user { _id username email firstName lastName role }
        }
      }
    }
  ''';

  static const String registerMutation = r'''
    mutation Register($input: RegisterInput!) {
      register(input: $input) {
        success
        message
      }
    }
  ''';

  static const String sendPasswordResetOTP = r'''
    mutation SendPasswordResetOTP($input: SendOTPInput!) {
      sendPasswordResetOTP(input: $input) {
        success
        message
      }
    }
  ''';

  static const String verifyOTPAndResetPassword = r'''
    mutation VerifyOTPAndResetPassword($input: VerifyOTPAndResetPasswordInput!) {
      verifyOTPAndResetPassword(input: $input) {
        success
        message
      }
    }
  ''';

}

================================================================================
// FILE PATH: lib\features\auth\data\auth_repository.dart
================================================================================

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:graphql_flutter/graphql_flutter.dart';
import 'package:smartshop_mobile/core/api/graphql_client.dart';
import 'package:smartshop_mobile/features/auth/data/auth_graphql.dart';

// Provider cho repository
final authRepositoryProvider = Provider<AuthRepository>((ref) {
  final client = ref.watch(graphqlClientProvider);
  return AuthRepository(client: client);
});

class AuthRepository {
  final GraphQLClient client;
  AuthRepository({required this.client});

  Future<Map<String, dynamic>> login(String username, String password) async {
    final options = MutationOptions(
      document: gql(AuthGraphQL.loginMutation),
      variables: {
        'input': {'username': username, 'password': password}
      },
    );
    final result = await client.mutate(options);

    if (result.hasException) {
      throw Exception(result.exception.toString());
    }
    
    final response = result.data?['login'];
    if (response == null || !response['success']) {
      throw Exception(response['message'] ?? 'Đăng nhập thất bại');
    }
    
    return response['data'];
  }
  
  Future<void> register({
    required String username,
    required String email,
    required String password,
    required String firstName,
    required String lastName,
  }) async {
    final options = MutationOptions(
      document: gql(AuthGraphQL.registerMutation),
      variables: {
        'input': {
          'username': username,
          'email': email,
          'password': password,
          'firstName': firstName,
          'lastName': lastName
        }
      },
    );

    final result = await client.mutate(options);

    if (result.hasException) {
      throw Exception(result.exception.toString());
    }

    final response = result.data?['register'];
    if (response == null || !response['success']) {
      throw Exception(response['message'] ?? 'Đăng ký thất bại');
    }
  }

  Future<void> sendOTP(String email) async {
    final options = MutationOptions(
      document: gql(AuthGraphQL.sendPasswordResetOTP),
      variables: {'input': {'email': email}},
    );
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());
    
    final response = result.data?['sendPasswordResetOTP'];
    if (response == null || !response['success']) {
      throw Exception(response['message'] ?? 'Gửi OTP thất bại');
    }
  }

  Future<void> resetPassword(String email, String otp, String newPassword) async {
    final options = MutationOptions(
      document: gql(AuthGraphQL.verifyOTPAndResetPassword),
      variables: {'input': {'email': email, 'otp': otp, 'newPassword': newPassword}},
    );
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());

    final response = result.data?['verifyOTPAndResetPassword'];
    if (response == null || !response['success']) {
      throw Exception(response['message'] ?? 'Đặt lại mật khẩu thất bại');
    }
  }

}

================================================================================
// FILE PATH: lib\features\auth\data\product_graphql.dart
================================================================================

class ProductGraphQL {
  // Fragment giúp tái sử dụng các trường dữ liệu chung cho sản phẩm
  static const String productFragment = r'''
    fragment ProductData on Product {
      _id
      name
      description
      price
      originalPrice
      images
      stock
      isFeatured
      isActive
      category {
        _id
        name
      }
      brand {
        _id
        name
      }
    }
  ''';

  // Query để lấy danh sách sản phẩm
  static const String getProducts = '''
    query GetProducts(\$first: Int, \$offset: Int) {
      products(first: \$first, offset: \$offset) {
        nodes {
          ...ProductData
        }
        totalCount
        hasNextPage
      }
    }
    $productFragment
  ''';

  // Query để lấy sản phẩm nổi bật
  static const String getFeaturedProducts = '''
    query GetFeaturedProducts {
      featuredProducts {
        ...ProductData
      }
    }
    $productFragment
  ''';
}

================================================================================
// FILE PATH: lib\features\auth\presentation\screens\forgot_password_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/features/auth/application/auth_provider.dart';

class ForgotPasswordScreen extends ConsumerStatefulWidget {
  const ForgotPasswordScreen({super.key});

  @override
  ConsumerState<ForgotPasswordScreen> createState() => _ForgotPasswordScreenState();
}

class _ForgotPasswordScreenState extends ConsumerState<ForgotPasswordScreen> {
  int _step = 1; // 1 for email, 2 for OTP and new password
  final _emailController = TextEditingController();
  final _otpController = TextEditingController();
  final _passwordController = TextEditingController();
  
  void _handleSendOTP() {
    if (_emailController.text.isEmpty) return;
    ref.read(authProvider.notifier).forgotPassword(_emailController.text.trim());
  }

  void _handleResetPassword() {
    if (_otpController.text.isEmpty || _passwordController.text.isEmpty) return;
    ref.read(authProvider.notifier).resetPassword(
      _emailController.text.trim(),
      _otpController.text.trim(),
      _passwordController.text.trim()
    );
  }


  @override
  Widget build(BuildContext context) {
    final authState = ref.watch(authProvider);

    ref.listen(authProvider, (previous, next) {
      if (next is Unauthenticated && previous is AuthLoading) {
        if (_step == 1) { // Sau khi gửi OTP thành công
          ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('OTP đã được gửi!'), backgroundColor: Colors.green));
          setState(() => _step = 2);
        } else if (_step == 2) { // Sau khi reset thành công
          ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Đặt lại mật khẩu thành công!'), backgroundColor: Colors.green));
          context.go('/login');
        }
      } else if (next is AuthError) {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(next.message), backgroundColor: Colors.red));
      }
    });

    return Scaffold(
      appBar: AppBar(title: const Text('Quên Mật khẩu')),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24.0),
        child: _step == 1 ? _buildEmailStep(authState) : _buildOtpStep(authState),
      ),
    );
  }

  Widget _buildEmailStep(AuthState authState) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        Text(
          'Nhập email đã đăng ký của bạn. Chúng tôi sẽ gửi mã OTP.',
          style: Theme.of(context).textTheme.titleMedium?.copyWith(color: Colors.grey[700]),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 32),
        TextField(controller: _emailController, decoration: const InputDecoration(labelText: 'Email')),
        const SizedBox(height: 32),
        ElevatedButton(
          onPressed: authState is AuthLoading ? null : _handleSendOTP,
          child: authState is AuthLoading
                ? const SizedBox(width: 24, height: 24, child: CircularProgressIndicator(color: Colors.white, strokeWidth: 2))
                : const Text('Gửi mã OTP'),
        ),
      ],
    );
  }

  Widget _buildOtpStep(AuthState authState) {
     return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        Text(
          'Mã OTP đã được gửi tới email ${_emailController.text}. Vui lòng kiểm tra và nhập vào bên dưới.',
          style: Theme.of(context).textTheme.titleMedium?.copyWith(color: Colors.grey[700]),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 32),
        TextField(controller: _otpController, decoration: const InputDecoration(labelText: 'Mã OTP')),
        const SizedBox(height: 16),
        TextField(controller: _passwordController, decoration: const InputDecoration(labelText: 'Mật khẩu mới'), obscureText: true),
        const SizedBox(height: 32),
        ElevatedButton(
          onPressed: authState is AuthLoading ? null : _handleResetPassword,
          child: authState is AuthLoading
                ? const SizedBox(width: 24, height: 24, child: CircularProgressIndicator(color: Colors.white, strokeWidth: 2))
                : const Text('Xác nhận'),
        ),
      ],
    );
  }
}

================================================================================
// FILE PATH: lib\features\auth\presentation\screens\login_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/features/auth/application/auth_provider.dart';

class LoginScreen extends ConsumerStatefulWidget {
  const LoginScreen({super.key});

  @override
  ConsumerState<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends ConsumerState<LoginScreen> {
  final _usernameController = TextEditingController();
  // --- ĐÃ SỬA LẠI DÒNG NÀY ---
  final _passwordController = TextEditingController(); 
  bool _obscureText = true;

  @override
  void dispose() {
    _usernameController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  void _handleLogin() {
    if (_usernameController.text.isEmpty || _passwordController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Vui lòng nhập đầy đủ tên đăng nhập và mật khẩu.'),
          backgroundColor: Colors.orange,
        ),
      );
      return;
    }
    ref.read(authProvider.notifier).login(
          _usernameController.text.trim(),
          _passwordController.text.trim(),
        );
  }

  @override
  Widget build(BuildContext context) {
    ref.listen<AuthState>(authProvider, (previous, next) {
      if (next is Authenticated) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Chào mừng ${next.user.firstName}!'), backgroundColor: Colors.green),
        );
        context.go('/');
      } else if (next is AuthError) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(next.message), backgroundColor: Colors.red),
        );
      }
    });

    final authState = ref.watch(authProvider);

    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.close),
          onPressed: () => context.go('/'),
        ),
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.symmetric(horizontal: 24.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              const SizedBox(height: 40),
              Text(
                'Chào mừng trở lại!',
                style: Theme.of(context).textTheme.headlineMedium?.copyWith(fontWeight: FontWeight.bold),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 8),
              Text(
                'Đăng nhập để tiếp tục mua sắm.',
                style: Theme.of(context).textTheme.titleMedium?.copyWith(color: Colors.grey),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 50),
              TextField(
                controller: _usernameController,
                decoration: const InputDecoration(
                  labelText: 'Tên đăng nhập / Email',
                  prefixIcon: Icon(Icons.person_outline),
                ),
                keyboardType: TextInputType.emailAddress,
                textInputAction: TextInputAction.next,
              ),
              const SizedBox(height: 20),
              TextField(
                controller: _passwordController,
                obscureText: _obscureText,
                decoration: InputDecoration(
                  labelText: 'Mật khẩu',
                  prefixIcon: const Icon(Icons.lock_outline),
                  suffixIcon: IconButton(
                    icon: Icon(_obscureText ? Icons.visibility_off : Icons.visibility),
                    onPressed: () {
                      setState(() {
                        _obscureText = !_obscureText;
                      });
                    },
                  ),
                ),
                 textInputAction: TextInputAction.done,
                 onSubmitted: (_) => _handleLogin(),
              ),
              const SizedBox(height: 16),
              Align(
                alignment: Alignment.centerRight,
                child: TextButton(
                  onPressed: () => context.push('/forgot-password'),
                  child: const Text('Quên mật khẩu?'),
                ),
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: authState is AuthLoading ? null : _handleLogin,
                child: authState is AuthLoading
                    ? const SizedBox(width: 24, height: 24, child: CircularProgressIndicator(color: Colors.white, strokeWidth: 2))
                    : const Text('Đăng nhập'),
              ),
              const SizedBox(height: 24),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Text('Chưa có tài khoản?'),
                  TextButton(
                    onPressed: () => context.push('/register'),
                    child: const Text('Đăng ký ngay'),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\auth\presentation\screens\register_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/features/auth/application/auth_provider.dart';

class RegisterScreen extends ConsumerWidget {
  const RegisterScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final fullNameController = TextEditingController();
    final emailController = TextEditingController();
    final passwordController = TextEditingController();
    
    final authState = ref.watch(authProvider);

    ref.listen<AuthState>(authProvider, (previous, next) {
      if (next is AuthError) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(next.message), backgroundColor: Colors.red),
        );
      } else if (next is Unauthenticated && previous is AuthLoading) {
         ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Đăng ký thành công! Vui lòng đăng nhập.'), backgroundColor: Colors.green),
        );
        context.pop();
      }
    });

    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: const Text('Tạo tài khoản'),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            TextField(controller: fullNameController, decoration: const InputDecoration(labelText: 'Họ và Tên')),
            const SizedBox(height: 16),
            TextField(controller: emailController, decoration: const InputDecoration(labelText: 'Email')),
            const SizedBox(height: 16),
            TextField(controller: passwordController, decoration: const InputDecoration(labelText: 'Mật khẩu'), obscureText: true),
            const SizedBox(height: 32),
            ElevatedButton(
              onPressed: authState is AuthLoading ? null : () {
                ref.read(authProvider.notifier).register(
                  username: emailController.text,
                  email: emailController.text,
                  password: passwordController.text,
                  firstName: fullNameController.text.split(' ').first,
                  lastName: fullNameController.text.split(' ').length > 1
                      ? fullNameController.text.split(' ').last
                      : '', 
                );
              },
              child: authState is AuthLoading
                    ? const SizedBox(width: 24, height: 24, child: CircularProgressIndicator(color: Colors.white, strokeWidth: 2))
                    : const Text('Đăng ký'),
            ),
          ],
        ),
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\cart\application\cart_provider.dart
================================================================================

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/auth/application/auth_provider.dart';
import 'package:smartshop_mobile/features/cart/data/cart_repository.dart';

final cartProvider = StateNotifierProvider<CartNotifier, AsyncValue<Cart>>((ref) {
  final authState = ref.watch(authProvider);
  // Chỉ tạo Notifier có khả năng tải dữ liệu khi đã đăng nhập
  if (authState is Authenticated) {
    return CartNotifier(ref)..loadCart();
  }
  // Nếu chưa đăng nhập, trả về Notifier với giỏ hàng rỗng
  return CartNotifier(ref);
});

class CartNotifier extends StateNotifier<AsyncValue<Cart>> {
  final Ref _ref;

  CartNotifier(this._ref) : super(AsyncData(Cart.empty()));

  Future<void> loadCart() async {
    state = const AsyncValue.loading();
    try {
      final cart = await _ref.read(cartRepositoryProvider).getCart();
      state = AsyncValue.data(cart);
    } catch (e, st) {
      state = AsyncValue.error(e, st);
    }
  }

  Future<void> addToCart(String productId, int quantity) async {
    try {
      await _ref.read(cartRepositoryProvider).addToCart(productId, quantity);
      await loadCart(); // Tải lại giỏ hàng để cập nhật UI
    } catch (e) {
      // Có thể hiển thị lỗi ở đây
    }
  }

  Future<void> updateItem(String productId, int quantity) async {
    // Không cần set loading để UI không bị giật khi bấm +/-
    try {
      await _ref.read(cartRepositoryProvider).updateCartItem(productId, quantity);
      await loadCart();
    } catch (e) {
      // Có thể xử lý lỗi và quay lại trạng thái cũ
    }
  }

  Future<void> removeItem(String productId) async {
    try {
      await _ref.read(cartRepositoryProvider).removeFromCart(productId);
      await loadCart();
    } catch(e) {
      //...
    }
  }
}

================================================================================
// FILE PATH: lib\features\cart\data\cart_graphql.dart
================================================================================

class CartGraphQL {
  static const String cartItemFragment = r'''
    fragment CartItemData on CartItem {
      _id
      quantity
      unitPrice
      totalPrice
      product {
        _id
        name
        price
        originalPrice
        images
        stock
        isActive
        category { name }
        brand { name }
      }
    }
  ''';

  static const String getCart = '''
    query GetCart {
      getCart {
        items {
          ...CartItemData
        }
        totalItems
        subtotal
      }
    }
    $cartItemFragment
  ''';

  static const String getCartItemCount = r'''
    query GetCartItemCount {
      getCartItemCount
    }
  ''';

  static const String addToCart = '''
    mutation AddToCart(\$input: AddToCartInput!) {
      addToCart(input: \$input) {
        ...CartItemData
      }
    }
    $cartItemFragment
  ''';
  
  static const String updateCartItem = '''
    mutation UpdateCartItem(\$input: UpdateCartInput!) {
      updateCartItem(input: \$input) {
        ...CartItemData
      }
    }
    $cartItemFragment
  ''';
  
  static const String removeFromCart = r'''
    mutation RemoveFromCart($productId: ID!) {
      removeFromCart(productId: $productId)
    }
  ''';
}

================================================================================
// FILE PATH: lib\features\cart\data\cart_repository.dart
================================================================================

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:graphql_flutter/graphql_flutter.dart';
import 'package:smartshop_mobile/core/api/graphql_client.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/cart/data/cart_graphql.dart';

final cartRepositoryProvider = Provider((ref) => CartRepository(client: ref.watch(graphqlClientProvider)));

class CartRepository {
  final GraphQLClient client;
  CartRepository({required this.client});

  Future<Cart> getCart() async {
    final options = QueryOptions(document: gql(CartGraphQL.getCart), fetchPolicy: FetchPolicy.networkOnly);
    final result = await client.query(options);
    if (result.hasException) throw Exception(result.exception.toString());
    
    final cartJson = result.data?['getCart'];
    return cartJson != null ? Cart.fromJson(cartJson) : Cart.empty();
  }

  Future<void> addToCart(String productId, int quantity) async {
    final options = MutationOptions(
      document: gql(CartGraphQL.addToCart),
      variables: {'input': {'productId': productId, 'quantity': quantity}},
    );
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());
  }

  Future<void> updateCartItem(String productId, int quantity) async {
    final options = MutationOptions(
      document: gql(CartGraphQL.updateCartItem),
      variables: {'input': {'productId': productId, 'quantity': quantity}},
    );
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());
  }
  
  Future<void> removeFromCart(String productId) async {
    final options = MutationOptions(
      document: gql(CartGraphQL.removeFromCart),
      variables: {'productId': productId},
    );
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());
  }
}

================================================================================
// FILE PATH: lib\features\cart\presentation\screens\cart_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:intl/intl.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart' as model;
import 'package:smartshop_mobile/features/cart/application/cart_provider.dart';
import 'package:cached_network_image/cached_network_image.dart';

class CartScreen extends ConsumerWidget {
  const CartScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final cartState = ref.watch(cartProvider);
    final formatCurrency = NumberFormat.currency(locale: 'vi_VN', symbol: '₫');

    return Scaffold(
      appBar: AppBar(
        title: const Text('Giỏ hàng'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.pop(),
        ),
      ),
      body: cartState.when(
        data: (cart) {
          if (cart.items.isEmpty) {
            return _buildEmptyCart(context);
          }
          return Column(
            children: [
              Expanded(
                child: ListView.separated(
                  padding: const EdgeInsets.all(16),
                  itemCount: cart.items.length,
                  separatorBuilder: (context, index) => const SizedBox(height: 16),
                  itemBuilder: (context, index) {
                    final item = cart.items[index];
                    return _buildCartItem(context, ref, item, formatCurrency);
                  },
                ),
              ),
              _buildSummary(context, cart, formatCurrency),
            ],
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (err, stack) => Center(child: Text('Lỗi tải giỏ hàng: ${err.toString()}')),
      ),
    );
  }

  Widget _buildEmptyCart(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.shopping_cart_outlined, size: 80, color: Colors.grey[400]),
          const SizedBox(height: 20),
          Text('Giỏ hàng của bạn trống', style: Theme.of(context).textTheme.headlineSmall),
          const SizedBox(height: 10),
          Text('Hãy thêm sản phẩm để mua sắm nhé!', style: TextStyle(color: Colors.grey[600])),
          const SizedBox(height: 30),
          ElevatedButton(
            onPressed: () => context.go('/'),
            child: const Text('Tiếp tục mua sắm'),
          ),
        ],
      ),
    );
  }

  Widget _buildCartItem(BuildContext context, WidgetRef ref, model.CartItem item, NumberFormat formatCurrency) {
     return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(15),
        border: Border.all(color: Colors.grey[200]!),
      ),
      child: Row(
        children: [
          ClipRRect(
            borderRadius: BorderRadius.circular(10),
            child: CachedNetworkImage(
              imageUrl: item.product.images[0],
              width: 80,
              height: 80,
              fit: BoxFit.cover,
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(item.product.name, style: const TextStyle(fontWeight: FontWeight.bold), maxLines: 2, overflow: TextOverflow.ellipsis),
                const SizedBox(height: 8),
                Text(
                  formatCurrency.format(item.unitPrice),
                  style: TextStyle(color: Theme.of(context).primaryColor, fontWeight: FontWeight.bold),
                ),
              ],
            ),
          ),
          Row(
            children: [
              IconButton(icon: const Icon(Icons.remove_circle_outline), onPressed: () {
                if(item.quantity > 1) {
                  ref.read(cartProvider.notifier).updateItem(item.product.id, item.quantity - 1);
                } else {
                   ref.read(cartProvider.notifier).removeItem(item.product.id);
                }
              }),
              Text(item.quantity.toString(), style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
              IconButton(icon: const Icon(Icons.add_circle_outline), onPressed: () {
                if(item.quantity < item.product.stock) {
                   ref.read(cartProvider.notifier).updateItem(item.product.id, item.quantity + 1);
                }
              }),
            ],
          )
        ],
      ),
    );
  }

  Widget _buildSummary(BuildContext context, model.Cart cart, NumberFormat formatCurrency) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        boxShadow: [BoxShadow(color: Colors.grey.withAlpha(25), spreadRadius: 0, blurRadius: 10)],
      ),
      child: Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text('Tạm tính (${cart.totalItems})', style: Theme.of(context).textTheme.titleMedium),
              Text(formatCurrency.format(cart.subtotal), style: Theme.of(context).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold)),
            ],
          ),
          const SizedBox(height: 20),
          ElevatedButton(
            onPressed: () => context.push('/checkout'),
            style: ElevatedButton.styleFrom(minimumSize: const Size(double.infinity, 50)),
            child: const Text('Tiến hành thanh toán'),
          ),
        ],
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\cart\presentation\screens\checkout_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/features/cart/application/cart_provider.dart';
import 'package:smartshop_mobile/features/profile/data/order_repository.dart';
import 'package:smartshop_mobile/features/auth/application/auth_provider.dart';

class CheckoutScreen extends ConsumerStatefulWidget {
  const CheckoutScreen({super.key});

  @override
  ConsumerState<CheckoutScreen> createState() => _CheckoutScreenState();
}

class _CheckoutScreenState extends ConsumerState<CheckoutScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _phoneController = TextEditingController();
  final _addressController = TextEditingController();
  String _paymentMethod = 'cod';
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    // Dùng addPostFrameCallback để đảm bảo widget đã build xong và có thể truy cập 'ref'
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final authState = ref.read(authProvider);
      if (authState is Authenticated) {
        final user = authState.user;
        // Tìm địa chỉ mặc định trong danh sách địa chỉ của user
        try {
          final defaultAddress = user.addresses.firstWhere((addr) => addr.isDefault);
          _nameController.text = defaultAddress.fullName;
          _phoneController.text = defaultAddress.phone;
          // Kết hợp địa chỉ và thành phố để hiển thị đầy đủ
          _addressController.text = "${defaultAddress.address}, ${defaultAddress.city}";
        } catch (e) {
          // Xử lý trường hợp không tìm thấy địa chỉ mặc định
          print("Không tìm thấy địa chỉ giao hàng mặc định.");
        }
      }
    });
  }

  Future<void> _handlePlaceOrder() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isLoading = true);

      try {
        final customerInfo = {
          'fullName': _nameController.text,
          'phone': _phoneController.text,
          'address': _addressController.text,
          'city': 'Hồ Chí Minh', // Tạm thời hard-code
        };

        final response = await ref.read(orderRepositoryProvider).createOrder(customerInfo, _paymentMethod);
        final String newOrderNumber = response['orderNumber'];
        // Làm mới giỏ hàng (sẽ rỗng sau khi đặt hàng)
        ref.read(cartProvider.notifier).loadCart();

        context.go('/order-success/$newOrderNumber'); 
        // context.pushReplacement('/order-success/$newOrderNumber');
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Đặt hàng thành công!'), backgroundColor: Colors.green),
        );

      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Lỗi: ${e.toString()}'), backgroundColor: Colors.red),
        );
      } finally {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _phoneController.dispose();
    _addressController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Thanh toán')),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16.0),
          children: [
            Text('Thông tin giao hàng', style: Theme.of(context).textTheme.headlineSmall),
            const SizedBox(height: 16),
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  children: [
                    TextFormField(
                      controller: _nameController,
                      decoration: const InputDecoration(labelText: 'Họ và tên'),
                      validator: (value) => value!.isEmpty ? 'Vui lòng nhập họ tên' : null,
                    ),
                    const SizedBox(height: 12),
                    TextFormField(
                      controller: _phoneController,
                      decoration: const InputDecoration(labelText: 'Số điện thoại'),
                      keyboardType: TextInputType.phone,
                      validator: (value) => value!.isEmpty ? 'Vui lòng nhập số điện thoại' : null,
                    ),
                    const SizedBox(height: 12),
                    TextFormField(
                      controller: _addressController,
                      decoration: const InputDecoration(labelText: 'Địa chỉ'),
                       validator: (value) => value!.isEmpty ? 'Vui lòng nhập địa chỉ' : null,
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 24),
            Text('Phương thức thanh toán', style: Theme.of(context).textTheme.headlineSmall),
            const SizedBox(height: 16),
            Card(
              child: Padding(
                padding: const EdgeInsets.all(8.0),
                child: Column(
                  children: [
                    RadioListTile<String>(
                      title: const Text('Thanh toán khi nhận hàng (COD)'),
                      value: 'cod',
                      groupValue: _paymentMethod,
                      onChanged: (value) => setState(() => _paymentMethod = value!),
                    ),
                    RadioListTile<String>(
                      title: const Text('Chuyển khoản ngân hàng'),
                      value: 'bank_transfer',
                      groupValue: _paymentMethod,
                      onChanged: (value) => setState(() => _paymentMethod = value!),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
      bottomNavigationBar: Padding(
        padding: const EdgeInsets.all(16.0),
        child: ElevatedButton(
          onPressed: _isLoading ? null : _handlePlaceOrder,
          child: _isLoading 
              ? const SizedBox(width: 24, height: 24, child: CircularProgressIndicator(color: Colors.white, strokeWidth: 2))
              : const Text('Xác nhận đặt hàng'),
        ),
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\cart\presentation\screens\order_success_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

class OrderSuccessScreen extends StatelessWidget {
  final String orderNumber;
  const OrderSuccessScreen({super.key, required this.orderNumber});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.check_circle_outline, color: Colors.green, size: 100),
              const SizedBox(height: 24),
              Text(
                'Đặt hàng thành công!',
                style: Theme.of(context).textTheme.headlineMedium?.copyWith(fontWeight: FontWeight.bold),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 12),
              Text(
                'Cảm ơn bạn đã mua sắm. Đơn hàng #${orderNumber} đang được xử lý.',
                style: Theme.of(context).textTheme.titleMedium?.copyWith(color: Colors.grey[700]),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 40),
              ElevatedButton(
                onPressed: () => context.push('/my-orders'),
                style: ElevatedButton.styleFrom(minimumSize: const Size(double.infinity, 50)),
                child: const Text('Xem đơn hàng của tôi'),
              ),
              const SizedBox(height: 12),
              OutlinedButton(
                onPressed: () => context.go('/'),
                style: OutlinedButton.styleFrom(minimumSize: const Size(double.infinity, 50)),
                child: const Text('Tiếp tục mua sắm'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\cart\presentation\widgets\cart_icon_widget.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/features/cart/application/cart_provider.dart';

class CartIconWidget extends ConsumerWidget {
  const CartIconWidget({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final cartState = ref.watch(cartProvider);
    final itemCount = cartState.valueOrNull?.totalItems ?? 0;

    return Stack(
      alignment: Alignment.center,
      children: [
        IconButton(
          onPressed: () => context.push('/cart'),
          icon: const Icon(Icons.shopping_cart_outlined),
        ),
        if (itemCount > 0)
          Positioned(
            right: 8,
            top: 8,
            child: Container(
              padding: const EdgeInsets.all(1),
              decoration: BoxDecoration(
                color: Colors.red,
                borderRadius: BorderRadius.circular(10),
              ),
              constraints: const BoxConstraints(minWidth: 16, minHeight: 16),
              child: Text(
                '$itemCount',
                style: const TextStyle(color: Colors.white, fontSize: 10, fontWeight: FontWeight.bold),
                textAlign: TextAlign.center,
              ),
            ),
          ),
      ],
    );
  }
}

================================================================================
// FILE PATH: lib\features\products\application\product_providers.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/products/data/product_repository.dart';
import 'package:smartshop_mobile/features/profile/data/wishlist_repository.dart';


// --- LỚP QUẢN LÝ CÁC THAM SỐ LỌC VÀ SẮP XẾP ---
@immutable
class ProductListFilter {
  final int page;
  final int limit;
  final String orderBy;
  final Map<String, dynamic> condition;

  const ProductListFilter({
    this.page = 1,
    this.limit = 20,
    this.orderBy = 'CREATED_DESC',
    this.condition = const {},
  });

  ProductListFilter copyWith({
    int? page,
    String? orderBy,
    Map<String, dynamic>? condition,
  }) {
    return ProductListFilter(
      page: page ?? this.page,
      limit: this.limit,
      orderBy: orderBy ?? this.orderBy,
      condition: condition ?? this.condition,
    );
  }

  @override
  String toString() {
    return 'ProductListFilter(page: $page, orderBy: $orderBy, condition: $condition)';
  }
}

// --- PROVIDER CHỨA CÁC LỰA CHỌN LỌC CỦA NGƯỜI DÙNG ---
final productFilterOptionsProvider = StateProvider.autoDispose<ProductListFilter>((ref) {
  return const ProductListFilter(); 
});

// --- PROVIDER CHÍNH ĐỂ LẤY DỮ LIỆU SẢN PHẨM ---
final filteredProductsProvider = FutureProvider.autoDispose<List<Product>>((ref) {
  final filter = ref.watch(productFilterOptionsProvider); 
  debugPrint("🔍 [Flutter] Calling API with filter: ${filter.toString()}");
  return ref.watch(productRepositoryProvider).getProducts(
    limit: filter.limit,
    offset: (filter.page - 1) * filter.limit,
    orderBy: filter.orderBy,
    condition: filter.condition.isEmpty ? null : filter.condition,
  );
});


// --- LỚP QUẢN LÝ TRẠNG THÁI CỦA DANH SÁCH SẢN PHẨM ---
@immutable
class PaginatedProductsState {
  final List<Product> products;
  final bool isLoading;
  final bool canLoadMore;
  final String? error;

  const PaginatedProductsState({
    this.products = const [],
    this.isLoading = true,
    this.canLoadMore = true,
    this.error,
  });

  PaginatedProductsState copyWith({
    List<Product>? products,
    bool? isLoading,
    bool? canLoadMore,
    String? error,
  }) {
    return PaginatedProductsState(
      products: products ?? this.products,
      isLoading: isLoading ?? this.isLoading,
      canLoadMore: canLoadMore ?? this.canLoadMore,
      error: error,
    );
  }
}

// --- STATE NOTIFIER ĐỂ XỬ LÝ TOÀN BỘ LOGIC ---
class PaginatedProductsNotifier extends StateNotifier<PaginatedProductsState> {
  final Ref _ref;
  ProductListFilter _currentFilter;

  PaginatedProductsNotifier(this._ref, {required ProductListFilter initialFilter})
      : _currentFilter = initialFilter,
        super(const PaginatedProductsState()) {
    loadFirstPage();
  }

  Future<void> loadFirstPage() async {
    _currentFilter = _currentFilter.copyWith(page: 1);
    state = const PaginatedProductsState(isLoading: true, products: []);
    
    try {
      final newProducts = await _fetchProducts(_currentFilter);
      state = PaginatedProductsState(
        products: newProducts,
        isLoading: false,
        canLoadMore: newProducts.length == _currentFilter.limit,
      );
    } catch (e) {
      state = PaginatedProductsState(isLoading: false, error: e.toString());
    }
  }

  Future<void> loadNextPage() async {
    if (state.isLoading || !state.canLoadMore) return;

    state = state.copyWith(isLoading: true);
    _currentFilter = _currentFilter.copyWith(page: _currentFilter.page + 1);

    try {
      final newProducts = await _fetchProducts(_currentFilter);
      state = state.copyWith(
        products: [...state.products, ...newProducts],
        isLoading: false,
        canLoadMore: newProducts.length == _currentFilter.limit,
      );
    } catch (e) {
      state = state.copyWith(isLoading: false);
    }
  }
  
  void updateFilter(ProductListFilter newFilter) {
    _currentFilter = newFilter;
    loadFirstPage();
  }

  Future<List<Product>> _fetchProducts(ProductListFilter filter) {
    return _ref.read(productRepositoryProvider).getProducts(
          limit: filter.limit,
          offset: (filter.page - 1) * filter.limit,
          orderBy: filter.orderBy,
          condition: filter.condition,
        );
  }
}

// --- PROVIDER CHÍNH CHO DANH SÁCH SẢN PHẨM PHÂN TRANG ---
final paginatedProductsProvider = StateNotifierProvider.autoDispose
    .family<PaginatedProductsNotifier, PaginatedProductsState, ProductListFilter>(
  (ref, initialFilter) {
    return PaginatedProductsNotifier(ref, initialFilter: initialFilter);
  },
);

final productsProvider = FutureProvider.autoDispose.family<List<Product>, ProductListFilter>((ref, filter) {
  final offset = (filter.page - 1) * filter.limit;
  return ref.watch(productRepositoryProvider).getProducts(
    limit: filter.limit, 
    offset: offset,
    orderBy: filter.orderBy,
    condition: filter.condition.isEmpty ? null : filter.condition, // Gửi null nếu condition rỗng
  );
});


// --- CÁC PROVIDER KHÁC ---

// Provider để lấy chi tiết một sản phẩm
final productDetailProvider = FutureProvider.autoDispose.family<Product, String>((ref, productId) {
  return ref.watch(productRepositoryProvider).getProductById(productId);
});

// Provider để lấy danh sách sản phẩm nổi bật
final featuredProductsProvider = FutureProvider.autoDispose<List<Product>>((ref) {
  return ref.watch(productRepositoryProvider).getFeaturedProducts();
});

// Provider để lấy 4 sản phẩm mới nhất cho section "Dành cho bạn"
final latestProductsProvider = FutureProvider.autoDispose<List<Product>>((ref) {
  return ref.watch(productRepositoryProvider).getProducts(
    limit: 4, 
    offset: 0, 
    orderBy: 'CREATED_DESC'
  );
});

// Provider để lấy danh sách danh mục
final categoriesProvider = FutureProvider.autoDispose<List<Category>>((ref) {
  return ref.watch(productRepositoryProvider).getAllCategories();
});

// Provider để lấy danh sách thương hiệu
final brandsProvider = FutureProvider.autoDispose<List<Brand>>((ref) {
  return ref.watch(productRepositoryProvider).getAllBrands();
});

final wishlistProvider = StateNotifierProvider<WishlistNotifier, AsyncValue<List<Product>>>((ref) {
  // Tự động tải wishlist khi provider được khởi tạo
  return WishlistNotifier(ref)..loadWishlist();
});

class WishlistNotifier extends StateNotifier<AsyncValue<List<Product>>> {
  final Ref _ref;
  List<Product> _lastKnownWishlist = [];

  WishlistNotifier(this._ref) : super(const AsyncValue.loading());



  Future<void> loadWishlist() async {
    state = const AsyncValue.loading();
    try {
      final wishlist = await _ref.read(wishlistRepositoryProvider).getMyWishlist();
      _lastKnownWishlist = wishlist; // Lưu lại dữ liệu khi tải thành công
      state = AsyncValue.data(wishlist);
    } catch (e, st) {
      state = AsyncValue.error(e, st);
    }
  }


  Future<void> toggleWishlist(Product product) async {
    print("--- Toggling Wishlist for product: ${product.name} ---");

    final currentWishlist = state.valueOrNull ?? [];
    final isAlreadyIn = currentWishlist.any((p) => p.id == product.id);
    
    print("Is product already in wishlist? $isAlreadyIn");

    final previousState = state;
    
    // Cập nhật UI tạm thời
    if (isAlreadyIn) {
      state = AsyncValue.data(currentWishlist.where((p) => p.id != product.id).toList());
    } else {
      state = AsyncValue.data([...currentWishlist, product]);
    }
    
    try {
      if (isAlreadyIn) {
        print("🚀 Sending API request: removeFromWishlist");
        await _ref.read(wishlistRepositoryProvider).removeFromWishlist(product.id);
        print("✅ API request removeFromWishlist successful");
      } else {
        print("🚀 Sending API request: addToWishlist");
        await _ref.read(wishlistRepositoryProvider).addToWishlist(product.id);
        print("✅ API request addToWishlist successful");
      }
      // Tải lại wishlist từ server để đảm bảo dữ liệu luôn đúng
      await loadWishlist();

    } catch (e, st) {
      print("❌ API request FAILED: ${e.toString()}");
      
      // Nếu có lỗi, quay lại trạng thái cũ VÀ cập nhật state thành trạng thái lỗi
      state = AsyncValue.error(e, st);
      // Giữ lại dữ liệu cũ để UI không bị trống
      state = previousState;
    }
  }

}



================================================================================
// FILE PATH: lib\features\products\application\search_provider.dart
================================================================================

import 'dart:async';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/products/data/product_repository.dart';

// 1. Định nghĩa các trạng thái của việc tìm kiếm
abstract class SearchState {}
class SearchInitial extends SearchState {}
class SearchLoading extends SearchState {}
class SearchLoaded extends SearchState {
  final List<Product> products;
  SearchLoaded(this.products);
}
class SearchError extends SearchState {
  final String message;
  SearchError(this.message);
}

// 2. Tạo StateNotifier
class SearchNotifier extends StateNotifier<SearchState> {
  final Ref _ref;
  Timer? _debounce;

  SearchNotifier(this._ref) : super(SearchInitial());

  void search(String query) {
    // Dùng debounce để tránh gọi API liên tục khi người dùng đang gõ
    if (_debounce?.isActive ?? false) _debounce!.cancel();
    
    _debounce = Timer(const Duration(milliseconds: 500), () async {
      if (query.length < 3) {
        state = SearchInitial(); // Không tìm nếu query quá ngắn
        return;
      }
      
      state = SearchLoading();
      try {
        final products = await _ref.read(productRepositoryProvider).searchProducts(query, limit: 10);
        state = SearchLoaded(products);
      } catch (e) {
        state = SearchError(e.toString());
      }
    });
  }

  void clear() {
    state = SearchInitial();
  }
}

// 3. Tạo Provider
final searchProvider = StateNotifierProvider.autoDispose<SearchNotifier, SearchState>((ref) {
  return SearchNotifier(ref);
});

================================================================================
// FILE PATH: lib\features\products\data\product_graphql.dart
================================================================================

class ProductGraphQL {
  static const String productFragment = r'''
    fragment ProductData on Product {
      _id
      name
      description
      price
      originalPrice
      images
      stock
      isFeatured
      isActive
      category { _id name }
      brand { _id name }
    }
  ''';

  static const String getProducts = '''
    query GetProducts(\$first: Int, \$offset: Int, \$orderBy: ProductsOrderBy, \$condition: ProductConditionInput) {
      products(first: \$first, offset: \$offset, orderBy: \$orderBy, condition: \$condition) {
        nodes {
          ...ProductData
        }
        totalCount
        hasNextPage
      }
    }
    $productFragment
  ''';


  static const String getFeaturedProducts = '''
    query GetFeaturedProducts {
      featuredProducts { ...ProductData }
    }
    $productFragment
  ''';

  // --- QUERY MỚI ---
  static const String getProductById = '''
    query GetProduct(\$id: ID!) {
      product(id: \$id) {
        ...ProductData
      }
    }
    $productFragment
  ''';

  static const String getAllCategories = r'''
    query GetAllCategories {
      allCategories {
        _id
        name
        image
      }
    }
  ''';

  static const String getAllBrands = r'''
    query GetAllBrands {
      allBrands {
        _id
        name
        logo
      }
    }
  ''';

  static const String searchProducts = '''
    query SearchProducts(\$query: String!, \$first: Int) {
      searchProducts(query: \$query, first: \$first) {
        nodes {
          ...ProductData
        }
      }
    }
    $productFragment
  ''';

  
}

================================================================================
// FILE PATH: lib\features\products\data\product_repository.dart
================================================================================

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:graphql_flutter/graphql_flutter.dart';
import 'package:smartshop_mobile/core/api/graphql_client.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/products/data/product_graphql.dart';
import 'review_graphql.dart';
import 'package:smartshop_mobile/core/mock_data/mock_data.dart';
import 'dart:convert';

final productRepositoryProvider = Provider<ProductRepository>((ref) {
  return ProductRepository(client: ref.watch(graphqlClientProvider));
});

class ProductRepository {
  final GraphQLClient client;
  ProductRepository({required this.client});

  // --- HÀM ĐƯỢC CẬP NHẬT LOGIC ---
  Future<List<Product>> getFeaturedProducts() async {
    // 1. Thử lấy sản phẩm nổi bật trước
    final featuredOptions = QueryOptions(
      document: gql(ProductGraphQL.getFeaturedProducts),
      fetchPolicy: FetchPolicy.networkOnly,
    );
    final featuredResult = await client.query(featuredOptions);
    if (featuredResult.hasException) {
      // Nếu có lỗi, vẫn thử bước tiếp theo thay vì báo lỗi ngay
      print("Lỗi khi lấy featuredProducts: ${featuredResult.exception.toString()}");
    }

    final List<dynamic> featuredList = featuredResult.data?['featuredProducts'] ?? [];

    // 2. Nếu có sản phẩm nổi bật, trả về ngay
    if (featuredList.isNotEmpty) {
      print("✅ Đã tìm thấy ${featuredList.length} sản phẩm nổi bật.");
      return featuredList.map((json) => Product.fromJson(json)).toList();
    }
    
    // 3. Nếu không có sản phẩm nổi bật, lấy 8 sản phẩm mới nhất để thay thế
    print("ℹ️ Không có sản phẩm nổi bật, đang lấy sản phẩm mới nhất...");
    final latestOptions = QueryOptions(
      document: gql(ProductGraphQL.getProducts),
      variables: {'first': 8, 'offset': 0}, // Lấy 8 sản phẩm đầu
      fetchPolicy: FetchPolicy.networkOnly,
    );

    final latestResult = await client.query(latestOptions);
    if (latestResult.hasException) {
      throw Exception(latestResult.exception.toString());
    }
    
    final List<dynamic> latestList = latestResult.data?['products']?['nodes'] ?? [];
    print("✅ Đã lấy được ${latestList.length} sản phẩm mới nhất để thay thế.");
    return latestList.map((json) => Product.fromJson(json)).toList();
  }

  Future<Product> getProductById(String id) async {
    final options = QueryOptions(
      document: gql(ProductGraphQL.getProductById),
      variables: {'id': id},
      fetchPolicy: FetchPolicy.cacheAndNetwork,
    );
    final result = await client.query(options);
    if (result.hasException) throw Exception(result.exception.toString());
    final Map<String, dynamic>? productJson = result.data?['product'];
    if (productJson == null) throw Exception('Không tìm thấy sản phẩm');
    return Product.fromJson(productJson);
  }
  // --- HÀM MỚI 1 ---
  Future<List<Category>> getAllCategories() async {
    final options = QueryOptions(
      document: gql(ProductGraphQL.getAllCategories),
      fetchPolicy: FetchPolicy.cacheFirst, // Ưu tiên cache vì danh mục ít thay đổi
    );
    final result = await client.query(options);
    if (result.hasException) throw Exception(result.exception.toString());

    final List<dynamic> list = result.data?['allCategories'] ?? [];
    return list.map((json) => Category.fromJson(json)).toList();
  }

  // --- HÀM MỚI 2 ---
  Future<List<Brand>> getAllBrands() async {
    final options = QueryOptions(
      document: gql(ProductGraphQL.getAllBrands),
      fetchPolicy: FetchPolicy.cacheFirst,
    );
    final result = await client.query(options);
    if (result.hasException) throw Exception(result.exception.toString());

    final List<dynamic> list = result.data?['allBrands'] ?? [];
    return list.map((json) => Brand.fromJson(json)).toList();
  }

  Future<List<Product>> searchProducts(String query, {int? limit}) async {
    final options = QueryOptions(
      document: gql(ProductGraphQL.searchProducts),
      variables: {
        'query': query,
        'first': limit,
      },
      fetchPolicy: FetchPolicy.networkOnly,
    );

    final result = await client.query(options);
    if (result.hasException) {
      throw Exception(result.exception.toString());
    }

    final List<dynamic> list = result.data?['searchProducts']?['nodes'] ?? [];
    return list.map((json) => Product.fromJson(json)).toList();
  }

  Future<List<Product>> getProducts({
    required int limit, 
    required int offset,
    String? orderBy,
    Map<String, dynamic>? condition,
  }) async {
    final variables = {
      'first': limit,
      'offset': offset,
      'orderBy': orderBy,
      // Chỉ thêm condition vào variables nếu nó không null và không rỗng
      if (condition != null && condition.isNotEmpty) 'condition': condition,
    };

    // --- THÊM LOG Ở ĐÂY ---
    print("🚀 [ProductRepository] Calling API 'getProducts' with variables:");
    print(jsonEncode(variables)); // In ra chuỗi JSON để xem chi tiết

    final options = QueryOptions(
      document: gql(ProductGraphQL.getProducts),
      variables: variables,
      fetchPolicy: FetchPolicy.networkOnly,
    );

    final result = await client.query(options);

    if (result.hasException) {
      // In lỗi ra console để gỡ lỗi
      print("❌ [ProductRepository] API Error: ${result.exception.toString()}");
      throw Exception(result.exception.toString());
    }
    
    final List<dynamic> productList = result.data?['products']?['nodes'] ?? [];
    print("✅ [ProductRepository] Received ${productList.length} products.");
    return productList.map((json) => Product.fromJson(json)).toList();
  }



  Future<List<Review>> getProductReviews(String productId) async {
    // TODO: Thay thế bằng lời gọi API thật sự
    await Future.delayed(const Duration(milliseconds: 500)); // Giả lập độ trễ mạng
    return mockReviews; 
  }


  Future<void> createReview({
    required String productId,
    required int rating,
    required String comment,
  }) async {
    // TODO: Thay thế bằng lời gọi API thật sự
    await Future.delayed(const Duration(seconds: 1));
    print('Đã tạo review cho sản phẩm $productId: $rating sao - "$comment"');
    // throw Exception('API tạo review chưa được cài đặt'); // Có thể bật dòng này để test lỗi
  }


}

================================================================================
// FILE PATH: lib\features\products\data\review_graphql.dart
================================================================================

class ReviewGraphQL {
  static const String reviewFragment = r'''
    fragment ReviewData on Review {
      _id
      rating
      comment
      createdAt
      user {
        _id
        firstName
        lastName
        avatarUrl # Giả sử có trường này
      }
    }
  ''';
  
  static const String getProductReviews = '''
    query GetProductReviews(\$productId: ID!) {
      getProductReviews(productId: \$productId) {
        ...ReviewData
      }
    }
    $reviewFragment
  ''';

  static const String createReview = '''
    mutation CreateReview(\$input: CreateReviewInput!) {
      createReview(input: \$input) {
        ...ReviewData
      }
    }
    $reviewFragment
  ''';
}


================================================================================
// FILE PATH: lib\features\products\presentation\screens\explore_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/features/products/application/product_providers.dart';
import 'package:smartshop_mobile/core/utils/icon_mapper.dart';
import 'package:smartshop_mobile/features/products/presentation/widgets/product_card.dart';

class ExploreScreen extends ConsumerWidget {
  const ExploreScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final categoriesAsync = ref.watch(categoriesProvider);
    final brandsAsync = ref.watch(brandsProvider);
    final wishlistAsync = ref.watch(wishlistProvider);

    return Scaffold(
      // AppBar đã được quản lý bởi MainScreen
      body: RefreshIndicator(
        onRefresh: () async {
          // Làm mới tất cả các provider trên trang này
          ref.refresh(categoriesProvider);
          ref.refresh(brandsProvider);
          ref.refresh(wishlistProvider.notifier).loadWishlist();
        },
        child: ListView(
          padding: const EdgeInsets.symmetric(vertical: 16.0),
          children: [
            // 1. Thanh tìm kiếm
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: GestureDetector(
                onTap: () => context.push('/search'),
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                  decoration: BoxDecoration(
                    color: Theme.of(context).inputDecorationTheme.fillColor,
                    borderRadius: BorderRadius.circular(30),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.search, color: Colors.grey[600]),
                      const SizedBox(width: 8),
                      Text('Tìm kiếm sản phẩm...', style: TextStyle(color: Colors.grey[700])),
                    ],
                  ),
                ),
              ),
            ),
            const SizedBox(height: 24),

            // 2. Danh mục
            _buildSectionHeader(context, 'Danh mục sản phẩm', () => context.push('/categories')),
            const SizedBox(height: 16),
            categoriesAsync.when(
              data: (categories) => GridView.builder(
                padding: const EdgeInsets.symmetric(horizontal: 16.0),
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 4,
                  crossAxisSpacing: 16,
                  mainAxisSpacing: 16,
                  childAspectRatio: 0.9,
                ),
                itemCount: categories.length,
                itemBuilder: (context, index) {
                  final category = categories[index];
                  return InkWell(
                    onTap: () => context.push('/products?categoryId=${category.id}'),
                    borderRadius: BorderRadius.circular(15),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        CircleAvatar(
                          radius: 30,
                          backgroundColor: Theme.of(context).primaryColor.withOpacity(0.1),
                          child: Icon(IconMapper.getCategoryIcon(category.name), size: 28, color: Theme.of(context).primaryColor),
                        ),
                        const SizedBox(height: 8),
                        Text(category.name, textAlign: TextAlign.center, maxLines: 2, overflow: TextOverflow.ellipsis, style: const TextStyle(fontSize: 12)),
                      ],
                    ),
                  );
                },
              ),
              loading: () => const Center(child: CircularProgressIndicator()),
              error: (err, stack) => Padding(padding: const EdgeInsets.all(16), child: Text('Lỗi tải danh mục: $err')),
            ),
            const SizedBox(height: 24),
            
            // 3. Thương hiệu
            _buildSectionHeader(context, 'Thương hiệu nổi bật', () => context.push('/brands')),
            const SizedBox(height: 16),
            brandsAsync.when(
              data: (brands) => SizedBox(
                height: 80,
                child: ListView.separated(
                  scrollDirection: Axis.horizontal,
                  padding: const EdgeInsets.symmetric(horizontal: 16.0),
                  itemCount: brands.length,
                  separatorBuilder: (context, index) => const SizedBox(width: 16),
                  itemBuilder: (context, index) {
                    final brand = brands[index];
                    return Card(
                      child: InkWell(
                        onTap: () => context.push('/products?brandId=${brand.id}'),
                        child: SizedBox(
                          width: 120,
                          child: Center(child: Icon(IconMapper.getBrandIcon(brand.name), size: 40, color: Colors.grey[800])),
                        ),
                      ),
                    );
                  },
                ),
              ),
              loading: () => const Center(child: CircularProgressIndicator()),
              error: (err, stack) => Padding(padding: const EdgeInsets.all(16), child: Text('Lỗi tải thương hiệu: $err')),
            ),
            const SizedBox(height: 24),

            // 4. Wishlist
            _buildSectionHeader(context, 'Yêu thích', () => context.push('/wishlist')),
            const SizedBox(height: 16),
            wishlistAsync.when(
              data: (wishlist) {
                if (wishlist.isEmpty) {
                  return const Card(
                    child: Padding(
                      padding: EdgeInsets.all(32.0),
                      child: Center(child: Text('Chưa có sản phẩm yêu thích.')),
                    ),
                  );
                }
                return SizedBox(
                  height: 290,
                  child: ListView.separated(
                    scrollDirection: Axis.horizontal,
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                    itemCount: wishlist.length > 5 ? 5 : wishlist.length,
                    separatorBuilder: (context, index) => const SizedBox(width: 16),
                    itemBuilder: (context, index) {
                      return SizedBox(
                        width: 180,
                        child: ProductCard(product: wishlist[index]),
                      );
                    },
                  ),
                );
              },
              loading: () => const SizedBox(
                height: 290,
                child: Center(child: CircularProgressIndicator()),
              ),
              error: (err, stack) => SizedBox(
                height: 290,
                child: Center(child: Text('Lỗi tải Wishlist: $err')),
              ),
            ),
            const SizedBox(height: 24),
          ],
        ),
      ),
    );
  }
  
  Widget _buildSectionHeader(BuildContext context, String title, VoidCallback onViewAll) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(title, style: Theme.of(context).textTheme.headlineSmall),
          TextButton(onPressed: onViewAll, child: const Text('Xem tất cả')),
        ],
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\products\presentation\screens\filter_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/products/application/product_providers.dart';

final filterDataProvider = FutureProvider.autoDispose((ref) async {
  final results = await Future.wait([
    ref.watch(categoriesProvider.future),
    ref.watch(brandsProvider.future),
  ]);
  return {
    'categories': results[0] as List<Category>,
    'brands': results[1] as List<Brand>,
  };
});

class FilterScreen extends ConsumerStatefulWidget {
  final ProductListFilter initialFilter;
  const FilterScreen({super.key, required this.initialFilter});

  @override
  ConsumerState<FilterScreen> createState() => _FilterScreenState();
}

class _FilterScreenState extends ConsumerState<FilterScreen> {
  late String? _selectedCategory;
  late String? _selectedBrand;
  final _minPriceController = TextEditingController();
  final _maxPriceController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _selectedCategory = widget.initialFilter.condition['category'];
    _selectedBrand = widget.initialFilter.condition['brand'];
    _minPriceController.text = widget.initialFilter.condition['price']?['min']?.toString() ?? '';
    _maxPriceController.text = widget.initialFilter.condition['price']?['max']?.toString() ?? '';
  }

  @override
  void dispose() {
    _minPriceController.dispose();
    _maxPriceController.dispose();
    super.dispose();
  }

  void _applyFilters() {
    final Map<String, dynamic> newCondition = {};
    if (_selectedCategory != null && _selectedCategory!.isNotEmpty) newCondition['category'] = _selectedCategory;
    if (_selectedBrand != null && _selectedBrand!.isNotEmpty) newCondition['brand'] = _selectedBrand;

    final minPrice = double.tryParse(_minPriceController.text);
    final maxPrice = double.tryParse(_maxPriceController.text);
    if (minPrice != null || maxPrice != null) {
      newCondition['price'] = {
        if (minPrice != null) 'min': minPrice,
        if (maxPrice != null) 'max': maxPrice,
      };
    }
    
    // Tạo một object filter mới, giữ nguyên orderBy và trả về
    final newFilter = widget.initialFilter.copyWith(condition: newCondition, page: 1);
    Navigator.of(context).pop(newFilter);
  }
  
  void _clearFilters() {
     // Tạo một object filter đã xóa condition và trả về
     final newFilter = widget.initialFilter.copyWith(condition: {}, page: 1);
     Navigator.of(context).pop(newFilter);
  }

  @override
  Widget build(BuildContext context) {
    final filterDataAsync = ref.watch(filterDataProvider);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Lọc sản phẩm'),
        actions: [
          TextButton(onPressed: _clearFilters, child: const Text('Xóa bộ lọc'))
        ],
      ),
      body: filterDataAsync.when(
        data: (data) {
          final categories = data['categories'] as List<Category>;
          final brands = data['brands'] as List<Brand>;

          return ListView(
            padding: const EdgeInsets.all(16.0),
            children: [
              Text('Danh mục', style: Theme.of(context).textTheme.titleLarge),
              DropdownButton<String>(
                value: _selectedCategory,
                isExpanded: true,
                hint: const Text('Tất cả danh mục'),
                onChanged: (String? newValue) => setState(() => _selectedCategory = newValue),
                items: [
                  const DropdownMenuItem<String>(value: null, child: Text('Tất cả danh mục')),
                  ...categories.map((c) => DropdownMenuItem(value: c.id, child: Text(c.name))),
                ],
              ),
              const SizedBox(height: 24),
              Text('Thương hiệu', style: Theme.of(context).textTheme.titleLarge),
              DropdownButton<String>(
                value: _selectedBrand,
                isExpanded: true,
                hint: const Text('Tất cả thương hiệu'),
                onChanged: (String? newValue) => setState(() => _selectedBrand = newValue),
                items: [
                   const DropdownMenuItem<String>(value: null, child: Text('Tất cả thương hiệu')),
                   ...brands.map((b) => DropdownMenuItem(value: b.id, child: Text(b.name))),
                ],
              ),
              const SizedBox(height: 24),
              Text('Khoảng giá', style: Theme.of(context).textTheme.titleLarge),
              const SizedBox(height: 12),
              Row(
                children: [
                  Expanded(child: TextField(controller: _minPriceController, decoration: const InputDecoration(labelText: 'Từ', prefixText: '₫ '), keyboardType: TextInputType.number)),
                  const SizedBox(width: 16),
                  Expanded(child: TextField(controller: _maxPriceController, decoration: const InputDecoration(labelText: 'Đến', prefixText: '₫ '), keyboardType: TextInputType.number)),
                ],
              ),
            ],
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (err, stack) => Center(child: Text('Lỗi tải dữ liệu lọc: $err')),
      ),
      bottomNavigationBar: Padding(
        padding: const EdgeInsets.all(16.0),
        child: ElevatedButton(onPressed: _applyFilters, child: const Text('Áp dụng')),
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\products\presentation\screens\home_screen.dart
================================================================================

import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:smartshop_mobile/core/constants/api_constants.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/cart/presentation/widgets/cart_icon_widget.dart';
import 'package:smartshop_mobile/features/products/application/product_providers.dart';
import 'package:smartshop_mobile/features/products/presentation/widgets/product_card.dart';

class HomeScreen extends ConsumerStatefulWidget {
  const HomeScreen({super.key});

  @override
  ConsumerState<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends ConsumerState<HomeScreen> {
  final PageController _bannerController = PageController();
  int _currentBannerPage = 0;
  Timer? _bannerTimer;
  
  final List<Map<String, String>> _bannerData = [
    {
      'title': 'iPhone 15 Pro Max',
      'subtitle': 'Khung Titan. Mạnh mẽ. Đẳng cấp.',
      'image': 'https://images.unsplash.com/photo-1695823018812-c684c980ede6?q=80&w=880&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
      'cta': 'Mua ngay',
    },
    {
      'title': 'Siêu Sale Laptop',
      'subtitle': 'Giảm giá đến 30% cho dòng MacBook',
      'image': 'https://images.unsplash.com/photo-1517336714731-489689fd1ca8?q=80&w=1200',
      'cta': 'Xem ngay',
    },
    {
      'title': 'Âm thanh Đỉnh cao',
      'subtitle': 'Tai nghe chống ồn thế hệ mới',
      'image': 'https://images.unsplash.com/photo-1558590987-ed99c5b46f6a?q=80&w=1170&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
      'cta': 'Khám phá',
    },
  ];

  @override
  void initState() {
    super.initState();
    _bannerTimer = Timer.periodic(const Duration(seconds: 5), (Timer timer) {
      if (_currentBannerPage < _bannerData.length - 1) {
        _currentBannerPage++;
      } else {
        _currentBannerPage = 0;
      }
      if (_bannerController.hasClients) {
        _bannerController.animateToPage(
          _currentBannerPage,
          duration: const Duration(milliseconds: 500),
          curve: Curves.easeIn,
        );
      }
    });
  }

  @override
  void dispose() {
    _bannerController.dispose();
    _bannerTimer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final featuredProductsAsync = ref.watch(featuredProductsProvider);
    final forYouProductsAsync = ref.watch(latestProductsProvider);
    final categoriesAsync = ref.watch(categoriesProvider);

    return Scaffold(
      body: RefreshIndicator(
        onRefresh: () async {
          await Future.wait([
            ref.refresh(featuredProductsProvider.future),
            ref.refresh(latestProductsProvider.future),
            ref.refresh(categoriesProvider.future),
          ]);
        },
        child: SingleChildScrollView(
          physics: const AlwaysScrollableScrollPhysics(),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildBannerSlider(context),
              const SizedBox(height: 24),
              
              _buildSectionHeader(context, 'Danh mục', () => context.push('/categories')),
              const SizedBox(height: 8),
              categoriesAsync.when(
                data: (categories) => _buildCategories(categories),
                loading: () => _buildLoadingIndicator(height: 110),
                error: (err, stack) => _buildErrorWidget(err.toString(), height: 110),
              ),

              const SizedBox(height: 24),
              _buildSectionHeader(context, 'Sản phẩm nổi bật', () => context.push('/products?featured=true')),
              const SizedBox(height: 8),
              featuredProductsAsync.when(
                data: (products) => _buildHorizontalProductList(products),
                loading: () => _buildLoadingIndicator(height: 290),
                error: (err, stack) => _buildErrorWidget(err.toString(), height: 290),
              ),

              const SizedBox(height: 24),
              _buildSectionHeader(context, 'Dành cho bạn', () => context.push('/products')),
              const SizedBox(height: 8),
              forYouProductsAsync.when(
                data: (products) => _buildForYouProductsGrid(context, products),
                loading: () => _buildLoadingIndicator(isGrid: true),
                error: (err, stack) => _buildErrorWidget(err.toString()),
              ),
              const SizedBox(height: 24),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildBannerSlider(BuildContext context) {
    return Container(
      height: 220,
      margin: const EdgeInsets.only(top: 16),
      child: Stack(
        alignment: Alignment.bottomCenter,
        children: [
          PageView.builder(
            controller: _bannerController,
            itemCount: _bannerData.length,
            onPageChanged: (index) {
              setState(() {
                _currentBannerPage = index;
              });
            },
            itemBuilder: (context, index) {
              final banner = _bannerData[index];
              return Container(
                margin: const EdgeInsets.symmetric(horizontal: 16.0),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(20),
                  image: DecorationImage(
                    image: CachedNetworkImageProvider(banner['image']!),
                    fit: BoxFit.cover,
                  ),
                ),
                child: Container(
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    gradient: LinearGradient(
                      colors: [Colors.black.withOpacity(0.6), Colors.transparent],
                      begin: Alignment.bottomCenter,
                      end: Alignment.topCenter,
                    ),
                  ),
                  child: Padding(
                    padding: const EdgeInsets.all(24.0),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.end,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          banner['title']!,
                          style: const TextStyle(
                            fontSize: 22,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                            shadows: [Shadow(blurRadius: 10, color: Colors.black54)],
                          ),
                        ),
                        Text(
                          banner['subtitle']!,
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.white.withOpacity(0.9),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              );
            },
          ),
          Positioned(
            bottom: 16,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: List.generate(_bannerData.length, (index) {
                return AnimatedContainer(
                  duration: const Duration(milliseconds: 300),
                  margin: const EdgeInsets.symmetric(horizontal: 4.0),
                  height: 8.0,
                  width: _currentBannerPage == index ? 24.0 : 8.0,
                  decoration: BoxDecoration(
                    color: _currentBannerPage == index ? Colors.white : Colors.white.withOpacity(0.5),
                    borderRadius: BorderRadius.circular(12),
                  ),
                );
              }),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSectionHeader(BuildContext context, String title, VoidCallback onViewAll) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Text(title, style: Theme.of(context).textTheme.headlineSmall),
          TextButton(
            onPressed: onViewAll,
            child: Row(
              children: [
                Text('Xem tất cả', style: TextStyle(color: Theme.of(context).primaryColor)),
                Icon(Icons.arrow_forward_ios, size: 16, color: Theme.of(context).primaryColor),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCategories(List<Category> categories) {
    const String baseUrl = ApiConstants.baseUrl; 
    
    return SizedBox(
      height: 110,
      child: ListView.separated(
        scrollDirection: Axis.horizontal,
        itemCount: categories.length,
        padding: const EdgeInsets.symmetric(horizontal: 16.0),
        separatorBuilder: (context, index) => const SizedBox(width: 16),
        itemBuilder: (context, index) {
          final category = categories[index];
          final imageUrl = (category.imageUrl != null && category.imageUrl!.startsWith('/'))
              ? "$baseUrl${category.imageUrl}"
              : category.imageUrl;

          return SizedBox(
            width: 80,
            child: Column(
              children: [
                Container(
                  width: 70,
                  height: 70,
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.blue.withAlpha(25),
                    borderRadius: BorderRadius.circular(15),
                  ),
                  child: CachedNetworkImage(
                    imageUrl: imageUrl ?? '',
                    color: Colors.blue.shade700,
                    errorWidget: (context, url, error) => const Icon(Icons.image_not_supported, color: Colors.grey),
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  category.name,
                  textAlign: TextAlign.center,
                  maxLines: 1,
                  overflow: TextOverflow.ellipsis,
                  style: const TextStyle(fontSize: 12, fontWeight: FontWeight.w500),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
  
  Widget _buildHorizontalProductList(List<Product> products) {
    if (products.isEmpty) {
      return const SizedBox(height: 290, child: Center(child: Text('Không có sản phẩm nào.')));
    }
    return SizedBox(
      height: 290,
      child: ListView.separated(
        scrollDirection: Axis.horizontal,
        itemCount: products.length,
        padding: const EdgeInsets.symmetric(horizontal: 16.0),
        separatorBuilder: (context, index) => const SizedBox(width: 16),
        itemBuilder: (context, index) {
          return SizedBox(
            width: 180,
            child: ProductCard(product: products[index]),
          );
        },
      ),
    );
  }
  
  Widget _buildLoadingIndicator({double height = 290, bool isGrid = false}) {
    if (isGrid) {
      return GridView.count(
        shrinkWrap: true,
        physics: const NeverScrollableScrollPhysics(),
        padding: const EdgeInsets.symmetric(horizontal: 16.0),
        crossAxisCount: 2,
        childAspectRatio: 0.65,
        crossAxisSpacing: 16,
        mainAxisSpacing: 16,
        children: List.generate(4, (index) => const Card(child: Center(child: CircularProgressIndicator()))),
      );
    }
    return SizedBox(
      height: height,
      child: const Center(child: CircularProgressIndicator()),
    );
  }

  Widget _buildErrorWidget(String error, {double height = 290}) {
    return SizedBox(
      height: height,
      child: Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Text(
            "Lỗi: $error",
            style: const TextStyle(color: Colors.red),
            textAlign: TextAlign.center,
          ),
        ),
      ),
    );
  }

  Widget _buildForYouProductsGrid(BuildContext context, List<Product> products) {
    return GridView.builder(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      padding: const EdgeInsets.symmetric(horizontal: 16.0),
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
        childAspectRatio: 0.65,
        crossAxisSpacing: 16,
        mainAxisSpacing: 16,
      ),
      itemCount: products.length,
      itemBuilder: (context, index) {
        return ProductCard(product: products[index]);
      },
    );
  }
}

================================================================================
// FILE PATH: lib\features\products\presentation\screens\main_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/features/cart/presentation/widgets/cart_icon_widget.dart';

class MainScreen extends StatefulWidget {
  final Widget child;
  const MainScreen({super.key, required this.child});

  @override
  State<MainScreen> createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  // Hàm để tính toán index của BottomNavBar dựa trên đường dẫn URL
  int _calculateSelectedIndex(BuildContext context) {
    final String location = GoRouterState.of(context).matchedLocation;
    if (location.startsWith('/explore')) {
      return 1;
    }
    if (location.startsWith('/my-orders')) {
      return 2;
    }
    if (location.startsWith('/profile')) {
      return 3;
    }
    return 0; // Mặc định là trang chủ
  }

  // Hàm để điều hướng khi bấm vào một item trên BottomNavBar
  void _onItemTapped(int index, BuildContext context) {
    switch (index) {
      case 0:
        context.go('/');
        break;
      case 1:
        context.go('/explore');
        break;
      case 2:
        context.go('/my-orders');
        break;
      case 3:
        context.go('/profile');
        break;
    }
  }

  @override
  Widget build(BuildContext context) {
    final selectedIndex = _calculateSelectedIndex(context);

    // Quyết định AppBar nào sẽ được hiển thị dựa trên tab đang được chọn
    AppBar? buildAppBar() {
      switch (selectedIndex) {
        case 0: // Trang chủ
          return AppBar(
            title: const Text('SmartShop'),
            centerTitle: false,
            actions: [
              IconButton(onPressed: () => context.push('/search'), icon: const Icon(Icons.search)),
              const CartIconWidget(),
            ],
          );
        case 1: // Khám phá
          return AppBar(
            title: const Text('Khám phá'),
            actions: [ const CartIconWidget() ],
          );
        case 2: // Đơn hàng
          return AppBar(
            title: const Text('Đơn hàng của tôi'),
          );
        case 3: // Tài khoản
          return null;
        default:
          return null; // Không hiển thị AppBar cho các trường hợp khác
      }
    }

    return Scaffold(
      appBar: buildAppBar(),
      body: widget.child, // Hiển thị màn hình con được truyền từ router
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.home_outlined),
            activeIcon: Icon(Icons.home),
            label: 'Trang chủ',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.explore_outlined),
            activeIcon: Icon(Icons.explore),
            label: 'Khám phá',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.receipt_long_outlined),
            activeIcon: Icon(Icons.receipt_long),
            label: 'Đơn hàng',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person_outline),
            activeIcon: Icon(Icons.person),
            label: 'Tài khoản',
          ),
        ],
        currentIndex: selectedIndex,
        onTap: (index) => _onItemTapped(index, context),
        type: BottomNavigationBarType.fixed,
        selectedItemColor: Theme.of(context).primaryColor,
        unselectedItemColor: Colors.grey,
        showUnselectedLabels: true,
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\products\presentation\screens\products_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/products/application/product_providers.dart';
import 'package:smartshop_mobile/features/products/presentation/screens/filter_screen.dart';
import 'package:smartshop_mobile/features/products/presentation/widgets/product_card.dart';

class ProductsScreen extends ConsumerStatefulWidget {
  final bool isFeaturedOnly;
  const ProductsScreen({super.key, this.isFeaturedOnly = false});

  @override
  ConsumerState<ProductsScreen> createState() => _ProductsScreenState();
}

class _ProductsScreenState extends ConsumerState<ProductsScreen> {
  // --- STATE CỤC BỘ ---
  late ProductListFilter _filter;
  final ScrollController _scrollController = ScrollController();
  List<Product> _products = [];
  bool _isLoadingMore = false;
  bool _canLoadMore = true;

  @override
  void initState() {
    super.initState();
    // Khởi tạo bộ lọc ban đầu, không gọi ref ở đây
    _filter = ProductListFilter(
      condition: widget.isFeaturedOnly ? {'isFeatured': true} : {},
      orderBy: 'CREATED_DESC',
    );
    _scrollController.addListener(_onScroll);
  }

  void _onScroll() {
    if (_scrollController.position.pixels >= _scrollController.position.maxScrollExtent * 0.9 &&
        !_isLoadingMore && _canLoadMore) {
      _loadNextPage();
    }
  }

  Future<void> _loadNextPage() async {
    setState(() => _isLoadingMore = true);
    
    final nextPageFilter = _filter.copyWith(page: _filter.page + 1);
    
    try {
      // Dùng ref.read để gọi một lần, không theo dõi
      final newProducts = await ref.read(productsProvider(nextPageFilter).future);
      if (mounted) {
        setState(() {
          _products.addAll(newProducts);
          _filter = nextPageFilter; // Cập nhật page hiện tại
          _canLoadMore = newProducts.length == _filter.limit;
          _isLoadingMore = false;
        });
      }
    } catch (e) {
      if (mounted) setState(() => _isLoadingMore = false);
    }
  }

  Future<void> _refresh() async {
    // Khi refresh, cập nhật _filter và để `ref.watch` trong build tự xử lý
    setState(() {
      _filter = _filter.copyWith(page: 1);
    });
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // --- LẮNG NGHE PROVIDER Ở ĐÂY ---
    final productsAsync = ref.watch(productsProvider(_filter));

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.isFeaturedOnly ? 'Sản phẩm nổi bật' : 'Tất cả Sản phẩm'),
        actions: [
          PopupMenuButton<String>(
            icon: const Icon(Icons.sort),
            tooltip: "Sắp xếp",
            onSelected: (String value) {
              setState(() {
                _filter = _filter.copyWith(orderBy: value, page: 1);
              });
            },
            itemBuilder: (BuildContext context) => <PopupMenuEntry<String>>[
              _buildSortMenuItem('CREATED_DESC', 'Mới nhất', _filter.orderBy),
              _buildSortMenuItem('CREATED_ASC', 'Cũ nhất', _filter.orderBy),
              _buildSortMenuItem('PRICE_ASC', 'Giá: Thấp đến Cao', _filter.orderBy),
              _buildSortMenuItem('PRICE_DESC', 'Giá: Cao đến Thấp', _filter.orderBy),
            ],
          ),
          IconButton(
            icon: const Icon(Icons.filter_list),
            tooltip: "Lọc sản phẩm",
            onPressed: () async {
              final newFilter = await context.push<ProductListFilter?>(
                '/filter',
                extra: _filter,
              );
              if (newFilter != null) {
                setState(() {
                  _filter = newFilter;
                });
              }
            },
          ),
        ],
      ),
      body: RefreshIndicator(
        onRefresh: _refresh,
        child: productsAsync.when(
          data: (products) {
            // Khi dữ liệu từ provider thay đổi (lần đầu hoặc sau khi lọc/sắp xếp)
            // cập nhật lại danh sách sản phẩm cục bộ
            if (_filter.page == 1) {
              _products = products;
              _canLoadMore = products.length == _filter.limit;
            }
            if (_products.isEmpty) {
              return ListView(children: const [Center(child: Text('Không có sản phẩm nào phù hợp.'))]);
            }
            return _buildGridView(_products, _isLoadingMore);
          },
          loading: () => const Center(child: CircularProgressIndicator()),
          error: (err, stack) => Center(child: Text('Lỗi: $err')),
        ),
      ),
    );
  }

  PopupMenuItem<String> _buildSortMenuItem(String value, String text, String? currentValue) {
    return PopupMenuItem<String>(
      value: value,
      child: Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [
          Text(text),
          if (value == currentValue) const Icon(Icons.check, color: Colors.blue),
        ],
      ),
    );
  }

  Widget _buildGridView(List<Product> products, bool isLoadingMore) {
    return GridView.builder(
      controller: _scrollController,
      padding: const EdgeInsets.all(16),
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
        childAspectRatio: 0.65,
        crossAxisSpacing: 16,
        mainAxisSpacing: 16,
      ),
      itemCount: products.length + (isLoadingMore ? 1 : 0),
      itemBuilder: (context, index) {
        if (index == products.length) {
          return const Center(child: CircularProgressIndicator());
        }
        return ProductCard(product: products[index]);
      },
    );
  }
}

================================================================================
// FILE PATH: lib\features\products\presentation\screens\product_detail_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:intl/intl.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/core/constants/api_constants.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/products/application/product_providers.dart';
import 'package:smartshop_mobile/features/cart/application/cart_provider.dart';
import 'package:smartshop_mobile/features/products/presentation/widgets/review_list.dart';
import 'package:share_plus/share_plus.dart';

class ProductDetailScreen extends ConsumerStatefulWidget {
  final String productId;
  const ProductDetailScreen({super.key, required this.productId});

  @override
  ConsumerState<ProductDetailScreen> createState() => _ProductDetailScreenState();
}

class _ProductDetailScreenState extends ConsumerState<ProductDetailScreen> with SingleTickerProviderStateMixin {
  int _quantity = 1;
  int _currentImageIndex = 0;
  final PageController _pageController = PageController();
  late TabController _tabController;
  
  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
  }

  @override
  void dispose() {
    _pageController.dispose();
    _tabController.dispose();
    super.dispose();
  }

  String _getImageUrl(String? imagePath) {
    if (imagePath == null || imagePath.isEmpty) return 'https://via.placeholder.com/400';
    if (imagePath.startsWith('http')) return imagePath;
    if (imagePath.startsWith('/')) return "${ApiConstants.baseUrl}$imagePath";
    return "${ApiConstants.baseUrl}/img/$imagePath";
  }

  @override
  Widget build(BuildContext context) {
    final productAsyncValue = ref.watch(productDetailProvider(widget.productId));

    return Scaffold(
      body: productAsyncValue.when(
        data: (product) => _buildProductUI(context, product),
        loading: () => _buildLoadingUI(),
        error: (err, stack) => _buildErrorUI(err.toString()),
      ),
    );
  }

  Widget _buildLoadingUI() {
    return const Center(child: CircularProgressIndicator());
  }
  
  Widget _buildErrorUI(String error) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.error_outline, color: Colors.red, size: 60),
          const SizedBox(height: 16),
          Text('Lỗi tải sản phẩm', style: Theme.of(context).textTheme.headlineSmall),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Text(error, textAlign: TextAlign.center, style: TextStyle(color: Colors.grey[700])),
          ),
          ElevatedButton(
            onPressed: () => ref.refresh(productDetailProvider(widget.productId)),
            child: const Text('Thử lại'),
          )
        ],
      ),
    );
  }
  
  Widget _buildProductUI(BuildContext context, Product product) {
    ref.listen<AsyncValue<List<Product>>>(wishlistProvider, (previous, next) {
      // Nếu trạng thái mới là lỗi, và trạng thái trước đó không phải lỗi
      if (next is AsyncError && previous is! AsyncError) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Lỗi Wishlist: ${next.error.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    });

    
    final formatCurrency = NumberFormat.currency(locale: 'vi_VN', symbol: '₫');
    final wishlistState = ref.watch(wishlistProvider);
    // Lấy danh sách sản phẩm từ trạng thái, nếu có
    final wishlistProducts = wishlistState.valueOrNull ?? [];
    // Kiểm tra xem sản phẩm hiện tại có trong danh sách không
    final isInWishlist = wishlistProducts.any((p) => p.id == product.id);



    return Scaffold(
      body: NestedScrollView(
        headerSliverBuilder: (BuildContext context, bool innerBoxIsScrolled) {
          return <Widget>[
            SliverAppBar(
              expandedHeight: 400.0,
              pinned: true,
              backgroundColor: Colors.white,
              elevation: 1,
              leading: IconButton(
                icon: const Icon(Icons.arrow_back_ios_new),
                onPressed: () => context.pop(),
              ),
              actions: [
                IconButton(
                  onPressed: () {
                    // Gọi toggleWishlist và không cần làm gì thêm
                    ref.read(wishlistProvider.notifier).toggleWishlist(product);
                  },
                  icon: Icon(
                    isInWishlist ? Icons.favorite : Icons.favorite_border,
                    color: isInWishlist ? Colors.red : Colors.grey,
                  ),
                  tooltip: isInWishlist ? 'Xóa khỏi Yêu thích' : 'Thêm vào Yêu thích',
                ),


                IconButton(
                  onPressed: () {
                    // Logic chia sẻ
                    final productUrl = "https://smartshop-react.onrender.com/products/${product.id}";
                    Share.share('Xem sản phẩm tuyệt vời này nè: ${product.name}\n$productUrl');
                  },
                  icon: const Icon(Icons.share_outlined)
                ),

              ],
              flexibleSpace: FlexibleSpaceBar(
                background: Stack(
                  fit: StackFit.expand,
                  children: [
                    PageView.builder(
                      controller: _pageController,
                      itemCount: product.images.length,
                      onPageChanged: (index) {
                        setState(() {
                          _currentImageIndex = index;
                        });
                      },
                      itemBuilder: (context, index) {
                        final imageUrl = _getImageUrl(product.images[index]);
                        return CachedNetworkImage(
                          imageUrl: imageUrl,
                          fit: BoxFit.cover,
                          placeholder: (context, url) =>
                              const Center(child: CircularProgressIndicator()),
                          errorWidget: (context, url, error) =>
                              const Center(child: Icon(Icons.broken_image, size: 50, color: Colors.grey)),
                        );
                      },
                    ),
                    Positioned(
                      bottom: 20,
                      left: 0,
                      right: 0,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: product.images.map((url) {
                          int index = product.images.indexOf(url);
                          return AnimatedContainer(
                            duration: const Duration(milliseconds: 300),
                            width: _currentImageIndex == index ? 24.0 : 8.0,
                            height: 8.0,
                            margin: const EdgeInsets.symmetric(horizontal: 4.0),
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(4),
                              color: _currentImageIndex == index
                                  ? Theme.of(context).primaryColor
                                  : Colors.white.withAlpha(178),
                            ),
                          );
                        }).toList(),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            SliverToBoxAdapter(
              child: Padding(
                padding: const EdgeInsets.fromLTRB(20.0, 20.0, 20.0, 0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      product.name,
                      style: Theme.of(context)
                          .textTheme
                          .headlineMedium
                          ?.copyWith(fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(height: 12),

                    // --- THÔNG TIN MỚI ĐÃ ĐƯỢC THÊM ---
                    Row(
                      children: [
                        Text(
                          'SKU: ${product.id}',
                          style: TextStyle(color: Colors.grey[600], fontSize: 14),
                        ),
                        const SizedBox(width: 4),
                        Text('•', style: TextStyle(color: Colors.grey[600])),
                        const SizedBox(width: 4),
                        Text(
                          'Kho: ${product.stock}',
                          style: TextStyle(
                            color: product.stock > 0 ? Colors.green.shade700 : Colors.red.shade700,
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),

                    Row(
                      children: [
                        Text(
                          formatCurrency.format(product.price),
                          style: Theme.of(context)
                              .textTheme
                              .headlineSmall
                              ?.copyWith(
                                  color: Theme.of(context).primaryColor,
                                  fontWeight: FontWeight.bold),
                        ),
                        const SizedBox(width: 12),
                        if (product.originalPrice != null &&
                            product.originalPrice! > product.price)
                          Text(
                            formatCurrency.format(product.originalPrice),
                            style: const TextStyle(
                                fontSize: 18,
                                decoration: TextDecoration.lineThrough,
                                color: Colors.grey),
                          ),
                      ],
                    ),
                    const SizedBox(height: 24),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text('Số lượng',
                            style: Theme.of(context).textTheme.titleLarge),
                        Container(
                          decoration: BoxDecoration(
                            border: Border.all(color: Colors.grey.shade300),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Row(
                            children: [
                              IconButton(
                                icon: const Icon(Icons.remove),
                                onPressed: () {
                                  if (_quantity > 1) {
                                    setState(() => _quantity--);
                                  }
                                },
                              ),
                              Text('$_quantity',
                                  style: const TextStyle(
                                      fontSize: 18, fontWeight: FontWeight.bold)),
                              IconButton(
                                icon: const Icon(Icons.add),
                                onPressed: () {
                                  if (_quantity < product.stock) {
                                    setState(() => _quantity++);
                                  }
                                },
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
            SliverPersistentHeader(
              delegate: _SliverAppBarDelegate(
                TabBar(
                  controller: _tabController,
                  tabs: const [
                    Tab(text: 'Mô tả'),
                    Tab(text: 'Đánh giá'),
                  ],
                ),
              ),
              pinned: true,
            ),
          ];
        },
        body: TabBarView(
          controller: _tabController,
          children: [
            SingleChildScrollView(
              padding: const EdgeInsets.all(20.0),
              child: Text(product.description, style: Theme.of(context).textTheme.bodyLarge?.copyWith(height: 1.6)),
            ),
            SingleChildScrollView(
              padding: const EdgeInsets.only(bottom: 20),
              child: ReviewList(productId: product.id),
            ),
          ],
        ),
      ),
      bottomNavigationBar: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: ElevatedButton.icon(
            icon: const Icon(Icons.add_shopping_cart, color: Colors.white),
            label: product.stock > 0
                ? const Text('Thêm vào giỏ hàng')
                : const Text('Hết hàng'),
            onPressed: product.stock > 0
                ? () {
                    ref.read(cartProvider.notifier).addToCart(product.id, _quantity);
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text('Đã thêm $_quantity ${product.name} vào giỏ hàng!'),
                        backgroundColor: Colors.green,
                      ),
                    );
                  }
                : null,
            style: product.stock > 0
                ? null
                : ElevatedButton.styleFrom(backgroundColor: Colors.grey),
          ),
        ),
      ),
    );
  }
}

class _SliverAppBarDelegate extends SliverPersistentHeaderDelegate {
  _SliverAppBarDelegate(this._tabBar);
  final TabBar _tabBar;

  @override
  double get minExtent => _tabBar.preferredSize.height;
  @override
  double get maxExtent => _tabBar.preferredSize.height;

  @override
  Widget build(
      BuildContext context, double shrinkOffset, bool overlapsContent) {
    return Container(
      color: Theme.of(context).scaffoldBackgroundColor,
      child: _tabBar,
    );
  }

  @override
  bool shouldRebuild(_SliverAppBarDelegate oldDelegate) {
    return false;
  }
}

================================================================================
// FILE PATH: lib\features\products\presentation\screens\search_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/features/products/application/search_provider.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:smartshop_mobile/core/utils/formatter.dart';
import 'package:smartshop_mobile/core/constants/api_constants.dart'; // Thêm import

class SearchScreen extends ConsumerWidget {
  const SearchScreen({super.key});
  
  // --- THÊM HÀM HELPER NÀY ---
  String _getImageUrl(String? imagePath) {
    if (imagePath == null || imagePath.isEmpty) return '';
    if (imagePath.startsWith('http')) return imagePath;
    if (imagePath.startsWith('/')) return "${ApiConstants.baseUrl}$imagePath";
    return "${ApiConstants.baseUrl}/img/$imagePath";
  }

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final searchState = ref.watch(searchProvider);
    final searchController = TextEditingController();

    return Scaffold(
      appBar: AppBar(
        title: TextField(
          controller: searchController,
          autofocus: true,
          decoration: InputDecoration(
            hintText: 'Tìm kiếm sản phẩm...',
            border: InputBorder.none,
            suffixIcon: IconButton(
              icon: const Icon(Icons.clear),
              onPressed: () {
                searchController.clear();
                ref.read(searchProvider.notifier).clear();
              },
            ),
          ),
          onChanged: (query) {
            ref.read(searchProvider.notifier).search(query);
          },
        ),
      ),
      body: switch (searchState) {
        SearchInitial() => const Center(child: Text('Nhập từ khóa để tìm kiếm (ít nhất 3 ký tự).')),
        SearchLoading() => const Center(child: CircularProgressIndicator()),
        SearchLoaded(products: final products) => products.isEmpty
            ? const Center(child: Text('Không tìm thấy sản phẩm nào.'))
            : ListView.builder(
                itemCount: products.length,
                itemBuilder: (context, index) {
                  final product = products[index];
                  // --- SỬA LẠI CÁCH LẤY URL ---
                  final imageUrl = _getImageUrl(product.images.isNotEmpty ? product.images[0] : null);

                  return ListTile(
                    leading: CachedNetworkImage(
                      imageUrl: imageUrl,
                      width: 50,
                      height: 50,
                      fit: BoxFit.cover,
                      errorWidget: (context, url, error) => const Icon(Icons.image_not_supported),
                      placeholder: (context, url) => const Center(child: CircularProgressIndicator(strokeWidth: 2)),
                    ),
                    title: Text(product.name),
                    subtitle: Text(AppFormatters.currency.format(product.price)),
                    onTap: () => context.push('/product/${product.id}'),
                  );
                },
              ),
        SearchError(message: final message) => Center(child: Text('Lỗi: $message')),
        _ => const Center(child: Text('Trạng thái không xác định.')),
      },
    );
  }
}

================================================================================
// FILE PATH: lib\features\products\presentation\screens\write_review_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:smartshop_mobile/features/products/data/product_repository.dart';

class WriteReviewScreen extends ConsumerStatefulWidget {
  final String productId;
  const WriteReviewScreen({super.key, required this.productId});

  @override
  ConsumerState<WriteReviewScreen> createState() => _WriteReviewScreenState();
}

class _WriteReviewScreenState extends ConsumerState<WriteReviewScreen> {
  int _rating = 0;
  final _commentController = TextEditingController();

  void _submitReview() async {
    if (_rating == 0) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Vui lòng chọn số sao.')));
      return;
    }
    
    try {
      await ref.read(productRepositoryProvider).createReview(
        productId: widget.productId,
        rating: _rating,
        comment: _commentController.text,
      );
      Navigator.of(context).pop(true); // Trả về true để báo hiệu đã submit thành công
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Lỗi: $e')));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Viết đánh giá')),
      body: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          Text('Bạn đánh giá sản phẩm này thế nào?', style: Theme.of(context).textTheme.titleLarge),
          const SizedBox(height: 16),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: List.generate(5, (index) => IconButton(
              icon: Icon(
                index < _rating ? Icons.star : Icons.star_border,
                color: Colors.amber,
                size: 40,
              ),
              onPressed: () => setState(() => _rating = index + 1),
            )),
          ),
          const SizedBox(height: 24),
          TextField(
            controller: _commentController,
            decoration: const InputDecoration(
              labelText: 'Chia sẻ cảm nhận của bạn',
              border: OutlineInputBorder(),
            ),
            maxLines: 5,
          ),
          const SizedBox(height: 24),
          ElevatedButton(
            onPressed: _submitReview,
            child: const Text('Gửi đánh giá'),
          ),
        ],
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\products\presentation\widgets\product_card.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:intl/intl.dart';
import 'package:smartshop_mobile/core/constants/api_constants.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:go_router/go_router.dart';

class ProductCard extends StatelessWidget {
  final Product product;
  const ProductCard({super.key, required this.product});

  // HÀM HELPER ĐỂ TẠO URL HÌNH ẢNH AN TOÀN
  String _getImageUrl(String? imagePath) {
    if (imagePath == null || imagePath.isEmpty) {
      return 'https://via.placeholder.com/200';
    }
    if (imagePath.startsWith('http')) {
      return imagePath;
    }
    // SỬA Ở ĐÂY
    return "${ApiConstants.baseUrl}$imagePath";
  }


  @override
  Widget build(BuildContext context) {
    final formatCurrency = NumberFormat.currency(locale: 'vi_VN', symbol: '₫');
    final imageUrl = _getImageUrl(product.images.isNotEmpty ? product.images[0] : null);

    return Card(
      child: InkWell(
        borderRadius: BorderRadius.circular(15),
        onTap: () {
          context.push('/product/${product.id}');
        },
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Expanded(
              flex: 5,
              child: Stack(
                fit: StackFit.expand,
                children: [
                  ClipRRect(
                    borderRadius: const BorderRadius.vertical(top: Radius.circular(15)),
                    child: CachedNetworkImage(
                      imageUrl: imageUrl,
                      fit: BoxFit.cover,
                      placeholder: (context, url) => Center(
                          child: CircularProgressIndicator(
                        strokeWidth: 2,
                      )),
                      errorWidget: (context, url, error) =>
                          const Icon(Icons.error, color: Colors.red),
                    ),
                  ),
                  if (product.originalPrice != null &&
                      product.originalPrice! > product.price)
                    Positioned(
                      top: 8,
                      right: 8,
                      child: Container(
                        padding: const EdgeInsets.symmetric(
                            horizontal: 6, vertical: 2),
                        decoration: BoxDecoration(
                          color: Colors.red[600],
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: Text(
                          '-${((product.originalPrice! - product.price) / product.originalPrice! * 100).toStringAsFixed(0)}%',
                          style: const TextStyle(
                              color: Colors.white,
                              fontSize: 10,
                              fontWeight: FontWeight.bold),
                        ),
                      ),
                    ),
                ],
              ),
            ),
            Expanded(
              flex: 4,
              child: Padding(
                padding: const EdgeInsets.all(12.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      product.name,
                      style: Theme.of(context)
                          .textTheme
                          .bodyMedium
                          ?.copyWith(fontWeight: FontWeight.bold, height: 1.2),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        if (product.originalPrice != null &&
                            product.originalPrice! > product.price)
                          Text(
                            formatCurrency.format(product.originalPrice),
                            style: const TextStyle(
                              decoration: TextDecoration.lineThrough,
                              color: Colors.grey,
                              fontSize: 12,
                            ),
                          ),
                        Text(
                          formatCurrency.format(product.price),
                          style: TextStyle(
                            color: Theme.of(context).primaryColor,
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                          ),
                        ),
                      ],
                    ),
                    Row(
                      children: [
                        const Icon(Icons.star,
                            color: Colors.amber, size: 14),
                        const SizedBox(width: 4),
                        Text(
                          '${product.averageRating} (${product.totalReviews})',
                          style: Theme.of(context).textTheme.bodySmall,
                        ),
                      ],
                    )
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\products\presentation\widgets\review_list.dart
================================================================================

import 'package:flutter/material.dart';
// Bỏ các import của Riverpod và provider đi

class ReviewList extends StatelessWidget {
  final String productId;
  const ReviewList({super.key, required this.productId});

  @override
  Widget build(BuildContext context) {
    // Tạm thời hiển thị một thông báo thay vì gọi API
    return const Center(
      child: Padding(
        padding: EdgeInsets.all(20.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.rate_review_outlined, size: 60, color: Colors.grey),
            SizedBox(height: 16),
            Text(
              'Tính năng đánh giá đang được phát triển',
              style: TextStyle(fontSize: 16, color: Colors.grey),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\profile\application\order_providers.dart
================================================================================

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/profile/data/order_repository.dart';

// Provider để lấy danh sách tất cả đơn hàng
final myOrdersProvider = FutureProvider.autoDispose<List<Order>>((ref) {
  return ref.watch(orderRepositoryProvider).getMyOrders();
});

// Provider để lấy chi tiết một đơn hàng
final orderDetailProvider = FutureProvider.autoDispose.family<Order, String>((ref, orderNumber) {
  return ref.watch(orderRepositoryProvider).getOrderDetails(orderNumber);
});

================================================================================
// FILE PATH: lib\features\profile\application\profile_provider.dart
================================================================================

// FILE PATH: lib/features/profile/application/profile_provider.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/auth/application/auth_provider.dart';
import 'package:smartshop_mobile/features/profile/data/profile_repository.dart';
import 'package:image_picker/image_picker.dart';

// Định nghĩa các trạng thái
abstract class EditProfileState {}
class EditProfileInitial extends EditProfileState {}
class EditProfileLoading extends EditProfileState {}
class EditProfileSuccess extends EditProfileState {
  final String message;
  EditProfileSuccess(this.message);
}
class EditProfileError extends EditProfileState {
  final String message;
  EditProfileError(this.message);
}

// StateNotifier
class EditProfileNotifier extends StateNotifier<EditProfileState> {
  final Ref _ref;
  EditProfileNotifier(this._ref) : super(EditProfileInitial());

  Future<void> updateProfile({
    required String userId,
    required String firstName,
    required String lastName
  }) async {
    state = EditProfileLoading();
    try {
      final updatedUser = await _ref.read(profileRepositoryProvider).updateProfile(
        userId: userId,
        firstName: firstName,
        lastName: lastName,
      );

      // Cập nhật lại AuthProvider để thay đổi thông tin user trên toàn ứng dụng
      _ref.read(authProvider.notifier).updateUserData(updatedUser);

      state = EditProfileSuccess('Cập nhật thông tin thành công!');
    } catch (e) {
      state = EditProfileError(e.toString().replaceFirst("Exception: ", ""));
    }
  }

  Future<void> updateAvatar(XFile imageFile) async {
    state = EditProfileLoading(); // Dùng chung state loading
    try {
      final updatedUser = await _ref.read(profileRepositoryProvider).updateAvatar(imageFile);

      // Cập nhật lại AuthProvider để thay đổi avatar trên toàn ứng dụng
      _ref.read(authProvider.notifier).updateUserData(updatedUser);

      state = EditProfileSuccess('Cập nhật avatar thành công!');
    } catch (e) {
      state = EditProfileError(e.toString().replaceFirst("Exception: ", ""));
    }
  }
}

// Provider
final editProfileProvider = StateNotifierProvider.autoDispose<EditProfileNotifier, EditProfileState>((ref) {
  return EditProfileNotifier(ref);
});

================================================================================
// FILE PATH: lib\features\profile\data\address_graphql.dart
================================================================================

// FILE PATH: lib/features/profile/data/address_graphql.dart

class AddressGraphQL {
  // Fragment giúp tái sử dụng, đảm bảo luôn trả về UserInfo đầy đủ
  static const String userFragmentForAddress = r'''
    fragment UserDataWithAddresses on UserInfo {
      _id, username, email, firstName, lastName, role, avatarUrl
      addresses { _id, fullName, phone, address, city, isDefault }
    }
  ''';

  static const String addAddress = '''
    mutation AddAddress(\$input: AddressInput!) {
      addAddress(input: \$input) { ...UserDataWithAddresses }
    }
    $userFragmentForAddress
  ''';

  static const String updateAddress = '''
    mutation UpdateAddress(\$addressId: ID!, \$input: AddressInput!) {
      updateAddress(addressId: \$addressId, input: \$input) { ...UserDataWithAddresses }
    }
    $userFragmentForAddress
  ''';

  static const String deleteAddress = '''
    mutation DeleteAddress(\$addressId: ID!) {
      deleteAddress(addressId: \$addressId) { ...UserDataWithAddresses }
    }
    $userFragmentForAddress
  ''';

  static const String setDefaultAddress = '''
    mutation SetDefaultAddress(\$addressId: ID!) {
      setDefaultAddress(addressId: \$addressId) { ...UserDataWithAddresses }
    }
    $userFragmentForAddress
  ''';
}

================================================================================
// FILE PATH: lib\features\profile\data\order_graphql.dart
================================================================================

class OrderGraphQL {
  // Fragment cho thông tin cơ bản của một đơn hàng
  static const String orderFragment = r'''
    fragment OrderDetails on Order {
      _id
      orderNumber
      status
      paymentMethod
      paymentStatus
      totalAmount
      orderDate
      customerInfo {
        fullName
        phone
        address
        city
      }
      items {
        _id
        productName
        productSku
        quantity
        unitPrice
        totalPrice
        product {
          _id
          images
        }
        productSnapshot {
          images
        }
      }
    }
  ''';

  // Mutation để tạo đơn hàng từ giỏ hàng
  static const String createOrderFromCart = '''
    mutation CreateOrderFromCart(\$input: CreateOrderInput!) {
      createOrderFromCart(input: \$input) {
        orderNumber
        _id
      }
    }
  ''';

  // Query để lấy tất cả đơn hàng của người dùng hiện tại
  static const String getMyOrders = '''
    query GetMyOrders(\$first: Int, \$offset: Int) {
      getMyOrders(first: \$first, offset: \$offset) {
        nodes {
          ...OrderDetails
        }
        totalCount
      }
    }
    $orderFragment
  ''';

  // Query để lấy chi tiết một đơn hàng
  static const String getMyOrder = '''
    query GetMyOrder(\$orderNumber: String!) {
      getMyOrder(orderNumber: \$orderNumber) {
        ...OrderDetails
      }
    }
    $orderFragment
  ''';

  static const String cancelOrder = r'''
    mutation CancelOrder($orderNumber: String!, $reason: String) {
      cancelOrder(orderNumber: $orderNumber, reason: $reason) {
        _id
        status
      }
    }
  ''';

}

================================================================================
// FILE PATH: lib\features\profile\data\order_repository.dart
================================================================================

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:graphql_flutter/graphql_flutter.dart';
import 'package:smartshop_mobile/core/api/graphql_client.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/profile/data/order_graphql.dart';

final orderRepositoryProvider = Provider((ref) => OrderRepository(client: ref.watch(graphqlClientProvider)));

class OrderRepository {
  final GraphQLClient client;
  OrderRepository({required this.client});

  Future<Map<String, dynamic>> createOrder(Map<String, dynamic> customerInfo, String paymentMethod) async {
    final options = MutationOptions(
      document: gql(OrderGraphQL.createOrderFromCart),
      variables: {
        'input': {
          'customerInfo': customerInfo,
          'paymentMethod': paymentMethod,
        }
      },
    );

    final result = await client.mutate(options);
    if (result.hasException) {
      throw Exception(result.exception.toString());
    }

    final response = result.data?['createOrderFromCart'];
    if (response == null) {
      throw Exception('Tạo đơn hàng thất bại');
    }
    return response;
  }
  Future<List<Order>> getMyOrders() async {
    final options = QueryOptions(
      document: gql(OrderGraphQL.getMyOrders),
      fetchPolicy: FetchPolicy.networkOnly,
    );
    final result = await client.query(options);

    if (result.hasException) {
      throw Exception(result.exception.toString());
    }

    final List<dynamic> orderList = result.data?['getMyOrders']?['nodes'] ?? [];
    return orderList.map((json) => Order.fromJson(json)).toList();
  }

  Future<Order> getOrderDetails(String orderNumber) async {
    final options = QueryOptions(
      document: gql(OrderGraphQL.getMyOrder),
      variables: {'orderNumber': orderNumber},
      fetchPolicy: FetchPolicy.networkOnly,
    );
    final result = await client.query(options);

    if (result.hasException) {
      throw Exception(result.exception.toString());
    }
    
    final orderJson = result.data?['getMyOrder'];
    if (orderJson == null) {
      throw Exception('Không tìm thấy đơn hàng');
    }

    return Order.fromJson(orderJson);
  }

  Future<void> cancelOrder(String orderNumber) async {
    final options = MutationOptions(
      document: gql(OrderGraphQL.cancelOrder),
      variables: {
        'orderNumber': orderNumber,
        'reason': 'Khách hàng yêu cầu hủy', // Lý do mặc định
      },
    );

    final result = await client.mutate(options);
    if (result.hasException) {
      throw Exception(result.exception.toString());
    }

    final response = result.data?['cancelOrder'];
    if (response == null) {
      throw Exception('Hủy đơn hàng thất bại');
    }
  }

}

================================================================================
// FILE PATH: lib\features\profile\data\profile_graphql.dart
================================================================================

// FILE PATH: lib/features/profile/data/profile_graphql.dart

class ProfileGraphQL {
  static const String updateProfile = r'''
    mutation UpdateProfile($input: UpdateProfileInput!) {
      updateProfile(input: $input) {
        _id
        username
        email
        firstName
        lastName
        role
        avatarUrl
      }
    }
  ''';

  static const String updateAvatar = r'''
    mutation UpdateAvatar($file: File!) {
      updateAvatar(file: $file) {
        _id
        username
        email
        firstName
        lastName
        role
        avatarUrl
      }
    }
  ''';
}

================================================================================
// FILE PATH: lib\features\profile\data\profile_repository.dart
================================================================================

// FILE PATH: lib/features/profile/data/profile_repository.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:graphql_flutter/graphql_flutter.dart';
import 'package:http/http.dart' as http;
import 'package:http_parser/http_parser.dart';
import 'package:image_picker/image_picker.dart';
import 'package:smartshop_mobile/core/api/graphql_client.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/profile/data/profile_graphql.dart';
import 'package:smartshop_mobile/features/profile/data/address_graphql.dart';

// Provider cho repository (không thay đổi)
final profileRepositoryProvider = Provider((ref) {
  return ProfileRepository(client: ref.watch(graphqlClientProvider));
});

class ProfileRepository {
  final GraphQLClient client;
  ProfileRepository({required this.client});

  // Address
  Future<User> addAddress(Map<String, dynamic> addressData) async {
    final options = MutationOptions(
      document: gql(AddressGraphQL.addAddress),
      variables: {'input': addressData},
    );
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());
    return User.fromJson(result.data!['addAddress']);
  }

  Future<User> updateAddress(String addressId, Map<String, dynamic> addressData) async {
    final options = MutationOptions(
      document: gql(AddressGraphQL.updateAddress),
      variables: {'addressId': addressId, 'input': addressData},
    );
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());
    return User.fromJson(result.data!['updateAddress']);
  }

  Future<User> deleteAddress(String addressId) async {
    final options = MutationOptions(
      document: gql(AddressGraphQL.deleteAddress),
      variables: {'addressId': addressId},
    );
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());
    return User.fromJson(result.data!['deleteAddress']);
  }

  Future<User> setDefaultAddress(String addressId) async {
    final options = MutationOptions(
      document: gql(AddressGraphQL.setDefaultAddress),
      variables: {'addressId': addressId},
    );
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());
    return User.fromJson(result.data!['setDefaultAddress']);
  }


  // ===== THAY THẾ NỘI DUNG CỦA HÀM NÀY =====
  Future<User> updateProfile({
    required String userId, // userId không còn cần thiết cho API thật vì server đọc từ token
    required String firstName,
    required String lastName
  }) async {

    // 1. Định nghĩa mutation options
    final options = MutationOptions(
      document: gql(ProfileGraphQL.updateProfile), // [cite: 544]
      variables: {
        'input': {
          'firstName': firstName,
          'lastName': lastName,
        }
      },
      // Thêm fetchPolicy để đảm bảo dữ liệu luôn được làm mới
      fetchPolicy: FetchPolicy.networkOnly,
    );

    // 2. Gửi mutation đến server
    final result = await client.mutate(options);

    // 3. Xử lý lỗi nếu có
    if (result.hasException) {
      throw Exception(result.exception.toString());
    }

    // 4. Lấy dữ liệu trả về và chuyển đổi thành đối tượng User
    final data = result.data?['updateProfile'];
    
    if (data == null) {
      throw Exception('Cập nhật thất bại, không nhận được dữ liệu trả về.');
    }

    final user = User.fromJson(data);
    print('[REPO] updateProfile tạo User object với avatarUrl: ${user.avatarUrl}');

    return user;
  }

  Future<User> updateAvatar(XFile imageFile) async {
    // 1. Chuyển XFile sang MultipartFile để gửi đi
    final bytes = await imageFile.readAsBytes();
    final multipartFile = http.MultipartFile.fromBytes(
      'file', // Tên field này phải khớp với server
      bytes,
      filename: imageFile.name,
      contentType: MediaType('image', imageFile.name.split('.').last),
    );

    // 2. Định nghĩa mutation options
    final options = MutationOptions(
      document: gql(ProfileGraphQL.updateAvatar),
      variables: {
        'file': multipartFile,
      },
      fetchPolicy: FetchPolicy.networkOnly,
    );

    // 3. Gửi mutation
    final result = await client.mutate(options);

    if (result.hasException) {
      throw Exception(result.exception.toString());
    }

    final data = result.data?['updateAvatar'];
    if (data == null) {
      throw Exception('Cập nhật avatar thất bại.');
    }

    final user = User.fromJson(data);
    print('[REPO] updateAvatar tạo User object với avatarUrl: ${user.avatarUrl}');

    return user;
  }
}

================================================================================
// FILE PATH: lib\features\profile\data\wishlist_graphql.dart
================================================================================

class WishlistGraphQL {
  static const String productFragmentForWishlist = r'''
    fragment ProductDataForWishlist on Product {
      _id
      name
      price
      originalPrice
      images
      stock
      category { _id name }
      brand { _id name }
    }
  ''';
  
  static const String wishlistItemFragment = r'''
    fragment WishlistItemData on WishlistItem {
      _id
      product {
        ...ProductDataForWishlist
      }
    }
  ''';

  // --- SỬA LẠI CÁC CÂU LỆNH SỬ DỤNG FRAGMENT ---

  // Kết hợp query và các fragment cần thiết
  static const String getMyWishlist = '''
    query GetMyWishlist {
      myWishlist {
        ...WishlistItemData
      }
    }
    $wishlistItemFragment
    $productFragmentForWishlist
  ''';
  
  static const String isProductInWishlist = r'''
    query IsProductInWishlist($productId: ID!) {
      isProductInWishlist(productId: $productId)
    }
  ''';

  // Kết hợp mutation và các fragment cần thiết
  static const String addToWishlist = '''
    mutation AddToWishlist(\$productId: ID!) {
      addToWishlist(productId: \$productId) {
        ...WishlistItemData
      }
    }
    $wishlistItemFragment
    $productFragmentForWishlist
  ''';
  
  static const String removeFromWishlist = r'''
    mutation RemoveFromWishlist($productId: ID!) {
      removeFromWishlist(productId: $productId)
    }
  ''';
}

================================================================================
// FILE PATH: lib\features\profile\data\wishlist_repository.dart
================================================================================

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:graphql_flutter/graphql_flutter.dart';
import 'package:smartshop_mobile/core/api/graphql_client.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/profile/data/wishlist_graphql.dart';

final wishlistRepositoryProvider = Provider((ref) => WishlistRepository(client: ref.watch(graphqlClientProvider)));

class WishlistRepository {
  final GraphQLClient client;
  WishlistRepository({required this.client});

  Future<List<Product>> getMyWishlist() async {
    final options = QueryOptions(document: gql(WishlistGraphQL.getMyWishlist), fetchPolicy: FetchPolicy.networkOnly);
    final result = await client.query(options);
    if (result.hasException) throw Exception(result.exception.toString());
    
    final List<dynamic> items = result.data?['myWishlist'] ?? [];
    return items.map((item) => Product.fromJson(item['product'])).toList();
  }
  
  Future<void> addToWishlist(String productId) async {
    final options = MutationOptions(document: gql(WishlistGraphQL.addToWishlist), variables: {'productId': productId});
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());
  }

  Future<void> removeFromWishlist(String productId) async {
    final options = MutationOptions(document: gql(WishlistGraphQL.removeFromWishlist), variables: {'productId': productId});
    final result = await client.mutate(options);
    if (result.hasException) throw Exception(result.exception.toString());
  }
  
  Future<bool> isProductInWishlist(String productId) async {
    final options = QueryOptions(document: gql(WishlistGraphQL.isProductInWishlist), variables: {'productId': productId});
    final result = await client.query(options);
    if (result.hasException) return false;
    return result.data?['isProductInWishlist'] ?? false;
  }
}

================================================================================
// FILE PATH: lib\features\profile\presentation\screens\address_screen.dart
================================================================================

// FILE PATH: lib/features/profile/presentation/screens/address_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/auth/application/auth_provider.dart';
import 'package:smartshop_mobile/features/profile/data/profile_repository.dart';

class AddressScreen extends ConsumerWidget {
  const AddressScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final authState = ref.watch(authProvider);

    if (authState is! Authenticated) {
      return const Scaffold(body: Center(child: Text("Vui lòng đăng nhập.")));
    }

    final addresses = authState.user.addresses;

    return Scaffold(
      appBar: AppBar(title: const Text('Địa chỉ của tôi')),
      body: addresses.isEmpty
          ? const Center(child: Text("Bạn chưa có địa chỉ nào."))
          : ListView.builder(
              padding: const EdgeInsets.all(8),
              itemCount: addresses.length,
              itemBuilder: (context, index) {
                final address = addresses[index];
                return Card(
                  child: ListTile(
                    title: Text(address.fullName, style: const TextStyle(fontWeight: FontWeight.bold)),
                    subtitle: Text('${address.address}, ${address.city}\n${address.phone}'),
                    isThreeLine: true,
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        if (address.isDefault) const Chip(label: Text('Mặc định'), backgroundColor: Colors.green),
                        IconButton(
                          icon: const Icon(Icons.edit),
                          onPressed: () => context.push('/add-edit-address', extra: address),
                        ),
                      ],
                    ),
                    onTap: () async { // Đặt làm mặc định
                      if (!address.isDefault) {
                        try {
                          final updatedUser = await ref.read(profileRepositoryProvider).setDefaultAddress(address.id);
                          ref.read(authProvider.notifier).updateUserData(updatedUser);
                        } catch (e) { /* Handle error */ }
                      }
                    },
                  ),
                );
              },
            ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => context.push('/add-edit-address'),
        child: const Icon(Icons.add),
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\profile\presentation\screens\add_edit_address_screen.dart
================================================================================

// FILE PATH: lib/features/profile/presentation/screens/add_edit_address_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/features/auth/application/auth_provider.dart';
import 'package:smartshop_mobile/features/profile/data/profile_repository.dart';

class AddEditAddressScreen extends ConsumerStatefulWidget {
  final Address? address; // null nếu là thêm mới
  const AddEditAddressScreen({super.key, this.address});

  @override
  ConsumerState<AddEditAddressScreen> createState() => _AddEditAddressScreenState();
}

class _AddEditAddressScreenState extends ConsumerState<AddEditAddressScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _phoneController = TextEditingController();
  final _addressController = TextEditingController();
  final _cityController = TextEditingController();
  bool _isDefault = false;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    if (widget.address != null) {
      _nameController.text = widget.address!.fullName;
      _phoneController.text = widget.address!.phone;
      _addressController.text = widget.address!.address;
      _cityController.text = widget.address!.city;
      _isDefault = widget.address!.isDefault;
    }
  }

  Future<void> _onSave() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isLoading = true);
      final messenger = ScaffoldMessenger.of(context);
      try {
        final addressData = {
          'fullName': _nameController.text.trim(),
          'phone': _phoneController.text.trim(),
          'address': _addressController.text.trim(),
          'city': _cityController.text.trim(),
          'isDefault': _isDefault,
        };

        final User updatedUser;
        if (widget.address == null) {
          updatedUser = await ref.read(profileRepositoryProvider).addAddress(addressData);
        } else {
          updatedUser = await ref.read(profileRepositoryProvider).updateAddress(widget.address!.id, addressData);
        }

        ref.read(authProvider.notifier).updateUserData(updatedUser);
        Navigator.of(context).pop();
        messenger.showSnackBar(SnackBar(content: Text('Lưu địa chỉ thành công!'), backgroundColor: Colors.green));

      } catch (e) {
        messenger.showSnackBar(SnackBar(content: Text(e.toString()), backgroundColor: Colors.red));
      } finally {
        if (mounted) setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(widget.address == null ? 'Thêm địa chỉ mới' : 'Sửa địa chỉ')),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16.0),
          children: [
            TextFormField(controller: _nameController, decoration: const InputDecoration(labelText: 'Họ và tên')),
            const SizedBox(height: 16),
            TextFormField(controller: _phoneController, decoration: const InputDecoration(labelText: 'Số điện thoại'), keyboardType: TextInputType.phone),
            const SizedBox(height: 16),
            TextFormField(controller: _addressController, decoration: const InputDecoration(labelText: 'Địa chỉ')),
            const SizedBox(height: 16),
            TextFormField(controller: _cityController, decoration: const InputDecoration(labelText: 'Tỉnh/Thành phố')),
            SwitchListTile(
              title: const Text('Đặt làm địa chỉ mặc định'),
              value: _isDefault,
              onChanged: (val) => setState(() => _isDefault = val),
            ),
            const SizedBox(height: 32),
            ElevatedButton(
              onPressed: _isLoading ? null : _onSave,
              child: _isLoading ? const CircularProgressIndicator(color: Colors.white) : const Text('Lưu'),
            )
          ],
        ),
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\profile\presentation\screens\edit_profile_screen.dart
================================================================================

// FILE PATH: lib/features/profile/presentation/screens/edit_profile_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:image_picker/image_picker.dart';
import 'package:smartshop_mobile/features/auth/application/auth_provider.dart';
import 'package:smartshop_mobile/features/profile/application/profile_provider.dart';

class EditProfileScreen extends ConsumerStatefulWidget {
  const EditProfileScreen({super.key});

  @override
  ConsumerState<EditProfileScreen> createState() => _EditProfileScreenState();
}

class _EditProfileScreenState extends ConsumerState<EditProfileScreen> {
  final _formKey = GlobalKey<FormState>();
  late final TextEditingController _firstNameController;
  late final TextEditingController _lastNameController;
  late final String _userId;

  @override
  void initState() {
    super.initState();
    final authState = ref.read(authProvider);
    if (authState is Authenticated) {
      _userId = authState.user.id;
      _firstNameController = TextEditingController(text: authState.user.firstName);
      _lastNameController = TextEditingController(text: authState.user.lastName);
    } else {
      _userId = '';
      _firstNameController = TextEditingController();
      _lastNameController = TextEditingController();
    }
  }

  @override
  void dispose() {
    _firstNameController.dispose();
    _lastNameController.dispose();
    super.dispose();
  }

  void _submit() {
    if (_formKey.currentState!.validate()) {
      ref.read(editProfileProvider.notifier).updateProfile(
        userId: _userId,
        firstName: _firstNameController.text.trim(),
        lastName: _lastNameController.text.trim(),
      );
    }
  }

  // ===== HÀM MỚI ĐỂ CHỌN ẢNH =====
  Future<void> _pickImage() async {
    final ImagePicker picker = ImagePicker();
    // Hiển thị dialog cho người dùng chọn Camera hoặc Thư viện
    final XFile? image = await picker.pickImage(source: ImageSource.gallery);

    if (image != null) {
      // Nếu có ảnh, gọi Notifier để cập nhật
      await ref.read(editProfileProvider.notifier).updateAvatar(image);
    }
  }

  @override
  Widget build(BuildContext context) {
    ref.listen<EditProfileState>(editProfileProvider, (previous, next) {
      final messenger = ScaffoldMessenger.of(context);
      if (next is EditProfileSuccess) {
        messenger.showSnackBar(
          SnackBar(content: Text(next.message), backgroundColor: Colors.green),
        );
        if (mounted && Navigator.of(context).canPop()) {
           // Không pop() vì có thể user muốn sửa tiếp
        }
      } else if (next is EditProfileError) {
        messenger.showSnackBar(
          SnackBar(content: Text(next.message), backgroundColor: Colors.red),
        );
      }
    });

    final editState = ref.watch(editProfileProvider);
    final authState = ref.watch(authProvider);
    final user = (authState is Authenticated) ? authState.user : null;
    final theme = Theme.of(context);

    if (user != null) {
      print('[UI] Màn hình EditProfile đang build với avatarUrl: ${user.avatarUrl}');
    }

    return Scaffold(
      appBar: AppBar(
        title: const Text('Chỉnh sửa thông tin'),
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16.0),
          children: [
            // ===== WIDGET AVATAR ĐÃ ĐƯỢC CẬP NHẬT =====
            Center(
              child: Stack(
                children: [
                  // Vòng tròn loading khi đang tải ảnh
                  if (editState is EditProfileLoading)
                    const SizedBox(
                      width: 100,
                      height: 100,
                      child: CircularProgressIndicator(),
                    ),
                  // Avatar
                  CircleAvatar(
                    radius: 50,
                    backgroundImage: NetworkImage(user?.avatarUrl ?? 'https://i.pravatar.cc/150'),
                  ),
                  // Nút chỉnh sửa
                  Positioned(
                    bottom: 0,
                    right: 0,
                    child: Material(
                      color: theme.primaryColor,
                      borderRadius: BorderRadius.circular(20),
                      child: InkWell(
                        onTap: editState is EditProfileLoading ? null : _pickImage,
                        borderRadius: BorderRadius.circular(20),
                        child: const Padding(
                          padding: EdgeInsets.all(6.0),
                          child: Icon(Icons.edit, color: Colors.white, size: 20),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 24),

            // ... các TextFormField khác giữ nguyên ...
            TextFormField(
              controller: _firstNameController,
              decoration: const InputDecoration(labelText: 'Họ'),
              validator: (value) => (value == null || value.isEmpty) ? 'Vui lòng nhập họ' : null,
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _lastNameController,
              decoration: const InputDecoration(labelText: 'Tên'),
              validator: (value) => (value == null || value.isEmpty) ? 'Vui lòng nhập tên' : null,
            ),
            const SizedBox(height: 16),
            TextFormField(
              initialValue: user?.email,
              decoration: const InputDecoration(labelText: 'Email'),
              readOnly: true,
            ),
            const SizedBox(height: 32),
            ElevatedButton(
              onPressed: editState is EditProfileLoading ? null : _submit,
              child: editState is EditProfileLoading
                  ? const SizedBox(width: 24, height: 24, child: CircularProgressIndicator(color: Colors.white, strokeWidth: 2))
                  : const Text('Lưu thay đổi thông tin'),
            ),
          ],
        ),
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\profile\presentation\screens\notifications_screen.dart
================================================================================

import 'package:flutter/material.dart';

class NotificationsScreen extends StatelessWidget {
  const NotificationsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Thông báo'),
      ),
      body: const Center(
        child: Text('Giao diện danh sách thông báo sẽ ở đây.'),
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\profile\presentation\screens\orders_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/core/mock_data/models.dart';
import 'package:smartshop_mobile/core/utils/formatter.dart';
import 'package:smartshop_mobile/features/profile/application/order_providers.dart';

class OrdersScreen extends ConsumerWidget {
  const OrdersScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final ordersAsyncValue = ref.watch(myOrdersProvider);

    return Scaffold(
      // --- XÓA BỎ AppBar Ở ĐÂY ---
      // appBar: AppBar(title: const Text('Đơn hàng của tôi')),
      
      // Phần body giữ nguyên
      body: ordersAsyncValue.when(
        data: (orders) {
          if (orders.isEmpty) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Icon(Icons.receipt_long_outlined, size: 80, color: Colors.grey),
                  const SizedBox(height: 16),
                  const Text('Bạn chưa có đơn hàng nào', style: TextStyle(fontSize: 18)),
                  const SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: () => context.go('/'),
                    child: const Text('Bắt đầu mua sắm'),
                  )
                ],
              ),
            );
          }
          return RefreshIndicator(
            onRefresh: () => ref.refresh(myOrdersProvider.future),
            child: ListView.separated(
              padding: const EdgeInsets.all(16),
              itemCount: orders.length,
              separatorBuilder: (context, index) => const SizedBox(height: 16),
              itemBuilder: (context, index) {
                return _buildOrderCard(context, orders[index]);
              },
            ),
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (err, stack) => Center(child: Text('Lỗi: ${err.toString()}')),
      ),
    );
  }

  Widget _buildOrderCard(BuildContext context, Order order) {
    Color statusColor;
    String statusText;
    switch (order.status) {
      case 'delivered':
        statusColor = Colors.green;
        statusText = 'Đã giao hàng';
        break;
      case 'shipping':
        statusColor = Colors.orange;
        statusText = 'Đang vận chuyển';
        break;
      case 'cancelled':
        statusColor = Colors.red;
        statusText = 'Đã hủy';
        break;
      default:
        statusColor = Colors.blue;
        statusText = 'Đang xử lý';
    }

    return Card(
      child: InkWell(
        onTap: () => context.push('/orders/${order.orderNumber}'),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text('Đơn hàng #${order.orderNumber}', style: const TextStyle(fontWeight: FontWeight.bold)),
                  Text(AppFormatters.formatDate(order.orderDate), style: const TextStyle(color: Colors.grey, fontSize: 12)),
                ],
              ),
              const Divider(height: 24),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text('Số lượng: ${order.items.length} sản phẩm'),
                  Text('Tổng tiền: ${AppFormatters.currency.format(order.totalAmount)}', style: const TextStyle(fontWeight: FontWeight.bold)),
                ],
              ),
              const SizedBox(height: 16),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  OutlinedButton(
                    onPressed: () => context.push('/orders/${order.orderNumber}'),
                    child: const Text('Xem chi tiết'),
                  ),
                  Text(statusText, style: TextStyle(color: statusColor, fontWeight: FontWeight.bold)),
                ],
              )
            ],
          ),
        ),
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\profile\presentation\screens\order_detail_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/core/utils/formatter.dart';
import 'package:smartshop_mobile/features/profile/application/order_providers.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:smartshop_mobile/features/profile/data/order_repository.dart';
import 'package:smartshop_mobile/core/constants/api_constants.dart';

class OrderDetailScreen extends ConsumerWidget {
  final String orderNumber;
  const OrderDetailScreen({super.key, required this.orderNumber});

  void _handleCancelOrder(BuildContext context, WidgetRef ref) async {
    final bool? confirm = await showDialog<bool>(
      context: context,
      builder: (ctx) => AlertDialog(
        title: const Text('Xác nhận hủy đơn hàng'),
        content: const Text('Bạn có chắc chắn muốn hủy đơn hàng này? Hành động này không thể hoàn tác.'),
        actions: [
          TextButton(onPressed: () => Navigator.of(ctx).pop(false), child: const Text('Không')),
          TextButton(
            onPressed: () => Navigator.of(ctx).pop(true),
            child: const Text('Xác nhận hủy'),
            style: TextButton.styleFrom(foregroundColor: Colors.red),
          ),
        ],
      ),
    );

    if (confirm == true) {
      final messenger = ScaffoldMessenger.of(context);
      try {
        await ref.read(orderRepositoryProvider).cancelOrder(orderNumber);
        ref.refresh(myOrdersProvider);
        ref.refresh(orderDetailProvider(orderNumber));
        messenger.showSnackBar(
          const SnackBar(content: Text('Đã hủy đơn hàng thành công'), backgroundColor: Colors.green),
        );
      } catch (e) {
         messenger.showSnackBar(
          SnackBar(content: Text('Lỗi: ${e.toString()}'), backgroundColor: Colors.red),
        );
      }
    }
  }

  String getImageUrl(String? imagePath) {
    if (imagePath == null || imagePath.isEmpty) return '';
    if (imagePath.startsWith('http')) return imagePath;
    if (imagePath.startsWith('/')) return "${ApiConstants.baseUrl}$imagePath";
    return "${ApiConstants.baseUrl}/img/$imagePath";
  }

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final orderAsyncValue = ref.watch(orderDetailProvider(orderNumber));

    return Scaffold(
      appBar: AppBar(title: Text('Chi tiết đơn #$orderNumber')),
      body: orderAsyncValue.when(
        data: (order) {
          final canCancel = order.status == 'pending' || order.status == 'confirmed';
          // --- THÊM LẠI KHAI BÁO BIẾN BỊ THIẾU ---
          final isDelivered = order.status == 'delivered';

          return ListView(
             padding: const EdgeInsets.all(16),
             children: [
               Text('Danh sách sản phẩm', style: Theme.of(context).textTheme.titleLarge),
               const SizedBox(height: 12),
               for(var item in order.items)
                 Card(
                   margin: const EdgeInsets.only(bottom: 12),
                   child: ListTile(
                     leading: CachedNetworkImage(
                        imageUrl: getImageUrl(item.product?.images.isNotEmpty ?? false ? item.product!.images[0] : null), 
                        width: 50,
                        height: 50,
                        fit: BoxFit.cover,
                        errorWidget: (c,u,e) => const Icon(Icons.image_not_supported, color: Colors.grey),
                        placeholder: (c,u) => const Center(child: CircularProgressIndicator(strokeWidth: 2)),
                      ),
                     title: Text(item.productName),
                     subtitle: Text('Số lượng: ${item.quantity}'),
                     // --- SỬA LẠI LOGIC HIỂN THỊ NÚT ---
                     trailing: isDelivered 
                        ? TextButton(
                            child: const Text('Đánh giá'),
                            onPressed: () {
                              // Đảm bảo item.product không null trước khi điều hướng
                              if (item.product != null) {
                                context.push('/product/${item.product!.id}/review');
                              } else {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(content: Text('Không thể đánh giá sản phẩm đã bị xóa.'))
                                );
                              }
                            },
                          )
                        : Text(AppFormatters.currency.format(item.priceAtOrder * item.quantity)),
                   ),
                 ),
                const Divider(height: 32),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Text('Tổng cộng:', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                    Text(AppFormatters.currency.format(order.totalAmount), style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                  ],
                ),
                const SizedBox(height: 32),
                if (canCancel)
                  SizedBox(
                    width: double.infinity,
                    child: OutlinedButton.icon(
                      icon: const Icon(Icons.cancel_outlined),
                      label: const Text('Hủy đơn hàng'),
                      onPressed: () => _handleCancelOrder(context, ref),
                      style: OutlinedButton.styleFrom(
                        foregroundColor: Colors.red,
                        side: const BorderSide(color: Colors.red),
                        padding: const EdgeInsets.symmetric(vertical: 12),
                      ),
                    ),
                  )
             ],
           );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (err, stack) => Center(child: Text('Lỗi: ${err.toString()}')),
      ),
    );
  }
}

================================================================================
// FILE PATH: lib\features\profile\presentation\screens\profile_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:smartshop_mobile/features/auth/application/auth_provider.dart';

class ProfileScreen extends ConsumerWidget {
  const ProfileScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final authState = ref.watch(authProvider);

    // Nếu user chưa đăng nhập
    if (authState is! Authenticated) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text('Vui lòng đăng nhập để xem thông tin.'),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () => context.go('/login'),
              child: const Text('Đăng nhập / Đăng ký'),
            )
          ],
        ),
      );
    }
    
    // Nếu đã đăng nhập, hiển thị thông tin
    final user = authState.user;

    return Scaffold(
      // AppBar đã được quản lý bởi MainScreen
      body: ListView(
        padding: EdgeInsets.zero, // Xóa padding mặc định của ListView
        children: [
          // User Info Header
          Container(
            padding: const EdgeInsets.fromLTRB(24, 60, 24, 24), // Tăng padding top
            color: Theme.of(context).primaryColor,
            child: Row(
              children: [
                CircleAvatar(
                  radius: 40,
                  backgroundImage: NetworkImage(user.avatarUrl),
                ),
                const SizedBox(width: 20),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        '${user.firstName} ${user.lastName}',
                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(color: Colors.white),
                        overflow: TextOverflow.ellipsis,
                      ),
                      Text(
                        user.email,
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(color: Colors.white70),
                        overflow: TextOverflow.ellipsis,
                      ),
                    ],
                  ),
                ),
                IconButton(
                  onPressed: () => context.push('/edit-profile'),
                  icon: const Icon(Icons.edit, color: Colors.white),
                  tooltip: 'Chỉnh sửa thông tin',
                ),
              ],
            ),
          ),
          
          // --- THÊM NÚT ADMIN PANEL ---
          if (user.role == 'admin' || user.role == 'manager')
             _buildMenuItem(
                context,
                icon: Icons.admin_panel_settings_outlined,
                title: 'Khu vực Quản trị',
                onTap: () => context.go('/admin'),
             ),
          
          // Menu List
          _buildMenuItem(
            context,
            icon: Icons.receipt_long_outlined,
            title: 'Đơn hàng của tôi',
            onTap: () => context.go('/my-orders'),
          ),
          _buildMenuItem(context, icon: Icons.favorite_border, title: 'Danh sách yêu thích', onTap: () => context.push('/wishlist')),
          _buildMenuItem(context, icon: Icons.location_on_outlined, title: 'Địa chỉ nhận hàng', onTap: () => context.push('/addresses')),
          _buildMenuItem(context, icon: Icons.payment_outlined, title: 'Phương thức thanh toán', onTap: () {}),
          _buildMenuItem(context, icon: Icons.notifications_outlined, title: 'Thông báo', onTap: () => context.push('/notifications')),
          _buildMenuItem(context, icon: Icons.settings_outlined, title: 'Cài đặt', onTap: () => context.push('/settings')),
          const Divider(),
          _buildMenuItem(
            context,
            icon: Icons.logout,
            title: 'Đăng xuất',
            color: Colors.red,
            onTap: () {
              ref.read(authProvider.notifier).logout();
            }
          ),
        ],
      ),
    );
  }

  Widget _buildMenuItem(BuildContext context, {required IconData icon, required String title, Color? color, required VoidCallback onTap}) {
    return ListTile(
      leading: Icon(icon, color: color ?? Theme.of(context).primaryColor),
      title: Text(title, style: TextStyle(color: color)),
      trailing: const Icon(Icons.arrow_forward_ios, size: 16),
      onTap: onTap,
    );
  }
}

================================================================================
// FILE PATH: lib\features\profile\presentation\screens\settings_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:smartshop_mobile/core/providers/theme_provider.dart';

class SettingsScreen extends ConsumerWidget {
  const SettingsScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final currentTheme = ref.watch(themeProvider);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Cài đặt'),
      ),
      body: ListView(
        children: [
          // --- Giao diện ---
          _buildSectionHeader(context, 'Giao diện'),
          ListTile(
            leading: const Icon(Icons.brightness_6_outlined),
            title: const Text('Chế độ Sáng/Tối'),
            trailing: DropdownButton<ThemeMode>(
              value: currentTheme,
              onChanged: (ThemeMode? newValue) {
                if (newValue != null) {
                  // Dựa vào giá trị enum của ThemeMode để gọi provider
                  if (newValue == ThemeMode.light) {
                     ref.read(themeProvider.notifier).setThemeMode(ThemeModeOption.light);
                  } else if (newValue == ThemeMode.dark) {
                     ref.read(themeProvider.notifier).setThemeMode(ThemeModeOption.dark);
                  } else {
                     ref.read(themeProvider.notifier).setThemeMode(ThemeModeOption.system);
                  }
                }
              },
              items: const [
                DropdownMenuItem(value: ThemeMode.system, child: Text('Hệ thống')),
                DropdownMenuItem(value: ThemeMode.light, child: Text('Sáng')),
                DropdownMenuItem(value: ThemeMode.dark, child: Text('Tối')),
              ],
            ),
          ),

          const Divider(),

          // --- Hỗ trợ & Liên hệ ---
          _buildSectionHeader(context, 'Hỗ trợ & Liên hệ'),
          _buildMenuItem(context, icon: Icons.help_outline, title: 'Câu hỏi thường gặp (FAQ)', onTap: () => _showMockContent(context, 'FAQ', mockFaqContent)),
          _buildMenuItem(context, icon: Icons.support_agent, title: 'Liên hệ CSKH', onTap: () => _showMockContent(context, 'Liên hệ CSKH', mockContactContent)),
          _buildMenuItem(context, icon: Icons.feedback_outlined, title: 'Gửi phản hồi / Báo lỗi', onTap: () {}),

          const Divider(),

          // --- Điều khoản & Chính sách ---
          _buildSectionHeader(context, 'Điều khoản & Chính sách'),
          _buildMenuItem(context, icon: Icons.article_outlined, title: 'Điều khoản sử dụng', onTap: () => _showMockContent(context, 'Điều khoản sử dụng', mockTermsContent)),
          _buildMenuItem(context, icon: Icons.privacy_tip_outlined, title: 'Chính sách bảo mật', onTap: () => _showMockContent(context, 'Chính sách bảo mật', mockPrivacyContent)),
          _buildMenuItem(context, icon: Icons.assignment_return_outlined, title: 'Chính sách hoàn trả & bảo hành', onTap: () => _showMockContent(context, 'Chính sách', mockReturnPolicyContent)),
        ],
      ),
    );
  }

  // Helper widget
  Widget _buildSectionHeader(BuildContext context, String title) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
      child: Text(title, style: Theme.of(context).textTheme.titleSmall?.copyWith(color: Theme.of(context).primaryColor, fontWeight: FontWeight.bold)),
    );
  }

  Widget _buildMenuItem(BuildContext context, {required IconData icon, required String title, required VoidCallback onTap}) {
    return ListTile(
      leading: Icon(icon),
      title: Text(title),
      trailing: const Icon(Icons.arrow_forward_ios, size: 16),
      onTap: onTap,
    );
  }

  // Hàm hiển thị nội dung mock
  void _showMockContent(BuildContext context, String title, String content) {
    Navigator.of(context).push(MaterialPageRoute(
      builder: (ctx) => Scaffold(
        appBar: AppBar(title: Text(title)),
        body: SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Text(content),
        ),
      ),
    ));
  }
}


// --- DỮ LIỆU MOCK (đặt ở cuối file hoặc trong file riêng) ---

const String mockFaqContent = """
**1. Làm thế nào để theo dõi đơn hàng của tôi?**
Bạn có thể vào mục "Đơn hàng" ở thanh điều hướng dưới cùng để xem trạng thái tất cả các đơn hàng đã đặt.

**2. SmartShop có hỗ trợ giao hàng toàn quốc không?**
Có, chúng tôi hỗ trợ giao hàng đến tất cả các tỉnh thành trên toàn quốc.

**3. Tôi có thể trả hàng nếu không ưng ý không?**
Có, bạn có thể tham khảo chi tiết trong "Chính sách hoàn trả & bảo hành".
""";

const String mockContactContent = """
**Tổng đài Chăm sóc Khách hàng:**
- **Hotline:** 1900 1234 (Cước phí 1.000đ/phút)
- **Email:** support@smartshop.com
- **Giờ hoạt động:** 8:00 - 22:00 tất cả các ngày trong tuần.

**Địa chỉ văn phòng:**
Số 1, Đường ABC, Quận 1, TP. Hồ Chí Minh
""";

const String mockTermsContent = """
📄 Điều khoản sử dụng
Cập nhật lần cuối: [Ngày/tháng/năm]

Chào mừng bạn đến với [Tên Ứng Dụng]! Khi sử dụng ứng dụng của chúng tôi, bạn đồng ý với các điều khoản sử dụng sau. Vui lòng đọc kỹ trước khi tiếp tục.

🔹 1. Chấp nhận điều khoản
Khi truy cập hoặc sử dụng ứng dụng, bạn đồng ý bị ràng buộc bởi các điều khoản này. Nếu bạn không đồng ý, vui lòng không sử dụng ứng dụng.

🔹 2. Tài khoản người dùng
Người dùng phải cung cấp thông tin chính xác khi đăng ký tài khoản.

Bạn có trách nhiệm giữ bảo mật thông tin đăng nhập.

Mọi hành động được thực hiện từ tài khoản của bạn sẽ được coi là do bạn thực hiện.

🔹 3. Hành vi bị cấm
Bạn không được phép:

Giả mạo danh tính hoặc sử dụng thông tin sai sự thật.

Can thiệp vào hệ thống, dữ liệu hoặc làm gián đoạn dịch vụ.

Đăng tải nội dung có tính xúc phạm, lừa đảo, hoặc vi phạm pháp luật.

Sử dụng ứng dụng với mục đích trái pháp luật hoặc gây hại cho bên thứ ba.

🔹 4. Giao dịch và đơn hàng
Chúng tôi cam kết cung cấp thông tin sản phẩm chính xác, minh bạch.

Giá cả có thể thay đổi mà không cần thông báo trước.

Đơn hàng chỉ có hiệu lực sau khi được chúng tôi xác nhận.

Trong trường hợp phát sinh lỗi kỹ thuật, hệ thống hoặc do sai sót giá, chúng tôi có quyền huỷ đơn hàng và hoàn tiền nếu đã thanh toán.

🔹 5. Sở hữu trí tuệ
Toàn bộ nội dung trong ứng dụng (logo, hình ảnh, văn bản, mã nguồn…) thuộc quyền sở hữu của [Tên công ty hoặc chủ sở hữu].

Bạn không được phép sao chép, sửa đổi, phát tán nội dung khi chưa có sự đồng ý bằng văn bản.

🔹 6. Giới hạn trách nhiệm
Chúng tôi không chịu trách nhiệm về:

Sự cố kỹ thuật ngoài ý muốn, mất kết nối mạng, hoặc lỗi hệ thống tạm thời.

Tổn thất phát sinh do hành vi sử dụng sai mục đích từ phía người dùng.

Bên thứ ba can thiệp trái phép nếu không xuất phát từ lỗi của chúng tôi.

🔹 7. Thay đổi điều khoản
Chúng tôi có thể cập nhật điều khoản này bất kỳ lúc nào. Phiên bản cập nhật sẽ có hiệu lực ngay khi được đăng tải. Người dùng nên kiểm tra định kỳ.

🔹 8. Liên hệ
Mọi thắc mắc hoặc yêu cầu hỗ trợ vui lòng liên hệ:

Email: support@tenapp.com

Hotline: 1900 123 456

Địa chỉ: Tầng 5, Tòa nhà XYZ, Quận 1, TP.HCM
""";
const String mockPrivacyContent = """ 
🛡️ Chính sách bảo mật
Cập nhật lần cuối: [Ngày/tháng/năm]

Ứng dụng [Tên ứng dụng] cam kết bảo vệ quyền riêng tư và thông tin cá nhân của người dùng. Chính sách bảo mật này giải thích cách chúng tôi thu thập, sử dụng và bảo vệ dữ liệu của bạn khi sử dụng ứng dụng.

🔍 1. Thông tin chúng tôi thu thập
Chúng tôi có thể thu thập các loại thông tin sau:

Thông tin cá nhân: Họ tên, địa chỉ email, số điện thoại, địa chỉ giao hàng.

Thông tin đăng nhập: Tên người dùng, mật khẩu (được mã hóa).

Dữ liệu giao dịch: Lịch sử mua hàng, đơn hàng, phương thức thanh toán (chúng tôi không lưu trữ thông tin thẻ tín dụng).

Dữ liệu thiết bị: Loại thiết bị, hệ điều hành, địa chỉ IP, thông tin trình duyệt.

Thông tin hành vi người dùng: Sản phẩm đã xem, tìm kiếm, hoặc thêm vào danh sách yêu thích.

🧠 2. Mục đích sử dụng thông tin
Chúng tôi sử dụng thông tin của bạn để:

Cung cấp và cải thiện dịch vụ mua sắm.

Xử lý đơn hàng và giao hàng đúng địa chỉ.

Cá nhân hóa trải nghiệm mua sắm (gợi ý sản phẩm phù hợp).

Gửi thông báo về đơn hàng, khuyến mãi, hoặc cập nhật quan trọng.

Hỗ trợ người dùng khi cần thiết.

🔐 3. Bảo mật thông tin
Dữ liệu cá nhân được mã hóa và lưu trữ an toàn trên máy chủ.

Mật khẩu được mã hóa bằng các phương pháp hiện đại (ví dụ: SHA-256, bcrypt).

Chúng tôi sử dụng kết nối HTTPS để truyền dữ liệu an toàn giữa thiết bị và máy chủ.

Giới hạn truy cập nội bộ chỉ với nhân viên có thẩm quyền.

🤝 4. Chia sẻ thông tin với bên thứ ba
Chúng tôi không bán hoặc chia sẻ thông tin cá nhân của bạn với bên thứ ba trừ các trường hợp:

Đối tác giao hàng (chỉ tên, số điện thoại, địa chỉ giao hàng).

Nhà cung cấp dịch vụ thanh toán (bảo mật PCI-DSS).

Khi có yêu cầu hợp pháp từ cơ quan chức năng.

⚙️ 5. Quyền của người dùng
Người dùng có thể:

Xem, cập nhật, hoặc xoá thông tin cá nhân trong phần "Tài khoản".

Yêu cầu xóa tài khoản và toàn bộ dữ liệu liên quan bằng cách liên hệ [email hỗ trợ].

Hủy đăng ký nhận thông báo bất cứ lúc nào.
""";
const String mockReturnPolicyContent = """ 
🔁 Chính sách hoàn trả
Cập nhật lần cuối: [Ngày/tháng/năm]

Tại [Tên Ứng Dụng], chúng tôi cam kết mang đến trải nghiệm mua sắm tốt nhất cho bạn. Nếu sản phẩm bạn nhận được có lỗi, không đúng mô tả, hoặc không đạt kỳ vọng, bạn hoàn toàn có thể yêu cầu hoàn trả theo các điều kiện dưới đây:

📦 1. Điều kiện hoàn trả
Bạn có thể yêu cầu trả hàng nếu sản phẩm:

Bị lỗi kỹ thuật từ nhà sản xuất.

Bị hư hỏng trong quá trình vận chuyển.

Không đúng với sản phẩm đã đặt (sai mẫu, sai màu, sai thông số).

Còn trong thời hạn hoàn trả: 7 ngày kể từ ngày nhận hàng.

Sản phẩm còn nguyên vẹn (bao bì, tem niêm phong, phụ kiện đi kèm).

❌ Không áp dụng hoàn trả nếu:

Sản phẩm đã qua sử dụng, bị rơi vỡ, móp méo do người dùng.

Hết thời gian quy định hoàn trả.

Sản phẩm nằm trong danh mục không hỗ trợ đổi trả (ví dụ: thẻ cào, phần mềm đã kích hoạt, hàng giảm giá sâu,…).

📑 2. Quy trình hoàn trả
Gửi yêu cầu hoàn trả qua ứng dụng (trong mục “Đơn hàng” > “Yêu cầu hoàn trả”) hoặc liên hệ CSKH.

Đính kèm hình ảnh/video mô tả tình trạng sản phẩm.

Chờ hệ thống xác minh yêu cầu trong 1–2 ngày làm việc.

Nếu được chấp nhận, bạn sẽ:

Nhận thông tin hướng dẫn gửi hàng hoàn lại.

Hoặc được thu hồi sản phẩm tại địa chỉ giao hàng.

💸 3. Phương thức hoàn tiền
Sau khi nhận được sản phẩm trả về và kiểm tra, chúng tôi sẽ tiến hành hoàn tiền theo phương thức:

Hoàn vào tài khoản ngân hàng (3–7 ngày làm việc).

Hoặc hoàn vào ví điện tử nếu bạn đã thanh toán qua ví.

📞 4. Liên hệ hỗ trợ
Nếu có bất kỳ thắc mắc nào về hoàn trả, vui lòng liên hệ:

Email: support@tenapp.com

Hotline: 1900 123 456

Thời gian làm việc: 8:00 – 18:00 từ Thứ 2 đến Thứ 7

""";


================================================================================
// FILE PATH: lib\features\profile\presentation\screens\wishlist_screen.dart
================================================================================

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:smartshop_mobile/features/products/application/product_providers.dart';
import 'package:smartshop_mobile/features/products/presentation/widgets/product_card.dart';

class WishlistScreen extends ConsumerWidget {
  const WishlistScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // --- DÒNG BỊ THIẾU ĐÃ ĐƯỢC THÊM VÀO ĐÂY ---
    final wishlistAsync = ref.watch(wishlistProvider);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Danh sách yêu thích'),
      ),
      body: wishlistAsync.when(
        data: (wishlist) {
          if (wishlist.isEmpty) {
            return const Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.favorite_border, size: 80, color: Colors.grey),
                  SizedBox(height: 16),
                  Text('Danh sách yêu thích của bạn trống', style: TextStyle(fontSize: 18)),
                   SizedBox(height: 8),
                  Text('Hãy nhấn ❤️ trên sản phẩm để thêm vào đây nhé!', style: TextStyle(color: Colors.grey)),
                ],
              ),
            );
          }
          return RefreshIndicator(
            onRefresh: () => ref.refresh(wishlistProvider.notifier).loadWishlist(),
            child: GridView.builder(
              padding: const EdgeInsets.all(16),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                childAspectRatio: 0.65,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
              ),
              itemCount: wishlist.length,
              itemBuilder: (context, index) {
                return ProductCard(product: wishlist[index]);
              },
            ),
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (err, stack) => Center(child: Text('Lỗi: $err')),
      ),
    );
  }
}

================================================================================
// FILE PATH: test\widget_test.dart
================================================================================



